{
	"scope": "source.ttcn3",

	"completions": [
		"true",
		"false",
		"omit",
		"null",
		"pass",
		"fail",
		"inconc",
		"none",
		"error",
		"address",
		"anytype",
		"default",
		"objid",
		"verdicttype",
		"type",
		"mod",
		"rem",
		"not",
		"and",
		"or",
		"xor",
		"not4b",
		"and4b",
		"or4b",
		"xor4b",
		"pattern",
		"self",
		"mtc",
		"read",
		"activate",
		"create",
		"running",
		"system",
		"subset",
		"superset",
		"getverdict",
		"integer",
		"float",
		"octetstring",
		"hexstring",
		"bitstring",
		"charstring",
		"universal charstring",
		"boolean",
		"char",
		"log","stop","alt","interleave","deactivate","connect","disconnect","map","unmap","start",
		"done","send","call","reply","receive","trigger","getcall","getreply","check","clear","timeout",
		"setverdict","action","execute","return","goto","label","raise","catch","control","runs","on",
		"in","out","inout","any","all","sender","to","value","modifies","nowait","param","length","recursive",
		"except","optional","ifpresent","language","override","modulepar","group",
		"with","display","encode","extension","variant","signature","noblock","exception","altstep",
		"template","message","procedure","mixed","var","const","external",
        { "trigger": "module", "contents": "module $0 {\n}" }, 
        { "trigger": "import", "contents": "import from $0;"}, 

        //basic type
        { "trigger": "var integer", "contents": "var integer $0;"},
        { "trigger": "var float", "contents": "var float $0;"}, 
        { "trigger": "var octetstring", "contents": "var octetstring '$0'O;"},
        { "trigger": "var hexstring", "contents": "var hexstring '$0'H;"},
        { "trigger": "var bitstring", "contents": "var bitstring '$0'B;"}, 
        { "trigger": "var charstring", "contents": "var charstring \"$0\";"},
        { "trigger": "var universal", "contents": "var universal charstring \"$0\";"}, 
        { "trigger": "var boolean", "contents": "var boolean ;"},
        { "trigger": "var char", "contents": "char \"$0\";"},
        { "trigger": "timer", "contents": "timer t_$0;"},
 
        //struct type
        { "trigger": "type set", "contents": "type set $0{\n}"},
        { "trigger": "type record", "contents": "type record $0{\n}"},
        { "trigger": "type union", "contents": "type union $0{\n}"},
        { "trigger": "type enumerated", "contents": "type enumerated $0{\n}"},
        { "trigger": "type component", "contents": "type component $0{\n}"},
        { "trigger": "type port", "contents": "type port $0{\n}"},

        //builtin functions
        { "trigger": "int2char\tint2char(integer value)", "contents": "int2char($0)"},
        { "trigger": "int2unichar\tint2unichar(integer value)", "contents": "int2unichar($0)"},
        { "trigger": "int2bit\tint2bit(in integer invalue, in integer length)", "contents": "int2bit($0,)"},
        { "trigger": "int2hex\tint2hex(in integer invalue, in integer length)", "contents": "int2hex($0,)"},
        { "trigger": "int2oct\tint2oct(in integer invalue, in integer length)", "contents": "int2oct($0,)"},
        { "trigger": "int2str\tint2str(in integer invalue)", "contents": "int2str($0)"},
        { "trigger": "int2float\tint2float(in integer invalue)", "contents": "int2float($0)"},
        { "trigger": "float2int\tfloat2int(in float invalue)", "contents": "float2int($0)"},
        { "trigger": "unichar2int\tunichar2int(in universal charstring invalue)", "contents": "unichar2int($0)"},
        { "trigger": "bit2int\tbit2int(in bitstring invalue)", "contents": "bit2int($0)"},
        { "trigger": "bit2hex\tbit2hex(in bitstring invalue)", "contents": "bit2hex($0)"},
        { "trigger": "bit2oct\tbit2oct(in bitstring invalue)", "contents": "bit2oct($0)"},
        { "trigger": "bit2str\tbit2str(in bitstring invalue)", "contents": "bit2str($0)"},
        { "trigger": "hex2int\thex2int(in hexstring invalue)", "contents": "hex2int($0)"},  
        { "trigger": "hex2bit\thex2bit(in hexstring invalue)", "contents": "hex2bit($0)"},
        { "trigger": "hex2oct\thex2oct(in hexstring invalue)", "contents": "hex2oct($0)"},
        { "trigger": "hex2str\thex2str(in hexstring invalue)", "contents": "hex2str($0)"},
        { "trigger": "oct2int\toct2int(in octetstring invalue)", "contents": "oct2int($0)"},
        { "trigger": "oct2bit\toct2bit(in octetstring invalue)", "contents": "oct2bit($0)"},
        { "trigger": "oct2str\toct2str(in octetstring invalue)", "contents": "oct2str($0)"},
        { "trigger": "str2int\tstr2int(in charstring invalue)", "contents": "str2int($0)"},
        { "trigger": "str2oct\tstr2oct(in charstring invalue)", "contents": "str2oct($0)"},
        { "trigger": "lengthof\tlengthof(in template any_string_or_list_type)", "contents": "lengthof($0)"},
        { "trigger": "sizeof\tsizeof(in template any_record_set_type)", "contents": "sizeof($0)"},
        { "trigger": "ispresent\tispresent(in template any_ type)", "contents": "ispresent($0)"},
        { "trigger": "ischosen\tischosen(in template any_union_type)", "contents": "ischosen($0)"},
        { "trigger": "substr\tsubstr(in template any_string_or_sequence_type,in integer index,in integer count)", "contents": "substr($0, , )"},
        { "trigger": "rnd\trnd([in float seed])", "contents": "rnd($0)"},
        { "trigger": "match\tmatch(in value, in template)", "contents": "match($0, )"},
        { "trigger": "valueof\tvalueof(in template)", "contents": "valueof($0)"},

        //condition statement
        { "trigger": "if", "contents": "if($0) {\n}"},
        { "trigger": "else", "contents": "else($0) {\n}"},
        { "trigger": "for", "contents": "for($0; ; ) {\n}"},
        { "trigger": "while", "contents": "while($0) {\n}"},
        { "trigger": "do", "contents": "do {$0\n} while()"},
        { "trigger": "repeat", "contents": "repeat"},

        { "trigger": "testcase", "contents": "testcase $0() runs on system {\n}"},
        { "trigger": "fucntion", "contents": "function $0() runs on {\n}"},
        { "trigger": "template", "contents": "template"}
	]
}
