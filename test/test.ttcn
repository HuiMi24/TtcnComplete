
module MmeTesterVerification {

 import from HssGeneralPtcProcedures{
      function f_hSS_BasicUpdateLocationWithAuthentication, f_hSS_BasicUpdateLocationWithAuthentication_r;}

 
  import from LCSAP language "ASN.1:1997" all;
  import from S1AP language "ASN.1:1997" all; 
  import from NAS language "ASN.1:1997" all; 
  import from COMMONIEs language "ASN.1:1997" all;
  import from CC language "ASN.1:1997" { 
    type
    CauseCC,CodingStandard,CauseValue,SSVersionIndicator,VersionIndicator };
  import from MAP language "ASN.1:1997" all;
  import from DiameterS6Msg all;
  import from DiameterS6AVP all;
  import from DiameterBase_AVP all;
 import from SgsapCodecTestCases {template a_SGsAP_Message_RESET_ACK_Fill, a_SGsAP_Message_RESET_INDICATION_Fill, a_SGsAP_Message_RESET_ACK_Fill, a_SGsAP_Message_RESET_INDICATION_Fill,a_SGsAP_Message_IMSI_DETACH_ACK_Fill,a_SGsAP_Message_IMSI_DETACH_INDICATION_Fill,a_SGsAP_Message_LOCATION_UPDATE_ACCEPT_Fill_Others,a_SGsAP_Message_LOCATION_UPDATE_REQUEST_Fill, a_SGsAP_Message_IMSI_DETACH_ACK_Fill, a_SGsAP_Message_IMSI_DETACH_INDICATION_Fill,a_SGsAP_Message_LOCATION_UPDATE_ACCEPT_Fill_Others,a_SGsAP_Message_LOCATION_UPDATE_REQUEST_Fill}; 
  import from GeneralFunction {function f_guti2RaiPtmsiPtmsiSignature, f_RealIP2Oct, f_RealIP2Bit, f_Bit2RealIP, f_increaseLastDigitOfGuti,
                               extf_KillStack;};
  import from DiameterTemplatesMme { template a_SubscriptionDataGrp3GPP, a_SubscriptionDataGrp3GPPWithModifiedValues, a_DsrFlag, a_SubscriptionDataGrpWithAPNConfigurationProfile; };
  import from GtpV2FunctionsMme { function f_s11_DeleteDedicatedBearerRequest_s;};
   import from S1DetachProcedures {
    function
   f_s1_BasicDetachWithSecurity,f_s1_BasicCipheredDetachWithSecurity, f_s1_BasicDetach, f_s1_NwInitiatedDetach, f_s1_BasicCipheredDetachWithSecurityInitialUE; }
 
 import from DiameterCommon all;
 import from GtpV2IETemplatesCore7 {
    template
    a_EBI, a_EBIValue, a_IEInfo,  a_PrivateExtension, a_PrivateExtensionValue, a_PrivateExtValue,
    a_LDN, a_LDNValue, a_ServingNetwork, a_ServingNetworkValue, a_HopCounter, a_HopCounterValue, a_Indication, a_IndicationValue, a_RATType, a_RATTypeValue,
    a_UDP_SourcePortNumber, a_UDP_SourcePortNumberValue, a_FTEID, a_FTEIDValue, a_CompleteRequestMessage, a_CompleteRequestMessageValue,
    a_PTMSI_Signature, a_PacketTMSI, a_ULI, e_ULIValue, a_RAI_ULI, a_GUTI, a_GUTIValue, a_MTMSI, a_IMSI, a_IPv4Addr; }
 import from GtpV2IETypesCore7 all; 
import from GtpV2CommonTypes {
    type
    Boolean, Presence
  }
  import from GtpV2IETemplatesCore7 {
    template
    a_EBI, a_EBIValue, a_IEInfo,  a_PrivateExtension, a_PrivateExtensionValue, a_PrivateExtValue,
    a_LDN, a_LDNValue, a_ServingNetwork, a_ServingNetworkValue, a_HopCounter, a_HopCounterValue, a_Indication, a_IndicationValue, a_RATType, a_RATTypeValue,
    a_UDP_SourcePortNumber, a_UDP_SourcePortNumberValue, a_FTEID, a_FTEIDValue, a_CompleteRequestMessage, a_CompleteRequestMessageValue,
    a_PTMSI_Signature, a_PacketTMSI, a_ULI, e_ULIValue, a_RAI_ULI, a_GUTI, a_GUTIValue, a_MTMSI, a_IMSI, a_IPv4Addr; }

  import from S1AttachFunctions {
    function
    f_s1_AttachReq_s, f_s1_AttachReq_with_guti_s, f_s1_AttachAccept_r,
    f_s1_AttachComplete_s, f_s1_AttachReject_r, f_s1_AttachReq_Null_s, f_s1_AttachReq_Aes_s; }

  import from S1AttachProcedures {
    function
    f_s1_BasicAttachWithSecurityAes,
    f_s1_BasicAttachWithSecurityWithIdentityAndAuthentication_with_guti, f_s1_CipheredAttach,
    f_s1_CipheredAttachWithSecurity_with_guti, f_s1_BasicAttachWithoutAuthentication, f_s1_BasicAttach,
    f_s1_BasicAttachWithSecurity_with_guti; }

  import from S1PdpFunctions {
    function
    f_s1_ServiceRequest_s_s,
    f_s1_initialContextSetup_no_nas_pdu_r; }


   import from GtpV2CommonBehaviour {
    function
    f_preamble_S11, f_postamble_S11; }
   import from DiameterBaseMessage all;
  import from GtpV2ProceduresMme {
    function
    f_s11_CreateSessionBasic, f_s11_DeleteSessionBasic, 
    f_s11_ModifyBearerBasic, f_s11_ModifyBearerBasic_ServiceRequest,
    f_s11_ReleaseAccessBearersBasic, f_s11_DLDataNotificationBasic,
    f_s11_ProcedureModifyBearerResponse_s, 
    f_s11_ProcedureModifyBearerRequest_r_ServiceRequest,
    //f_s11_ProcedureReleaseAccessBearersRequest_r_retSutAddr,
    f_s11_ProcedureCollectReleaseAccessBearersRequestAndSendResp_rs,
    f_s11_ProcedureReleaseAccessBearersResponse_s}
  import from GtpV2Types {
    type
    RawGtpV2Msg;
  }
      
  import from GtpV2IETypes {
    type
    Causes; }

  import from GtpV2Types {
  type
    RawGtpV2Msg;}

  import from GtpV2TypesCore7 {
    type 
    GtpV2MsgCore7
  }
    import from A21Messages all;
    import from A21IETemplates all;
    import from A21CommonBehaviour all;
    import from A21TestSystem all;
    import from S102_IF all;

  import from S1PortFunctions all;

    import from S11_IF {
    type
    GTPV2Comp;
    function
    f_initS11; }


  import from LcsapTemplates all;
  import from LcsTemplates all;
  import from DiameterS6MsgTemplates all;
  import from DiameterS6AVPTemplates all;
  import from DiameterBaseMsgTemplates all;
  import from DiameterBase_Templates all;
  import from S1apPduTemplates all;
  import from S1apIeTemplates all;
  import from S1apIeFieldTemplates all;
  import from S1apTemplates_common all;
  import from NasTemplates all;
  import from COMMONIEs_Templates 
 {
    template
    a_ContainerIdListItem, a_ContainerIdContent, a_ContainerId, 
    a_ProtocolIdListItem, a_ProtocolIdContent, a_ProtocolId, a_PLMNList, a_PLMNId, a_LinkedTI, a_Flag,
               a_VoiceDomainPreferenceAndUesUsageSetting, a_AccessPointName, a_Label, a_ProtocolConfigurationOptions,
    a_TIO, a_TransactionIdentifierL3, a_Spare1, a_GPRSTimer3,a_LocationAreaIdentification ; }
  import from CC_Templates {
    template
    a_CallingPartyBCDNumber, a_NumberDigits, a_CallingPartyBCDNumberOct3grp,
    a_BCDNumberOctet3, a_CauseCC, a_CauseCCOct3grp, a_CauseCCOctet3, a_CodingStandard, a_CauseLocation, a_CauseCCOctet3a, a_CauseCCOct4grp,
    a_CauseCCOctet4, a_CauseValue, a_CauseDiagnostics, a_SSVersionIndicator, a_VersionIndicator ;
  }
  import from ComponetsTemplates all;
  import from MAPTemplates all;


  import from LcsapTCVRecords all;
  import from DiameterTCVRecordsMme all;
  import from S1TCVRecords all;
  import from InitParameters all;
  import from MmeParameters all;
  import from ParametersRecord all;

  import from SLs_IF all;
  import from DIAM_IF all;
  import from S1_IF all;
  import from SGS_IF all;

  import from LcsapCommonBehaviour all;
  import from DiameterCommonBehaviourMme all;
  import from S1apCommonBehaviour all;
  import from CoordinationMessages all;

  import from DiameterProceduresMme all;

  import from DiameterDefaults {altstep 
       d_s6aCommonDefault,
       d_Purge,
       d_DeviceWatchdog,
       d_S6SyncDefault,
       d_DiamCommunicationUp; }
  import from S1Defaults all;
  import from SgsapDefaults all;

  import from TestSystem all;
  import from LcsapTestSystem all;
  import from S1PortFunctions all;

  import from S1apProcedures all;

  import from NasUtilityBox {
    function 
    encodeEPSMobileIdentityIMSI, isDecodeNASGenericMessageContainerValue_CanMatch_Messages4SupplementaryServicesControl,
    encodeNASFacility, encodeNASRegister, encodeNASReleaseComplete;
  };
  import from TabCodecBasicTypes {
    type
    RawDiameterMsg;}
  import from NokiaSyncLib all;
  import from NokiaTimeLib all;
  import from NokiaVerdictControlLib { 
    type 
    FncRetCode; 
    function 
    f_setVerdict; }
  import from ExtSync {
    function 
    f_selfOrClientExternalSyncAndVerdict, f_connect4SelfOrClientExternalSync,
    f_disconnect4SelfOrClientExternalSync
  }
 import from GtpV2Defaults {
    altstep
    d_S11SyncDefault, d_GtpV2CommonDefault, f_ipRouterIndicationDefault; }

  import from T3UtilityBox all;
  
  import from GtpV2MessagesTemplatesCore7 {template a_EchoResponse, a_CreateSessionRequest,a_CreateSessionResponse,a_ModifyBearerRequest, a_ModifyBearerResponse }
  import from GtpV2CodecTestTemplatesCore7 {template a_CreateSessionRequestTest,a_CreateSessionResponseTest, a_ModifyBearerRequestTest,a_ModifyBearerResponseTest,a_CreateSessionRequestTest_for_test }
  import from S3_IF all;
  import from GtpV1CommonBehaviour all;
  import from GtpV1MessageTemplates {template a_EchoRequest,a_EchoResponse }
  import from GtpV1HeaderTemplates {template a_HeaderOptionalPart_SPresented, a_MessageHeaderGTP_SFlag }
  import from GtpV1IETemplates { template a_Recovery }
  import from GtpV1Types { type RawGtpV1Msg }

//  import from GtpV1IETemplates all;
//  import from GtpV1CodecTestTemplates {template a_ModifyBearerRequest, a_ModifyBearerResponse}
  import from GtpV1CodecTestTemplates {template a_sgsnContextRequest_for_Gtpv1,a_updatePDPContextResponse_for_Gtpv1 };

  import from GtpV1FunctionsMme {function f_gutiMap2Utran, f_gtpv1_SGSNContextResponse_s, f_gtpv1_SGSNContextRequest_imsi_s, f_gutiMap2RaiPtmsi, f_gtpv1_SGSNContextAcknowledge_r, f_gtpv1_SGSNContextResponse_s_no_PDPContext, f_gtpv1_SGSNContextRequest_r;};
  import from S1ReleaseProcedures {
    function
    f_s1_UEContextReleaseCommand_rs, f_s1_UEContextRelease_srs,
    f_s1_UEContextRelease_s, f_s1_UEContextReleaseCommand_r,
    f_s1_UEContextReleaseComplete_s; }
  import from S1TauFunctions {function f_s1_TauReq_InitialUe_s_s,f_s1_TauReq_InitialUe_withoutLastVisitedTAI_s, f_s1_PlainTauReject_r ;};
  import from S1TauProcedures{function f_s1_InitialContextSetupReq_TauAccept_s_r;};
  import from S1TauProcedures {
   function
   f_s1_BasicTrackingAreaUpdateWithSecurity_InitialUe, f_s1_BasicTrackingAreaUpdateWithSecurity_Ul_Nas;}
  import from NokiaTextStringLib {type UnicodeText1to255;};
  import from GtpV1Defaults all;

  import from S1HandoverProcedures {function f_s1_cdma2000Tunneling_sr, f_s1_cdma2000Tunneling_rs };
  import from S1HandoverFunctions {function f_s1_downlinkS1Cdma2000Tunneling_r};

  import from SgsapTemplates all;
  import from SgsapDefaults all;
  import from SGsProcedures all;
  import from SGsFunctions all;

  import from X2_IF {
    type
    X2Comp;
    function
    f_initX2_TCP; }
    
  import from Lip2CommonBehaviour all;

  import from Lip2Defaults {altstep
    d_Lip2SyncDefaultX1, d_Lip2SyncDefaultX2, d_X2CommonDefault2, d_X1CommonDefault,
    d_X2CommonDefault2IndToDataPort, d_X2TcpConnectInd; }

  import from X2Procedures all;

  import from IpRouterPtApi { function f_disableIprSuccessIndications, f_setTosInIpHeader; };
  import from IpRouterUdpTcpPtApi{template a_anyUdpMessageInd;};
  import from IPlib {function f_set_tos; type SctpMsgParams;};

  // for test.. 
  modulepar charstring mp_MME_Ipaddress     := "10.121.122.125";
  modulepar integer    mp_MME_port_number   := 50004;
  modulepar charstring mp_sGW_Ipaddress     := "10.121.122.125";
  modulepar integer    mp_sGW_port_number   := 50002;
  modulepar integer    mp_timesOfCreatSession := 10;

  testcase EPC_MT_LR () runs on MTC system TSI {
    
    var DIAMComp gMLC  := DIAMComp.create("GMLC");
    var SLsComp  eSMLC := SLsComp.create("ESMLC");
    var S1Comp  eNB := S1Comp.create("ENB");

    var DIAMComp mME1  := DIAMComp.create("MME1");
    var SLsComp  mME2  := SLsComp.create("MME2");
    var S1Comp   mME3  := S1Comp.create("MME3");

    gMLC.start( f_GMLC_EPC_MT_LR() );
    eSMLC.start( f_SMLC_EPC_MT_LR() );
    eNB.start( f_ENB_EPC_MT_LR() );

    mME1.start( f_MME1_EPC_MT_LR() );
    mME2.start( f_MME2_EPC_MT_LR() );
    mME3.start(f_MME3_EPC_MT_LR() );
    
    f_serverSyncClientsAndStop(6,{"init",c_poSyncPoint});
  }
  
  function f_GMLC_EPC_MT_LR () runs on DIAMComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;

    f_S6a_Initparameters();
    f_Slg_Initparameters();
    f_SubscriberParameters(v_subscriberParameters);
    log(v_subscriberParameters);

    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress := {
    a_ServedPartyIpAddress({ipv4 := "127.0.0.3"}, 0),
    a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000003'O}, 0) };
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters := e_operatorSpecific150;
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0));
    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLg( v_subscriberParameters, 
                             mp_sctpIpAddrSlgGmlc, mp_sctpPortNumberSlgGmlc, 
                             mp_sctpIpAddrSlgMME,  mp_sctpPortNumberSlgMME );
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_SendPLRAndReceiveResponse(v_subscriberParameters);

    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_SMLC_EPC_MT_LR () runs on SLsComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;

    f_Sls_Initparameters();
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLs( mp_sctpIpAddrSlsEgsc, mp_sctpPortNumberSlsEgsc, 
                             mp_sctpIpAddrSlsMME,  mp_sctpPortNumberSlsMME );
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_ReceiveLocationRequestAndSendResponse(v_subscriberParameters)

    f_Postamble_SLs();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_ENB_EPC_MT_LR () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var template CMessage v_bearerIdMsg;
    var integer v_setupIndex := 1; 
    var octetstring v_guti;
    var octetstring v_nashex;
    var boolean v_mat_ret4register;

    f_connect4SelfOrClientSync();
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_d_s1CommonDefault := activate(d_S1ComDef());

   //SCTP Connection
    v_ret := f_initS1 (mp_sctpIpAddr_S1_ENB_UE,
                       mp_sctpPortNumber_ENB_UE, 
                       mp_sctpIpAddr_S1_MME_New, 
                       mp_sctpPortNumber_MME_New);

    f_S1_Initparameters();
    f_S10_Initparameters();
    f_enbParameters(v_enb_params);

    //log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);
    g_v_extSyncTimeGuard := 20.0;
    //log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);

    v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
    a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    v_ret := f_S1setupProcedure( v_enb_params);

    for (v_setupIndex :=2;v_setupIndex<5;v_setupIndex:=v_setupIndex+1){
      v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
      a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    }

    f_SubscriberParameters(v_subscriberParameters);
    log(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("init",v_ret);  
    v_subscriberParameters.s1.mobileIdentity := encodeEPSMobileIdentityIMSI(oct2hex(valueof(a_octetstring(v_subscriberParameters.s10_core7.imsi))));

    v_subscriberParameters.s1.tAC := a_TAC(1);
    v_subscriberParameters.s1.epsBearerIdentity := 0 ;

    v_subscriberParameters.s1.mME_UE_S1AP_ID := 1;
    v_subscriberParameters.s1.eNB_UE_S1AP_ID := 2;

    v_mat_ret4register := false;
    v_nashex := encodeNASRegister( valueof (a_Register_Filled) );
    log (v_nashex);
    v_mat_ret4register := isDecodeNASGenericMessageContainerValue_CanMatch_Messages4SupplementaryServicesControl(v_nashex, omit, a_Register_Filled, omit);
 
    if( v_mat_ret4register == true ) {
      v_subscriberParameters.s1.register := v_nashex;
    }

    v_subscriberParameters.s1.releaseComplete := ?;
    f_s1_LocationNotification_rs(v_subscriberParameters);

    f_sleep (2.0);
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();

  }

  function f_MME1_EPC_MT_LR () runs on DIAMComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;
    var CMessage v_Msg;

    f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
    v_ret := f_preamble_SLgWithoutCerCea(  mp_sctpIpAddrSlgMME, mp_sctpPortNumberSlgMME, 
                                           mp_sctpIpAddrSlgGmlc, mp_sctpPortNumberSlgGmlc);
    f_sleep(12.0);

    pt_diameter.send(RawDiameterMsg:'01010000688000010100000000c8a03c2d000029300000010b0000000c00005678000001014000000e00010a66b66d0000000001084000000b4d4d4500000001284000000d5245414c4d0000000000010d0000000d464c4558490000000000010a4000000c00000031'O)
    // rc Message received successfully
    // vv     cer {

    pt_diameter.receive;
    // sc pt_diameter.send(DiameterS6Msg:DiameterS6Msg.DiameterS6Msg) to a test component   @+5.65044
    // vv     cea {
    f_selfOrClientSyncAndVerdict("init",v_ret);

    pt_diameter.receive(a_PlrMsg(
                           ?,1,1,1,
                           a_SessionId(a_sessionId,?),
                           a_VendorSpecificAppId(?),
                           a_AuthSessionState(STATE_MAINTAINED,?),  
                           a_OriginHost(a_origHost,?),              
                           a_OriginRealm(a_origRealm,?),            
                           a_DestinationHost(a_destHost,?),   
                           a_DestinationRealm(a_destRealm,?),
                           a_LocationType(?,CURRENT_LOCATION),
                           a_UserName(a_origHost,?),
                           a_Msisdn('01020304050607'O,?),
                           a_Imei("ilovepengzhihao4ever",?),
                           a_LCSEPSClientName(?,a_LCSNameString("ilovepengzhihao4ever",?),a_LCSFormatIndicator(LOGICAL_NAME,?)),
                           a_LCSClientType(?,EMERGENCY_SERVICES),
                           a_LCSRequestorName(?,a_LCSRequestorIdString("ilovepengzhihao4ever",?),a_LCSFormatIndicator(LOGICAL_NAME,?)),
                           a_LCSPriority(?,1),
                           //a_LCSQoS(?,ASSURED,10,11,VERTICAL_COORDINATE_IS_NOT_REQUESTED,LOW_DELAY),             
                           a_LCSQoS(?,a_LCSQoSClass(?,ASSURED),a_HorizontalAccuracy(?,10),a_VerticalAccuracy(?,11),a_VerticalRequested(?,VERTICAL_COORDINATE_IS_NOT_REQUESTED),a_ResponseTime(?,LOW_DELAY)), 
                           a_VelocityRequested(?,VELOCITY_IS_NOT_REQUESTED),
                           {a_SupportedGADShapes(?,a_SupportedGADShapesValue(a_SupportedGADShapesBitmask3(e_not_supported,e_not_supported,e_not_supported,e_not_supported,         e_not_supported,e_not_supported,e_not_supported,e_not_supported)))},

                           a_LCSServiceTypeID(?,11),
                           a_LCSCodeword(?,"ilovepengzhihao4ever"),
                           a_LCSPrivacyCheckNonSession(?,a_LCSPrivacyCheck(ALLOWED_WITHOUT_NOTIFICATION,?)),
                           a_LCSPrivacyCheckSession(?,a_LCSPrivacyCheck(ALLOWED_WITHOUT_NOTIFICATION,?)),
                           a_ServiceSelection("ilovepengzhihao4ever", ?),
                           {a_SupportedFeatures(a_SupportedFeaturesGrp(?),?)},
                           a_ProxyInfoLst(a_origHost,'012345'O,?), 
                           {a_RouteRecord(a_origHost,?)},
                           a_failedAVPLst(?)
       ));

    f_sleep(1.5);
    pt_diameter.send(a_PlaMsg(
                           0,1,1,1,
                           a_SessionId(a_sessionId,0),
                           a_VendorSpecificAppId(0),
                           a_ResultCode(18,0),
                           a_ExperimentalResult(
                             a_ExperimentalResultGrp(
                              a_VendorId(10,0),
                              a_ExperimentalResultCode(10,0)),
                              0),
                           a_AuthSessionState(STATE_MAINTAINED,0),  
                           a_OriginHost(a_origHost,0),              
                           a_OriginRealm(a_origRealm,0),            
                           a_LocationEstimate(0,a_EllipsoidPoint(e_North, 7, 23)),
                           a_AccuracyFulfilmentIndicator(0,REQUESTED_ACCURACY_FULFILLED),
                           a_AgeOfLocationEstimate(0,23),
                           a_VelocityEstimate(0,a_HorizontalWithVerticalVelocityAndUncertaintyEstimateValue(e_Upward,290, 120, 20, 123, 19)),
                           a_EUTRANPositioningData(0,a_EUTRANPositioningDataValue({a_PositioningData(e_pd_OTDOA, e_pd_Attempted_successfully_results_used_to_generate_location)}, {a_GNSSPositioningData(e_gnsspd_Conventional, e_gnsspd_Modernized_GPS, e_gnsspd_Attempted_successfully_results_used_to_generate_location)},
                           omit
                           )),
                           a_ECGI(0,'1234'O),
                           omit,
                           a_ServingNode(0,a_SgsnNumber('1234'O,0),a_MMEName(0,"ilovepengzhihao4ever"),a_MMERealm(0,"ilovepengzhihao4ever"),a_MSCNumber(0,'1234'O),a_ThreeGPPAAAServerName(0,"ilovepengzhihao4ever"),a_LCSCapabilitiesSets(0,6),a_GmlcAddress(0,aIPv4Address),a_failedAVPLst(0)),
                           omit,
                           omit,
                           omit,
                           {a_SupportedFeatures(a_SupportedFeaturesGrp(0),0)},
                           omit,//{a_FailedAVP(a_FailedAvpGrp(a_failedAVPLst(0)),0)},
                           a_ProxyInfoLst(a_origHost,'012345'O,0), 
                           {a_RouteRecord(a_origHost,0)},
                           a_failedAVPLst(0),
                           no
       ));
    //v_ret := f_BasicReceivePLRAndSendResponse(v_subscriberParameters);

    // DPR / DPA
    pt_diameter.receive;
    f_sleep(0.1);
    pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);
    f_Postamble_S6a_WithoutShutdown();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_MME2_EPC_MT_LR () runs on SLsComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;
    var CMessage v_Msg;

   g_v_verificationFlag := true;

    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLs( mp_sctpIpAddrSlsMME, mp_sctpPortNumberSlsMME, 
                             mp_sctpIpAddrSlsEgsc, mp_sctpPortNumberSlsEgsc);

    f_selfOrClientSyncAndVerdict("init",v_ret);
    f_sleep(0.3);
    pt_lcsap.send(a_Location_Service_Request_Location_Request_InitiatingMessage_PDU(
                     {
                       a_IE_Correlation_ID('12345678'O),
                       a_IE_Location_Type(geographic_Information),
                       a_IE_E_CGI(a_E_CGI(
                                    '123456'O,
                                    '1111000111100011110001111000'B,
                                    omit)),
                       a_IE_LCS_Client_Type(emergency_Services),
                       a_IE_LCS_Priority('12'O),
                       a_IE_LCS_QoS(a_LCS_QoS(
                                      123,
                                      vertical_coordinate_Is_Not_Requested,
                                      100,
                                      low_Delay)),
                       a_IE_UE_Positioning_Capability(a_UE_Positioning_Capability(
                                                        true)),
                       a_IE_UE_Include_Velocity(requested),
                       a_IE_IMSI('1234567891234567'O),
                       a_IE_IMEI('1234567891234567'O),
                       a_IE_MultipleAPDUs(
                         {
                           '1234'O,
                           '12345678'O,
                           '1234'O
                         })
                     },
                     omit)
    );

    pt_lcsap.receive(a_Location_Service_Request_Location_Response_SuccessfulOutcome_PDU(*,*));

    f_Postamble_SLs();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_MME3_EPC_MT_LR () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    var octetstring v_nashex;
    var boolean v_mat_ret4releaseComplete;
    
    f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
   
    v_ret := f_preamble__S1m (v_enb_params);
    
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    

    f_selfOrClientSyncAndVerdict("init",v_ret);

    v_subscriberParameters.s1.mME_UE_S1AP_ID := 1;
    v_subscriberParameters.s1.eNB_UE_S1AP_ID := 2;

    v_mat_ret4releaseComplete := false;
    v_nashex := encodeNASReleaseComplete( valueof (a_ReleaseComplete_Filled));
    log (v_nashex);
    v_mat_ret4releaseComplete := isDecodeNASGenericMessageContainerValue_CanMatch_Messages4SupplementaryServicesControl(v_nashex, omit, omit, a_ReleaseComplete_Filled)

    if( v_mat_ret4releaseComplete == true ) {
      v_subscriberParameters.s1.releaseComplete := v_nashex;
    }

    pt_s1ap.send(a_s1AP_DownlinkNASTransport_PDU_1(v_subscriberParameters,
                                                 a_NAS_PDU(a_NAS_PDU_LCSD(v_subscriberParameters.s1.releaseComplete))));
    pt_s1ap.receive(S1AP_PDU:?);

    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_preamble__S1m ( template EnbParameters p_enb_params ) 
  runs on S1Comp
  return FncRetCode {
    var FncRetCode v_ret;

    v_ret := f_initS1 ( valueof (a_cs(p_enb_params.sctpIpAddr_S1_MME_New)), 
                        valueof (a_i(p_enb_params.sctpPortNumber_MME_New)),
                        valueof (a_cs(p_enb_params.sctpIpAddr_S1_ENB_UE)),
                        valueof (a_i(p_enb_params.sctpPortNumber_ENB_UE)) ); 
    
    activate( d_S1Default() );
    activate( d_S1SctpNotification() );
    
    f_setVerdict (v_ret);
    return v_ret;
    }

 function f_SendPLRAndReceiveResponse (inout template SubscriberParameters p_subscriberParameters) runs on DIAMComp
  return FncRetCode
  {
    var FncRetCode v_ret := e_success;

    f_PLR_s( p_subscriberParameters );

    g_t_s6waitRequest.start( g_v_s6_defaultReceiveTime );
    alt {
    []  pt_diameter.receive(a_PlaMsg(
                           ?,1,1,1,
                           a_SessionId(a_sessionId,?),
                           a_VendorSpecificAppId(?),
                           a_ResultCode(18,?),
                           a_ExperimentalResult(
                             a_ExperimentalResultGrp(
                              a_VendorId(10,?),
                              a_ExperimentalResultCode(10,?)),
                              ?),
                           a_AuthSessionState(STATE_MAINTAINED,?),  
                           a_OriginHost(a_origHost,?),              
                           a_OriginRealm(a_origRealm,?),            
                           a_LocationEstimate(?,a_EllipsoidPoint(e_North, 7, 23)),
                           a_AccuracyFulfilmentIndicator(?,REQUESTED_ACCURACY_FULFILLED),
                           a_AgeOfLocationEstimate(?,23),
                           a_VelocityEstimate(?,a_HorizontalWithVerticalVelocityAndUncertaintyEstimateValue(e_Upward,290, 120, 20, 123, 19)),
                           a_EUTRANPositioningData(?,a_EUTRANPositioningDataValue({a_PositioningData(e_pd_OTDOA, e_pd_Attempted_successfully_results_used_to_generate_location)}, {a_GNSSPositioningData(e_gnsspd_Conventional, e_gnsspd_Modernized_GPS, e_gnsspd_Attempted_successfully_results_used_to_generate_location)},
                           omit
                           )),
                           a_ECGI(?,'1234'O),
                           omit,
                           a_ServingNode(?,a_SgsnNumber('1234'O,?),a_MMEName(?,"ilovepengzhihao4ever"),a_MMERealm(?,"ilovepengzhihao4ever"),a_MSCNumber(?,'1234'O),a_ThreeGPPAAAServerName(?,"ilovepengzhihao4ever"),a_LCSCapabilitiesSets(?,6),a_GmlcAddress(?,aIPv4Address),a_failedAVPLst(?)),
                           omit,
                           omit,
                           omit,
                           {a_SupportedFeatures(a_SupportedFeaturesGrp(?),?)},
                           omit,//{a_FailedAVP(a_FailedAvpGrp(a_failedAVPLst(?)),?)},
                           a_ProxyInfoLst(a_origHost,'012345'O,?), 
                           {a_RouteRecord(a_origHost,?)},
                           a_failedAVPLst(?),
                           no
     ))-> value g_v_lastReceivedS6aPduValue 
    {
      g_t_s6waitRequest.stop;
      g_v_lastReceivedS6PduValueExist:= true;
     
    }
    [] g_t_s6waitRequest.timeout{
      v_ret := e_timeout;
    }
    }
    return v_ret;
  }

  function f_PLR_s(inout template SubscriberParameters p_subscriberParameters) 
  runs on DIAMComp 
  {
    pt_diameter.send( a_PlrMsg(
                        0,1,1,1,
                        a_SessionId(a_sessionId,0),
                        a_VendorSpecificAppId(0),
                        a_AuthSessionState(STATE_MAINTAINED,0),  
                        a_OriginHost(a_origHost,0),              
                        a_OriginRealm(a_origRealm,0),            
                        a_DestinationHost(a_destHost,0),   
                        a_DestinationRealm(a_destRealm,0),
                        a_LocationType(0,CURRENT_LOCATION),
                        a_UserName(a_origHost,0),
                        a_Msisdn('01020304050607'O,0),
                        a_Imei("ilovepengzhihao4ever",0),
                        a_LCSEPSClientName(0,a_LCSNameString("ilovepengzhihao4ever",0),a_LCSFormatIndicator(LOGICAL_NAME,0)),
                        a_LCSClientType(0,EMERGENCY_SERVICES),
                        a_LCSRequestorName(0,a_LCSRequestorIdString("ilovepengzhihao4ever",0),a_LCSFormatIndicator(LOGICAL_NAME,0)),
                        a_LCSPriority(0,1),
                        a_LCSQoS(0,a_LCSQoSClass(0,ASSURED),a_HorizontalAccuracy(0,10),a_VerticalAccuracy(0,11),a_VerticalRequested(0,VERTICAL_COORDINATE_IS_NOT_REQUESTED),a_ResponseTime(0,LOW_DELAY)),             
                        a_VelocityRequested(0,VELOCITY_IS_NOT_REQUESTED),
                        {a_SupportedGADShapes(0,a_SupportedGADShapesValue(a_SupportedGADShapesBitmask3(e_not_supported,e_not_supported,e_not_supported,e_not_supported,         e_not_supported,e_not_supported,e_not_supported,e_not_supported)))},
                        a_LCSServiceTypeID(0,11),
                        a_LCSCodeword(0,"ilovepengzhihao4ever"),
                        a_LCSPrivacyCheckNonSession(0,a_LCSPrivacyCheck(ALLOWED_WITHOUT_NOTIFICATION,0)),
                        a_LCSPrivacyCheckSession(0,a_LCSPrivacyCheck(ALLOWED_WITHOUT_NOTIFICATION,0)),
                        a_ServiceSelection("ilovepengzhihao4ever", 0),
                        {a_SupportedFeatures(a_SupportedFeaturesGrp(0),0)},
                        a_ProxyInfoLst(a_origHost,'012345'O,0), 
                        {a_RouteRecord(a_origHost,0)},
                        a_failedAVPLst(0)));
  }

  function f_ReceiveLocationRequestAndSendResponse(inout template SubscriberParameters p_subscriberParameters) runs on SLsComp
  return FncRetCode
  {
    var FncRetCode v_ret := e_error;

    g_t_slswaitRequest.start(g_v_sls_defaultReceiveTime);
    alt {
    [] pt_lcsap.receive(a_Location_Service_Request_Location_Request_InitiatingMessage_PDU(*,*))-> value g_v_latest_rec_lcsap_pdu
    {
      g_t_slswaitRequest.stop;
      g_v_lastReceivedLcsapPduValueExist:= true;

      f_LocationResponse_s( p_subscriberParameters);
      v_ret := e_success;
    }
    [] g_t_slswaitRequest.timeout{
      v_ret := e_timeout;
    }
    }

    return v_ret;
  
  }

  function f_LocationResponse_s(inout template SubscriberParameters p_subscriberParameters) runs on SLsComp
  {
    pt_lcsap.send(a_Location_Service_Request_Location_Response_SuccessfulOutcome_PDU(
                     {
                       a_IE_Correlation_ID('12345678'O),
                       a_IE_Geographical_Area(
                         a_Geographical_Area_Point(
                            a_Point(
                              a_Geographical_Coordinates(
                                north,
                                12345,
                                -12345,
                                omit),
                                omit))),
                       a_IE_Positioning_Data(
                         a_Positioning_Data(
                           {
                             '12'O,
                             '34'O,
                             '12'O,
                             '34'O,
                             '12'O,
                             '34'O
                           },
                           {
                             '12'O,
                             '34'O,
                             '12'O,
                             '34'O,
                             '12'O,
                             '34'O
                           },
                           omit)),
                       a_IE_Velocity_Estimate(
                         a_Velocity_Estimate_Horizontal_Velocity(
                           a_Horizontal_Velocity(
                             a_Horizontal_Speed_And_Bearing(
                               123,
                               455),
                             omit))),
                       a_IE_Accuracy_Fulfillment_Indicator(
                         requested_accuracy_fulfilled),
                       a_IE_LCS_Cause(
                         a_LCS_Cause_Radio_Network_Layer_Cause(
                           unspecified))
                     },
                     omit));
  }

  function f_s1_LocationNotification_rs ( inout template SubscriberParameters p_sPars)
  runs on S1Comp return FncRetCode {
    var FncRetCode v_ret := e_success;
  
    v_ret := f_s1_NASLocationNotificationInvoke_r (p_sPars);

    if ( v_ret != e_success) { return v_ret;}

    f_s1_NASLocationNotificationReturnResult_s (p_sPars);
    return v_ret;
  }

  function f_s1_NASLocationNotificationInvoke_r (inout template SubscriberParameters p_sPars)
  runs on S1Comp return FncRetCode {
    return
        f_receive (
          a_s1AP_DownlinkNASTransport_PDU(p_sPars,
                                          a_NAS_PDU(a_NAS_PDU_LCSD(p_sPars.s1.releaseComplete))));
  }

  function f_s1_NASLocationNotificationReturnResult_s (inout template SubscriberParameters p_sPars)
  runs on S1Comp {
    pt_s1ap.send(a_s1AP_UplinkNASTransport_PDU(p_sPars,
                                               a_NAS_PDU(a_NAS_PDU_LCSU(p_sPars.s1.register))))
  }

  template NASMessage a_NAS_PDU_LCSD(template octetstring p_lcsLocationInformation):= 
  {
    plainMMMessage := {
      securityHeaderType := e_plain_nas_message_not_security_protected, 
      protocolDiscr := e_eps_mobility_management_messages, 
      mmMessage := {
        downlinkGenericNASTransport := { 
          genericMessageContainerType := 1,
          genericMessageContainer := { genericMessageContainerValue := p_lcsLocationInformation }, 
          additionalInformation := omit //{   additionalInformationValue := '66223344'O } 
        }
      }
    }
  }

  template NASMessage a_NAS_PDU_LCSU(template octetstring p_lcsLocationInformation):= 
  {
    plainMMMessage := {
      securityHeaderType := e_plain_nas_message_not_security_protected, 
      protocolDiscr := e_eps_mobility_management_messages, 
      mmMessage := {
        uplinkGenericNASTransport := { 
          genericMessageContainerType := 1,
          genericMessageContainer := { genericMessageContainerValue := p_lcsLocationInformation }, 
          additionalInformation := omit   //{   additionalInformationValue := '66223344'O } 
        }
      }
    }
  }

  template ReleaseComplete a_ReleaseComplete_Filled := a_ReleaseComplete(a_ProtocolDiscriminator(e_non_call_related_ss_messages),
                                                                         a_TransactionIdentifierL3(a_Flag(e_from_originator), a_TIO(1)),
                                                                         a_CauseCC (a_CauseCCOct3grp (
                                                                                      a_CauseCCOctet3 (
                                                                                        a_CodingStandard (e_national_standard),
                                                                                        a_Spare1 ('0'B),
                                                                                        a_CauseLocation (0)),
                                                                                      a_CauseCCOctet3a(0)),
                                                                                    a_CauseCCOct4grp (a_CauseCCOctet4 (a_CauseValue (e_normal_unspecified_0))),
                                                                                    a_CauseDiagnostics ('00'O)),
                                                                         a_FacilityIE({a_Component_Invoke(a_Invoke(0,omit,a_LCSOPERATION_local(116),
                                                                                                            {MapLocationNotificationArg := a_MapLocationNotificationArg(
                                                                                                               a_MapNotificationToMSUser_notifyLocationAllowed,
                                                                                                               a_MapLocationType (
                                                                                                                 a_MapLocationEstimateType_currentLocation,
                                                                                                                 '111'B
                                                                                                               ),
                                                                                                               a_MapLCSClientExternalID ('0000'O),
                                                                                                               a_MapLCSClientName(
                                                                                                                 '01'O,
                                                                                                                 '01'O
                                                                                                               ),
                                                                                                               a_MapLCSRequestorID(
                                                                                                                 '01'O,
                                                                                                                 '01'O,
                                                                                                                 a_MapLCSFormatIndicator (logicalName)
                                                                                                               ),
                                                                                                               a_MapLCSCodeword (
                                                                                                                 '01'O,
                                                                                                                 '01'O
                                                                                                               ),
                                                                                                               0 )}))}));

  template Register a_Register_Filled := a_Register(a_ProtocolDiscriminator(e_non_call_related_ss_messages),
                                                    a_TransactionIdentifierL3(a_Flag(e_from_originator), a_TIO(1)),
                                                    a_FacilityIE({a_Component_ReturnResult(a_ReturnResult(0,a_LCSOPERATION_local(116),
                                                                                           {MapLocationNotificationRes := a_MapLocationNotificationRes(
                                                                                                               a_MapVerificationResponse(permissionDenied) )})),
                                                                  a_Component_ReturnResult(a_ReturnResult(0,a_LCSOPERATION_local(115),
                                                                                           {MapLCSMOLRRes := a_MapLCSMOLRRes(
                                                                                                               '01'O,
                                                                                                               '010203040506070809101112131415'O,
                                                                                                               '01'O,
                                                                                                               '01020304'O,
                                                                                                               '01'O,
                                                                                                               '0102030405060708091011121314151617'O,
                                                                                                               c_mapNULL,
                                                                                                               a_MapReportingPLMNList(
                                                                                                                 c_mapNULL,
                                                                                                                 {
                                                                                                                  a_MapReportingPLMN (
                                                                                                                    '010203'O,
                                                                                                                    a_MapRANTechnology (gsm),
                                                                                                                    c_mapNULL
                                                                                                                    ),
                                                                                                                  a_MapReportingPLMN (
                                                                                                                    '040506'O,
                                                                                                                    a_MapRANTechnology (umts),
                                                                                                                    c_mapNULL
                                                                                                                    )
                                                                                                                 }
                                                                                                               ) )}))}),
                                                    a_SSVersionIndicator (a_VersionIndicator('01'O)) );

  template Facility a_Facility_Filled := a_Facility(a_ProtocolDiscriminator(e_non_call_related_ss_messages),
                                                      a_TransactionIdentifierL3(a_Flag(e_from_originator), a_TIO(1)),
                                                      a_FacilityIE({a_Component_Invoke(a_Invoke(0,omit,a_LCSOPERATION_local(115),
                                                                                         {MapLCSMOLRArg := a_MapLCSMOLRArg(
                                                                                                             a_MapMOLRType (assistanceData),
                                                                                                             a_MapLocationMethod (msBasedEOTD),
                                                                                                             a_MapLCSQoS (
                                                                                                               '00'O,
                                                                                                               c_mapNULL,
                                                                                                               '01'O,
                                                                                                               a_MapResponseTime (a_MapResponseTimeCategory_lowdelay)
                                                                                                             ),
                                                                                                             a_MapLCSClientExternalID ('0000'O),
                                                                                                             a_MapISDNAddressString ('0000'O),
                                                                                                             '0000'O,
                                                                                                             '111'B,
                                                                                                             3,
                                                                                                             3,
                                                                                                             a_MapLocationType (
                                                                                                               a_MapLocationEstimateType_currentLocation,
                                                                                                               '111'B
                                                                                                             ),
                                                                                                             c_mapNULL,
                                                                                                             '0102030405'O,
                                                                                                             '01'O,
                                                                                                             '01020304'O,
                                                                                                             '01'O,
                                                                                                             a_MapPeriodicLDRInfo (
                                                                                                               1,
                                                                                                               1
                                                                                                             ),
                                                                                                             c_mapNULL,
                                                                                                             1,
                                                                                                             a_MapTerminationCause(normal),
                                                                                                             c_mapNULL,
                                                                                                             '01'O,
                                                                                                             {'01'O, '01'O, '01'O} )}))}));


  testcase EPC_MO_LR () runs on MTC system TSI {
    
    var DIAMComp gMLC  := DIAMComp.create("GMLC");
    var SLsComp  eSMLC := SLsComp.create("ESMLC");
    var S1Comp   eNB   := S1Comp.create("ENB");

    var DIAMComp mME1  := DIAMComp.create("MME1");
    var SLsComp  mME2  := SLsComp.create("MME2");
    var S1Comp   mME3  := S1Comp.create("MME3");

    gMLC.start( f_GMLC_EPC_MO_LR() );
    eSMLC.start( f_SMLC_EPC_MO_LR() );
    eNB.start( f_ENB_EPC_MO_LR() );

    mME1.start( f_MME1_EPC_MO_LR() );
    mME2.start( f_MME2_EPC_MO_LR() );
    mME3.start(f_MME3_EPC_MO_LR() );
    
    f_serverSyncClientsAndStop(6,{"init",c_poSyncPoint});
  }

  function f_GMLC_EPC_MO_LR () runs on DIAMComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;

    f_S6a_Initparameters();
    f_Slg_Initparameters();

    f_SubscriberParameters(v_subscriberParameters);
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress := {
    a_ServedPartyIpAddress({ipv4 := "127.0.0.3"}, 0),
    a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000003'O}, 0) };
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters := e_operatorSpecific150;
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0));
    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLg( v_subscriberParameters, 
                             mp_sctpIpAddrSlgGmlc, mp_sctpPortNumberSlgGmlc, 
                             mp_sctpIpAddrSlgMME,  mp_sctpPortNumberSlgMME );
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_BasicReceiveLRRAndSendResponse(v_subscriberParameters);

    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_SMLC_EPC_MO_LR () runs on SLsComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;

    f_Sls_Initparameters();


    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLs( mp_sctpIpAddrSlsEgsc, mp_sctpPortNumberSlsEgsc, 
                             mp_sctpIpAddrSlsMME,  mp_sctpPortNumberSlsMME );
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_ReceiveLocationRequestAndSendResponse(v_subscriberParameters)

    f_Postamble_SLs();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_ENB_EPC_MO_LR () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var template CMessage v_bearerIdMsg;
    var integer v_setupIndex := 1; 
    var octetstring v_guti;
    var boolean v_mat_ret4facility;
    var octetstring v_nashex;

    f_connect4SelfOrClientSync();
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_d_s1CommonDefault := activate(d_S1ComDef());

   //SCTP Connection
    v_ret := f_initS1 (mp_sctpIpAddr_S1_ENB_UE,
                       mp_sctpPortNumber_ENB_UE, 
                       mp_sctpIpAddr_S1_MME_New, 
                       mp_sctpPortNumber_MME_New);
  

    f_S1_Initparameters();
    f_S10_Initparameters();
    f_enbParameters(v_enb_params);

    //log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);
    g_v_extSyncTimeGuard := 20.0;
    //log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);

    v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
    a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    v_ret := f_S1setupProcedure( v_enb_params);

    for (v_setupIndex :=2;v_setupIndex<5;v_setupIndex:=v_setupIndex+1){
      v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
      a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    }
    
    f_SubscriberParameters(v_subscriberParameters);

    log(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("init",v_ret);  
    v_subscriberParameters.s1.mobileIdentity := encodeEPSMobileIdentityIMSI(oct2hex(valueof(a_octetstring(v_subscriberParameters.s10_core7.imsi))));

    v_subscriberParameters.s1.tAC := a_TAC(1);
    v_subscriberParameters.s1.epsBearerIdentity := 0 ;

    v_subscriberParameters.s1.mME_UE_S1AP_ID := 1;
    v_subscriberParameters.s1.eNB_UE_S1AP_ID := 2;

    v_mat_ret4facility := false;
    v_nashex := encodeNASFacility( valueof (a_Facility_Filled) );
    log (v_nashex);
    v_mat_ret4facility := isDecodeNASGenericMessageContainerValue_CanMatch_Messages4SupplementaryServicesControl(v_nashex, a_Facility_Filled, omit, omit);
    if (v_mat_ret4facility == true) {
      v_subscriberParameters.s1.facility := v_nashex;
    }

    v_subscriberParameters.s1.register := ?;
    f_s1_MOLR_sr(v_subscriberParameters);

    f_sleep (2.0);
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();

  }

  function f_MME1_EPC_MO_LR () runs on DIAMComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;
    var CMessage v_Msg;

    f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
    v_ret := f_preamble_SLgWithoutCerCea(  mp_sctpIpAddrSlgMME, mp_sctpPortNumberSlgMME, 
                                           mp_sctpIpAddrSlgGmlc, mp_sctpPortNumberSlgGmlc);
    f_sleep(12.0);
    pt_diameter.send(RawDiameterMsg:'01010000688000010100000000c8a03c2d000029300000010b0000000c00005678000001014000000e00010a66b66d0000000001084000000b4d4d4500000001284000000d5245414c4d0000000000010d0000000d464c4558490000000000010a4000000c00000031'O)
    // rc Message received successfully
    // vv     cer {

    pt_diameter.receive;
    // sc pt_diameter.send(DiameterS6Msg:DiameterS6Msg.DiameterS6Msg) to a test component   @+5.65044
    // vv     cea {
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_BasicSendLRRAndReceiveResponse(v_subscriberParameters);

    // DPR / DPA
    pt_diameter.receive;
    f_sleep(0.1);
    pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);
    f_Postamble_S6a_WithoutShutdown();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_MME2_EPC_MO_LR () runs on SLsComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;
    var CMessage v_Msg;

   g_v_verificationFlag := true;

    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLs( mp_sctpIpAddrSlsMME, mp_sctpPortNumberSlsMME, 
                             mp_sctpIpAddrSlsEgsc, mp_sctpPortNumberSlsEgsc);

    f_selfOrClientSyncAndVerdict("init",v_ret);

    pt_lcsap.send(a_Location_Service_Request_Location_Request_InitiatingMessage_PDU(
                     {
                       a_IE_Correlation_ID('12345678'O),
                       a_IE_Location_Type(geographic_Information),
                       a_IE_E_CGI(a_E_CGI(
                                    '123456'O,
                                    '1111000111100011110001111000'B,
                                    omit)),
                       a_IE_LCS_Client_Type(emergency_Services),
                       a_IE_LCS_Priority('12'O),
                       a_IE_LCS_QoS(a_LCS_QoS(
                                      123,
                                      vertical_coordinate_Is_Not_Requested,
                                      100,
                                      low_Delay)),
                       a_IE_UE_Positioning_Capability(a_UE_Positioning_Capability(
                                                        true)),
                       a_IE_UE_Include_Velocity(requested),
                       a_IE_IMSI('1234567891234567'O),
                       a_IE_IMEI('1234567891234567'O),
                       a_IE_MultipleAPDUs(
                         {
                           '1234'O,
                           '12345678'O,
                           '1234'O
                         })
                     },
                     omit)
    );

    pt_lcsap.receive(a_Location_Service_Request_Location_Response_SuccessfulOutcome_PDU(*,*));

    f_Postamble_SLs();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_MME3_EPC_MO_LR () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    var octetstring v_nashex;
    var boolean v_mat_ret4register; 
    
    f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
   
    v_ret := f_preamble__S1m (v_enb_params);
    
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    

    f_selfOrClientSyncAndVerdict("init",v_ret);

    v_subscriberParameters.s1.mME_UE_S1AP_ID := 1;
    v_subscriberParameters.s1.eNB_UE_S1AP_ID := 2;
    v_subscriberParameters.s1.facility := ?;

    pt_s1ap.receive(S1AP_PDU:?);

    v_nashex := encodeNASRegister( valueof (a_Register_Filled) );
    log (v_nashex);
    v_mat_ret4register := isDecodeNASGenericMessageContainerValue_CanMatch_Messages4SupplementaryServicesControl(v_nashex, omit, a_Register_Filled, omit);
    if ( v_mat_ret4register == true ) {
      v_subscriberParameters.s1.register := v_nashex;
    }

    pt_s1ap.send(a_s1AP_DownlinkNASTransport_PDU_1(v_subscriberParameters,
                                                   a_NAS_PDU(a_NAS_PDU_LCSD('12'O))));

    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }


  function f_s1_MOLR_sr ( inout template SubscriberParameters p_sPars)
  runs on S1Comp return FncRetCode {
    var FncRetCode v_ret := e_success;

    f_s1_MOLR_s (p_sPars);

    if ( v_ret != e_success) { return v_ret;}
    v_ret := f_s1_MOLR_r (p_sPars);
    
    return v_ret;
  }

  function f_s1_MOLR_s (inout template SubscriberParameters p_sPars)
  runs on S1Comp {
    pt_s1ap.send(a_s1AP_UplinkNASTransport_PDU(p_sPars,
                                               a_NAS_PDU(a_NAS_PDU_LCSU(p_sPars.s1.facility))))
  }

  function f_s1_MOLR_r (inout template SubscriberParameters p_sPars)
  runs on S1Comp return FncRetCode {
    return
        f_receive (
          a_s1AP_DownlinkNASTransport_PDU(p_sPars,
                                          a_NAS_PDU(a_NAS_PDU_LCSD(p_sPars.s1.register))));
  }

  testcase EPC_NI_LR () runs on MTC system TSI {
    
    var DIAMComp gMLC  := DIAMComp.create("GMLC");
    var SLsComp  eSMLC := SLsComp.create("ESMLC");

    var DIAMComp mME1  := DIAMComp.create("MME1");
    var SLsComp  mME2  := SLsComp.create("MME2");

    gMLC.start( f_GMLC_EPC_NI_LR() );
    eSMLC.start( f_SMLC_EPC_NI_LR() );

    mME1.start( f_MME1_EPC_NI_LR() );
    mME2.start( f_MME2_EPC_NI_LR() );
    
    f_serverSyncClientsAndStop(4,{"init",c_poSyncPoint});
  }

  function f_GMLC_EPC_NI_LR () runs on DIAMComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;

    f_S6a_Initparameters();
    f_Slg_Initparameters();
    f_SubscriberParameters(v_subscriberParameters);
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress := {
    a_ServedPartyIpAddress({ipv4 := "127.0.0.3"}, 0),
    a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000003'O}, 0) };
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters := e_operatorSpecific150;
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0));
    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLg( v_subscriberParameters, 
                             mp_sctpIpAddrSlgGmlc, mp_sctpPortNumberSlgGmlc, 
                             mp_sctpIpAddrSlgMME,  mp_sctpPortNumberSlgMME );
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_BasicReceiveLRRAndSendResponse(v_subscriberParameters);

    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_SMLC_EPC_NI_LR () runs on SLsComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;

    f_Sls_Initparameters();
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLs( mp_sctpIpAddrSlsEgsc, mp_sctpPortNumberSlsEgsc, 
                             mp_sctpIpAddrSlsMME,  mp_sctpPortNumberSlsMME );
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_ReceiveLocationRequestAndSendResponse(v_subscriberParameters)

    f_Postamble_SLs();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_MME1_EPC_NI_LR () runs on DIAMComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;
    var CMessage v_Msg;

    f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
    v_ret := f_preamble_SLgWithoutCerCea(  mp_sctpIpAddrSlgMME, mp_sctpPortNumberSlgMME, 
                                           mp_sctpIpAddrSlgGmlc, mp_sctpPortNumberSlgGmlc);
    f_sleep(12.0);
    pt_diameter.send(RawDiameterMsg:'01010000688000010100000000c8a03c2d000029300000010b0000000c00005678000001014000000e00010a66b66d0000000001084000000b4d4d4500000001284000000d5245414c4d0000000000010d0000000d464c4558490000000000010a4000000c00000031'O)
    // rc Message received successfully
    // vv     cer {

    pt_diameter.receive;
    // sc pt_diameter.send(DiameterS6Msg:DiameterS6Msg.DiameterS6Msg) to a test component   @+5.65044
    // vv     cea {
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_BasicSendLRRAndReceiveResponse(v_subscriberParameters);

    // DPR / DPA
    pt_diameter.receive;
    f_sleep(0.1);
    pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);
    f_Postamble_S6a_WithoutShutdown();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_MME2_EPC_NI_LR () runs on SLsComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;
    var CMessage v_Msg;

   g_v_verificationFlag := true;

    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLs( mp_sctpIpAddrSlsMME, mp_sctpPortNumberSlsMME, 
                             mp_sctpIpAddrSlsEgsc, mp_sctpPortNumberSlsEgsc);

    f_selfOrClientSyncAndVerdict("init",v_ret);

    pt_lcsap.send(a_Location_Service_Request_Location_Request_InitiatingMessage_PDU(
                     {
                       a_IE_Correlation_ID('12345678'O),
                       a_IE_Location_Type(geographic_Information),
                       a_IE_E_CGI(a_E_CGI(
                                    '123456'O,
                                    '1111000111100011110001111000'B,
                                    omit)),
                       a_IE_LCS_Client_Type(emergency_Services),
                       a_IE_LCS_Priority('12'O),
                       a_IE_LCS_QoS(a_LCS_QoS(
                                      123,
                                      vertical_coordinate_Is_Not_Requested,
                                      100,
                                      low_Delay)),
                       a_IE_UE_Positioning_Capability(a_UE_Positioning_Capability(
                                                        true)),
                       a_IE_UE_Include_Velocity(requested),
                       a_IE_IMSI('1234567891234567'O),
                       a_IE_IMEI('1234567891234567'O),
                       a_IE_MultipleAPDUs(
                         {
                           '1234'O,
                           '12345678'O,
                           '1234'O
                         })
                     },
                     omit)
    );

    pt_lcsap.receive(a_Location_Service_Request_Location_Response_SuccessfulOutcome_PDU(*,*));

    f_Postamble_SLs();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  testcase EPC_PositioningNotificationAndVerification () runs on MTC system TSI {
    
    var DIAMComp gMLC  := DIAMComp.create("GMLC");
    var S1Comp  eNB := S1Comp.create("ENB");

    var DIAMComp mME1  := DIAMComp.create("MME1");
    var S1Comp   mME2  := S1Comp.create("MME2");

    gMLC.start( f_GMLC_EPC_PositioningNotificationAndVerification() );
    eNB.start( f_ENB_EPC_PositioningNotificationAndVerification() );

    mME1.start( f_MME1_EPC_PositioningNotificationAndVerification() );
    mME2.start( f_MME2_EPC_PositioningNotificationAndVerification() );
    
    f_serverSyncClientsAndStop(4,{"init",c_poSyncPoint});
  }

  function f_GMLC_EPC_PositioningNotificationAndVerification () runs on DIAMComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;

    f_S6a_Initparameters()
    f_Slg_Initparameters();

    f_SubscriberParameters(v_subscriberParameters);
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress := {
    a_ServedPartyIpAddress({ipv4 := "127.0.0.3"}, 0),
    a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000003'O}, 0) };
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters := e_operatorSpecific150;
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0));
    f_connect4SelfOrClientSync();
    v_ret := f_preamble_SLg( v_subscriberParameters, 
                             mp_sctpIpAddrSlgGmlc, mp_sctpPortNumberSlgGmlc, 
                             mp_sctpIpAddrSlgMME,  mp_sctpPortNumberSlgMME );
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_BasicSendPLRAndReceiveResponse(v_subscriberParameters);

    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_ENB_EPC_PositioningNotificationAndVerification () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var template CMessage v_bearerIdMsg;
    var integer v_setupIndex := 1; 
    var octetstring v_guti;
    var octetstring v_nashex;
    var boolean v_mat_ret4register;

    f_connect4SelfOrClientSync();
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_d_s1CommonDefault := activate(d_S1ComDef());

   //SCTP Connection
    v_ret := f_initS1 (mp_sctpIpAddr_S1_ENB_UE,
                       mp_sctpPortNumber_ENB_UE, 
                       mp_sctpIpAddr_S1_MME_New, 
                       mp_sctpPortNumber_MME_New);
  

    f_S1_Initparameters();
    f_S10_Initparameters();
    f_enbParameters(v_enb_params);

    //log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);
    g_v_extSyncTimeGuard := 20.0;
    //log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);

    v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
    a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    v_ret := f_S1setupProcedure( v_enb_params);

    for (v_setupIndex :=2;v_setupIndex<5;v_setupIndex:=v_setupIndex+1){
      v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
      a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    }

    f_SubscriberParameters(v_subscriberParameters);

    log(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("init",v_ret);  
    v_subscriberParameters.s1.mobileIdentity := encodeEPSMobileIdentityIMSI(oct2hex(valueof(a_octetstring(v_subscriberParameters.s10_core7.imsi))));

    v_subscriberParameters.s1.tAC := a_TAC(1);
    v_subscriberParameters.s1.epsBearerIdentity := 0 ;

    v_subscriberParameters.s1.mME_UE_S1AP_ID := 1;
    v_subscriberParameters.s1.eNB_UE_S1AP_ID := 2;

    v_mat_ret4register := false;
    v_nashex := encodeNASRegister( valueof (a_Register_Filled) );
    log (v_nashex);
    v_mat_ret4register := isDecodeNASGenericMessageContainerValue_CanMatch_Messages4SupplementaryServicesControl(v_nashex, omit, a_Register_Filled, omit);
 
    if( v_mat_ret4register == true ) {
      v_subscriberParameters.s1.register := v_nashex;
    }

    v_subscriberParameters.s1.releaseComplete := ?;
    f_s1_LocationNotification_rs(v_subscriberParameters);

    f_sleep (2.0);
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();

  }

  function f_MME1_EPC_PositioningNotificationAndVerification () runs on DIAMComp {
    var FncRetCode v_ret;
    var template SubscriberParameters v_subscriberParameters;
    var CMessage v_Msg;

    f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
    v_ret := f_preamble_SLgWithoutCerCea(  mp_sctpIpAddrSlgMME, mp_sctpPortNumberSlgMME, 
                                           mp_sctpIpAddrSlgGmlc, mp_sctpPortNumberSlgGmlc);
    f_sleep(12.0);
    pt_diameter.send(RawDiameterMsg:'01010000688000010100000000c8a03c2d000029300000010b0000000c00005678000001014000000e00010a66b66d0000000001084000000b4d4d4500000001284000000d5245414c4d0000000000010d0000000d464c4558490000000000010a4000000c00000031'O)
    // rc Message received successfully
    // vv     cer {

    pt_diameter.receive;
    // sc pt_diameter.send(DiameterS6Msg:DiameterS6Msg.DiameterS6Msg) to a test component   @+5.65044
    // vv     cea {
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_BasicReceivePLRAndSendResponse(v_subscriberParameters);

    // DPR / DPA
    pt_diameter.receive;
    f_sleep(0.1);
    pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);
    f_Postamble_S6a_WithoutShutdown();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  function f_MME2_EPC_PositioningNotificationAndVerification () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    var octetstring v_nashex;
    var boolean v_mat_ret4releaseComplete;
    
    f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
   
    v_ret := f_preamble__S1m (v_enb_params);
    
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    

    f_selfOrClientSyncAndVerdict("init",v_ret);

    v_subscriberParameters.s1.mME_UE_S1AP_ID := 1;
    v_subscriberParameters.s1.eNB_UE_S1AP_ID := 2;

    v_mat_ret4releaseComplete := false;
    v_nashex := encodeNASReleaseComplete( valueof (a_ReleaseComplete_Filled));
    log (v_nashex);
    v_mat_ret4releaseComplete := isDecodeNASGenericMessageContainerValue_CanMatch_Messages4SupplementaryServicesControl(v_nashex, omit, omit, a_ReleaseComplete_Filled)

    if( v_mat_ret4releaseComplete == true ) {
      v_subscriberParameters.s1.releaseComplete := v_nashex;
    }

    pt_s1ap.send(a_s1AP_DownlinkNASTransport_PDU_1(v_subscriberParameters,
                                                 a_NAS_PDU(a_NAS_PDU_LCSD(v_subscriberParameters.s1.releaseComplete))));
    pt_s1ap.receive(S1AP_PDU:?);

    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

            testcase S102_mirror_testcase() runs on MTC system TSI {
                var S102Comp s102_1 := S102Comp.create("S102_1"); 
                var S102Comp s102_2 := S102Comp.create("S102_2"); 
                var SyncPointList v_SyncPointList := {"init","send_receive",c_poSyncPoint};

                s102_1.start(f_s102_mirror_1());
                s102_2.start(f_s102_mirror_2());

                f_serverSyncClientsAndStop(2,v_SyncPointList);
            }
            function f_s102_mirror_1() runs on S102Comp {
                var FncRetCode v_ret := e_success;
                var template SubscriberParameters v_subscriberParameters;
                f_SubscriberParameters(v_subscriberParameters);
                log(v_subscriberParameters.s102);
                f_connect4SelfOrClientSync();
                //g_v_syncDefault := activate(d_S11SyncDefault());
                if (f_preamble_S102 ( mp_udpIpAddr_S11_SGW, mp_udpPortNumber_S11_SGW, 
                            mp_udpIpAddr_S11_MME_New, mp_udpPortNumber_S11_MME_New ) != e_success){
                    setverdict(fail);
                } else {
                    setverdict(pass);
                }
                
                f_selfOrClientSyncAndVerdict("init",v_ret);  
                pt_s102.send(a_A21Ack(a_CorrelationID(99),
                                      a_MobileIdentity(0,encodeMobileIdentityIMSI('50123456789'H)),
                                      a_A21Cause(0,a_CauseContent(e_unknown_cell_identifier))
                                       ));
                f_selfOrClientSyncAndVerdict("send_receive",v_ret);  
                f_postamble_S102 ();
                f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
                f_disconnect4SelfOrClientSync();
            }
            function f_s102_mirror_2() runs on S102Comp {
                var FncRetCode v_ret := e_success;
                f_connect4SelfOrClientSync();
                //g_v_syncDefault := activate(d_S11SyncDefault());
                if (f_preamble_S102 ( mp_udpIpAddr_S11_MME_New,
                            mp_udpPortNumber_S11_MME_New,
                            mp_udpIpAddr_S11_SGW,
                            mp_udpPortNumber_S11_SGW) != e_success){
                    setverdict(fail);
                }else {
                    setverdict(pass);
                }
                f_selfOrClientSyncAndVerdict("init",v_ret);
                pt_s102.receive(A21Message:*);
                f_selfOrClientSyncAndVerdict("send_receive",v_ret);  
                f_postamble_S102 ();
                f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
                f_disconnect4SelfOrClientSync();
            }

 testcase NS_9_0_0001_TesterVerificationNonStdSctp_dish() runs on MTC system TSI {
    var S1Comp  eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");

    var S1Comp  eNBm := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    var SyncPointList v_SyncPointList := {"init","attach", "ZMMO", "detach", "detach2", "detach3", c_poSyncPoint};

    connect (eNB:pt_CM,sGW:pt_CM);

    eNBm.start( f_eNB_NS_9_0_0001_mirrorNonStdSctp_dish ()  );
    sGWm.start( f_sGW_NS_9_0_0001_mirror () );
    hSSm.start( f_hSS_NS_9_0_0001_mirrorNonStdSctp () );
    eNB.start( f_eNB_NS_9_0_0001 () );
    sGW.start( f_sGW_NS_9_0_0001 () );
    hSS.start( f_hSS_General1 (v_SyncPointList) );

    f_serverSyncClientsAndStop(6,v_SyncPointList);

  }

 function f_eNB_NS_9_0_0001_mirrorNonStdSctp_dish () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_v_sctpDefault := activate(d_S1SctpDefault()); 
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
    //v_enb_params.sctpIpAddr_S1_ENB_UE :=  mp_sctpIpAddr_S1_ENB_UE;
    //v_enb_params.sctpPortNumber_ENB_UE :=  7002;//2984;
    //v_enb_params.sctpIpAddr_S1_MME_New :=  mp_sctpIpAddr_S1_MME_New;
    //v_enb_params.sctpPortNumber_MME_New :=  7001; //2985;
    
    g_v_disable_heartbeat := true;
//    g_v_disable_all_ack := true;
  //  g_v_enable_message_ind := true;
    g_v_enable_heartbeat_ind := true; 
    //g_v_delay_all_ack := true;    
//     g_v_delay_shutdown_ack_timeLen := 0;
 //   g_v_delay_sack_timeLen := 0;
  //  g_v_delay_heartbeat_ack_timeLen := 7;
    //3_v_delay_ack_timeLen := 4 
    //v_ret := f_preamble_S1_4NonstandardSctpStack (v_enb_params);
    //pt_sctpNotification.send("enable_heartbeat");
    v_ret := f_preamble__S1m (v_enb_params);
    
//    pt_sctpNotification.send("disable_heartbeat_ind");
  //  pt_sctpNotification.send("enable_all_ack");
    pt_sctpNotification.send("enable_heartbeat");
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    
    f_sleep(30.0);
    f_selfOrClientSyncAndVerdict("init",v_ret);
    //pt_sctpNotification.send("disable_message_ind");
          
    pt_sctpNotification.send("delay_heartbeat_ack");
    pt_sctpNotification.send("5");
    //101108 TEMP Code
    
    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200030008000200d8001a002524075200db6ee69d1cf30534afbf50093a53b6d81011222204146205000122100010423600'O)

    //AuthResp
    pt_s1ap.receive;
    // InitialContextSetupReq     E_RABToBeSetupListCtxtSUReq   0a66b630 -> 0a660a0b
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf6 85f81722223303000003 006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)

    pt_s1ap.send(RawGtpV2Msg:'000900809d0000070000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000006a400100'O) //SubscriberProfileIDforRFP 006a000101 added

    //RAB      E_RABSetupItemCtxtSURes
    pt_s1ap.receive;
    //AttachComplete
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    //pt_s1ap.receive;
    //f_sleep (0.1);
    //pt_s1ap.send(RawGtpV2Msg:'0009006f0000060000000200030008000200d8004200060803e82007d000180025010034000e050009070f800a66b635000030390034000e060009120f800a66b63500003039006b00050800040000004900206ebbe73f49ca89939178e9c5ccb999c499dc4e346f0433878b4de5062ed26adc'O);
    //pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    // ZMMO
    
    //pt_s1ap.send(RawGtpV2Msg: ''O);
    // pt_s1ap.receive(S1AP_PDU:?);
    
    //DetachReq
    pt_s1ap.receive;
    
    //pt_s1ap.receive;
    //DetachResp
    f_sleep (1.0);
    pt_s1ap.send(RawGtpV2Msg:'000b40160000030000000200030008000200d8001a0003020746'O)
    
    f_sleep (1.0);
    //Release
    pt_s1ap.send(RawGtpV2Msg:'0017001100000200630004000300d8000240020000'O);
    
    //Release complete
    pt_s1ap.receive;
    
    //This affects error in synchronization  S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    f_selfOrClientSyncAndVerdict("detach",v_ret);
    f_selfOrClientSyncAndVerdict("detach2",v_ret);
    f_selfOrClientSyncAndVerdict("detach3",v_ret);
    
    //S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    //f_sleep (4.0);
    //f_sleep (20.0);
    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }
  testcase NS_9_0_0001_TesterVerificationNonStdSctp_enhbind() runs on MTC system TSI {
    var S1Comp  eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");

    var S1Comp  eNBm := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    var SyncPointList v_SyncPointList := {"init","attach", "ZMMO", "detach", "detach2", "detach3", c_poSyncPoint};

    connect (eNB:pt_CM,sGW:pt_CM);

    eNBm.start( f_eNB_NS_9_0_0001_mirrorNonStdSctp_enhbind ()  );
    sGWm.start( f_sGW_NS_9_0_0001_mirror () );
    hSSm.start( f_hSS_NS_9_0_0001_mirrorNonStdSctp () );
    eNB.start( f_eNB_NS_9_0_0001 () );
    sGW.start( f_sGW_NS_9_0_0001 () );
    hSS.start( f_hSS_General1 (v_SyncPointList) );

    f_serverSyncClientsAndStop(6,v_SyncPointList);

  }

 function f_eNB_NS_9_0_0001_mirrorNonStdSctp_enhbind () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_v_sctpDefault := activate(d_S1SctpDefault()); 
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
    //v_enb_params.sctpIpAddr_S1_ENB_UE :=  mp_sctpIpAddr_S1_ENB_UE;
    //v_enb_params.sctpPortNumber_ENB_UE :=  7002;//2984;
    //v_enb_params.sctpIpAddr_S1_MME_New :=  mp_sctpIpAddr_S1_MME_New;
    //v_enb_params.sctpPortNumber_MME_New :=  7001; //2985;
    
    g_v_enable_heartbeat_ind := true; 
   //v_ret := f_preamble_S1_4NonstandardSctpStack (v_enb_params);
    v_ret := f_preamble__S1m (v_enb_params);
    
    pt_sctpNotification.send("disable_heartbeat_ind");
    pt_sctpNotification.send("enable_all_ack");
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    
    f_sleep(30.0);
    f_selfOrClientSyncAndVerdict("init",v_ret);
    pt_sctpNotification.send("disable_message_ind");
          
    pt_sctpNotification.send("delay_heartbeat_ack");
    pt_sctpNotification.send("5");
    //101108 TEMP Code
    
    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200030008000200d8001a002524075200db6ee69d1cf30534afbf50093a53b6d81011222204146205000122100010423600'O)

    //AuthResp
    pt_s1ap.receive;
    // InitialContextSetupReq     E_RABToBeSetupListCtxtSUReq   0a66b630 -> 0a660a0b
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf6 85f81722223303000003 006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)

    pt_s1ap.send(RawGtpV2Msg:'000900809d0000070000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000006a400100'O) //SubscriberProfileIDforRFP 006a000101 added

    //RAB      E_RABSetupItemCtxtSURes
    pt_s1ap.receive;
    //AttachComplete
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    //pt_s1ap.receive;
    //f_sleep (0.1);
    //pt_s1ap.send(RawGtpV2Msg:'0009006f0000060000000200030008000200d8004200060803e82007d000180025010034000e050009070f800a66b635000030390034000e060009120f800a66b63500003039006b00050800040000004900206ebbe73f49ca89939178e9c5ccb999c499dc4e346f0433878b4de5062ed26adc'O);
    //pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    // ZMMO
    
    //pt_s1ap.send(RawGtpV2Msg: ''O);
    // pt_s1ap.receive(S1AP_PDU:?);
    
    //DetachReq
    pt_s1ap.receive;
    
    //pt_s1ap.receive;
    //DetachResp
    f_sleep (1.0);
    pt_s1ap.send(RawGtpV2Msg:'000b40160000030000000200030008000200d8001a0003020746'O)
    
    f_sleep (1.0);
    //Release
    pt_s1ap.send(RawGtpV2Msg:'0017001100000200630004000300d8000240020000'O);
    
    //Release complete
    pt_s1ap.receive;
    
    //This affects error in synchronization  S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    f_selfOrClientSyncAndVerdict("detach",v_ret);
    f_selfOrClientSyncAndVerdict("detach2",v_ret);
    f_selfOrClientSyncAndVerdict("detach3",v_ret);
    
    //S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    //f_sleep (4.0);
    //f_sleep (20.0);
    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }
  testcase NS_9_0_0001_TesterVerificationNonStdSctp_enmsgind() runs on MTC system TSI {
    var S1Comp  eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");

    var S1Comp  eNBm := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    var SyncPointList v_SyncPointList := {"init","attach", "ZMMO", "detach", "detach2", "detach3", c_poSyncPoint};

    connect (eNB:pt_CM,sGW:pt_CM);

    eNBm.start( f_eNB_NS_9_0_0001_mirrorNonStdSctp_enmsgind ()  );
    sGWm.start( f_sGW_NS_9_0_0001_mirror () );
    hSSm.start( f_hSS_NS_9_0_0001_mirrorNonStdSctp () );
    eNB.start( f_eNB_NS_9_0_0001 () );
    sGW.start( f_sGW_NS_9_0_0001 () );
    hSS.start( f_hSS_General1 (v_SyncPointList) );

    f_serverSyncClientsAndStop(6,v_SyncPointList);

  }

 function f_eNB_NS_9_0_0001_mirrorNonStdSctp_enmsgind () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_v_sctpDefault := activate(d_S1SctpDefault()); 
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
    //v_enb_params.sctpIpAddr_S1_ENB_UE :=  mp_sctpIpAddr_S1_ENB_UE;
    //v_enb_params.sctpPortNumber_ENB_UE :=  7002;//2984;
    //v_enb_params.sctpIpAddr_S1_MME_New :=  mp_sctpIpAddr_S1_MME_New;
    //v_enb_params.sctpPortNumber_MME_New :=  7001; //2985;
    
    g_v_enable_message_ind := true;
  //  g_v_enable_heartbeat_ind := true; 
    //g_v_delay_all_ack := true;    
//     g_v_delay_shutdown_ack_timeLen := 0;
 //   g_v_delay_sack_timeLen := 0;
  //  g_v_delay_heartbeat_ack_timeLen := 7;
    //3_v_delay_ack_timeLen := 4 
    //v_ret := f_preamble_S1_4NonstandardSctpStack (v_enb_params);
    //pt_sctpNotification.send("enable_heartbeat");
    v_ret := f_preamble__S1m (v_enb_params);
    
//    pt_sctpNotification.send("disable_heartbeat_ind");
    pt_sctpNotification.send("enable_all_ack");
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    
    f_sleep(30.0);
    f_selfOrClientSyncAndVerdict("init",v_ret);
    pt_sctpNotification.send("disable_message_ind");
          
    pt_sctpNotification.send("delay_heartbeat_ack");
    pt_sctpNotification.send("5");
    //101108 TEMP Code
    
    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200030008000200d8001a002524075200db6ee69d1cf30534afbf50093a53b6d81011222204146205000122100010423600'O)

    //AuthResp
    pt_s1ap.receive;
    // InitialContextSetupReq     E_RABToBeSetupListCtxtSUReq   0a66b630 -> 0a660a0b
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf6 85f81722223303000003 006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)

    pt_s1ap.send(RawGtpV2Msg:'000900809d0000070000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000006a400100'O) //SubscriberProfileIDforRFP 006a000101 added

    //RAB      E_RABSetupItemCtxtSURes
    pt_s1ap.receive;
    //AttachComplete
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    //pt_s1ap.receive;
    //f_sleep (0.1);
    //pt_s1ap.send(RawGtpV2Msg:'0009006f0000060000000200030008000200d8004200060803e82007d000180025010034000e050009070f800a66b635000030390034000e060009120f800a66b63500003039006b00050800040000004900206ebbe73f49ca89939178e9c5ccb999c499dc4e346f0433878b4de5062ed26adc'O);
    //pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    // ZMMO
    
    //pt_s1ap.send(RawGtpV2Msg: ''O);
    // pt_s1ap.receive(S1AP_PDU:?);
    
    //DetachReq
    pt_s1ap.receive;
    
    //pt_s1ap.receive;
    //DetachResp
    f_sleep (1.0);
    pt_s1ap.send(RawGtpV2Msg:'000b40160000030000000200030008000200d8001a0003020746'O)
    
    f_sleep (1.0);
    //Release
    pt_s1ap.send(RawGtpV2Msg:'0017001100000200630004000300d8000240020000'O);
    
    //Release complete
    pt_s1ap.receive;
    
    //This affects error in synchronization  S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    f_selfOrClientSyncAndVerdict("detach",v_ret);
    f_selfOrClientSyncAndVerdict("detach2",v_ret);
    f_selfOrClientSyncAndVerdict("detach3",v_ret);
    
    //S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    //f_sleep (4.0);
    //f_sleep (20.0);
    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }
 testcase NS_9_0_0001_TesterVerificationNonStdSctp_diack() runs on MTC system TSI {
    var S1Comp  eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");

    var S1Comp  eNBm := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    var SyncPointList v_SyncPointList := {"init","attach", "ZMMO", "detach", "detach2", "detach3", c_poSyncPoint};

    connect (eNB:pt_CM,sGW:pt_CM);

    eNBm.start( f_eNB_NS_9_0_0001_mirrorNonStdSctp_diack ()  );
    sGWm.start( f_sGW_NS_9_0_0001_mirror () );
    hSSm.start( f_hSS_NS_9_0_0001_mirrorNonStdSctp () );
    eNB.start( f_eNB_NS_9_0_0001 () );
    sGW.start( f_sGW_NS_9_0_0001 () );
    hSS.start( f_hSS_General1 (v_SyncPointList) );

    f_serverSyncClientsAndStop(6,v_SyncPointList);

  }

 function f_eNB_NS_9_0_0001_mirrorNonStdSctp_diack () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_v_sctpDefault := activate(d_S1SctpDefault()); 
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
    //v_enb_params.sctpIpAddr_S1_ENB_UE :=  mp_sctpIpAddr_S1_ENB_UE;
    //v_enb_params.sctpPortNumber_ENB_UE :=  7002;//2984;
    //v_enb_params.sctpIpAddr_S1_MME_New :=  mp_sctpIpAddr_S1_MME_New;
    //v_enb_params.sctpPortNumber_MME_New :=  7001; //2985;
    
    g_v_disable_all_ack := true;
  //  g_v_enable_message_ind := true;
  //  g_v_enable_heartbeat_ind := true; 
    //g_v_delay_all_ack := true;    
//     g_v_delay_shutdown_ack_timeLen := 0;
 //   g_v_delay_sack_timeLen := 0;
  //  g_v_delay_heartbeat_ack_timeLen := 7;
    //3_v_delay_ack_timeLen := 4 
    //v_ret := f_preamble_S1_4NonstandardSctpStack (v_enb_params);
    //pt_sctpNotification.send("enable_heartbeat");
    v_ret := f_preamble__S1m (v_enb_params);
    
//    pt_sctpNotification.send("disable_heartbeat_ind");
    pt_sctpNotification.send("enable_all_ack");
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    
    f_sleep(30.0);
    f_selfOrClientSyncAndVerdict("init",v_ret);
    //pt_sctpNotification.send("disable_message_ind");
          
    pt_sctpNotification.send("delay_heartbeat_ack");
    pt_sctpNotification.send("5");
    //101108 TEMP Code
    
    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200030008000200d8001a002524075200db6ee69d1cf30534afbf50093a53b6d81011222204146205000122100010423600'O)

    //AuthResp
    pt_s1ap.receive;
    // InitialContextSetupReq     E_RABToBeSetupListCtxtSUReq   0a66b630 -> 0a660a0b
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf6 85f81722223303000003 006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)

    pt_s1ap.send(RawGtpV2Msg:'000900809d0000070000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000006a400100'O) //SubscriberProfileIDforRFP 006a000101 added

    //RAB      E_RABSetupItemCtxtSURes
    pt_s1ap.receive;
    //AttachComplete
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    //pt_s1ap.receive;
    //f_sleep (0.1);
    //pt_s1ap.send(RawGtpV2Msg:'0009006f0000060000000200030008000200d8004200060803e82007d000180025010034000e050009070f800a66b635000030390034000e060009120f800a66b63500003039006b00050800040000004900206ebbe73f49ca89939178e9c5ccb999c499dc4e346f0433878b4de5062ed26adc'O);
    //pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    // ZMMO
    
    //pt_s1ap.send(RawGtpV2Msg: ''O);
    // pt_s1ap.receive(S1AP_PDU:?);
    
    //DetachReq
    pt_s1ap.receive;
    
    //pt_s1ap.receive;
    //DetachResp
    f_sleep (1.0);
    pt_s1ap.send(RawGtpV2Msg:'000b40160000030000000200030008000200d8001a0003020746'O)
    
    f_sleep (1.0);
    //Release
    pt_s1ap.send(RawGtpV2Msg:'0017001100000200630004000300d8000240020000'O);
    
    //Release complete
    pt_s1ap.receive;
    
    //This affects error in synchronization  S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    f_selfOrClientSyncAndVerdict("detach",v_ret);
    f_selfOrClientSyncAndVerdict("detach2",v_ret);
    f_selfOrClientSyncAndVerdict("detach3",v_ret);
    
    //S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    //f_sleep (4.0);
    //f_sleep (20.0);
    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }
 testcase NS_9_0_0001_TesterVerificationNonStdSctp() runs on MTC system TSI {
    var S1Comp  eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");

    var S1Comp  eNBm := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    var SyncPointList v_SyncPointList := {"init","attach", "ZMMO", "detach", "detach2", "detach3", c_poSyncPoint};

    connect (eNB:pt_CM,sGW:pt_CM);

    eNBm.start( f_eNB_NS_9_0_0001_mirrorNonStdSctp () );
    sGWm.start( f_sGW_NS_9_0_0001_mirror () );
    hSSm.start( f_hSS_NS_9_0_0001_mirrorNonStdSctp () );
    eNB.start( f_eNB_NS_9_0_0001 () );
    sGW.start( f_sGW_NS_9_0_0001 () );
    hSS.start( f_hSS_General1 (v_SyncPointList) );

    f_serverSyncClientsAndStop(6,v_SyncPointList);

  }



  function f_eNB_NS_9_0_0001 () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var template CMessage v_bearerIdMsg;
    var integer v_setupIndex := 1; 
    var octetstring v_guti;

    f_connect4SelfOrClientSync();
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_d_s1CommonDefault := activate(d_S1ComDef());

    /*(g_v_enable_message_ind := true;
    g_v_enable_heartbeat_ind := true;
    g_v_delay_all_ack := true;    
    g_v_delay_ack_timeLen := 4 */
   //SCTP Connection
    v_ret := f_initS1 (mp_sctpIpAddr_S1_ENB_UE,
              mp_sctpPortNumber_ENB_UE, 
              mp_sctpIpAddr_S1_MME_New, 
              mp_sctpPortNumber_MME_New);
  
    f_enbParameters(v_enb_params);

    log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);
    g_v_extSyncTimeGuard := 20.0;
    log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);

    v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
      a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    v_ret := f_S1setupProcedure( v_enb_params);

    for (v_setupIndex :=2;v_setupIndex<5;v_setupIndex:=v_setupIndex+1){
      v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
      a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    }

    f_sleep(30.0);
    f_selfOrClientSyncAndVerdict("init",v_ret);  
        
    f_SubscriberParameters(v_subscriberParameters);

    log(v_subscriberParameters.s1.mobileIdentity);
    v_subscriberParameters.s1.mobileIdentity := encodeEPSMobileIdentityIMSI(oct2hex(valueof(a_octetstring(v_subscriberParameters.s10_core7.imsi))));
    log(v_subscriberParameters.s1.mobileIdentity);

    v_subscriberParameters.s1.tAC := a_TAC(1);
    v_subscriberParameters.s1.epsBearerIdentity := 0 ;
    log(v_subscriberParameters.s1.epsBearerIdentity);
    //New initialized bearer id (6) is sent to the GTPv2 component:
    v_bearerIdMsg := {
      info := "NAS bearer Identity",
      msg := {EPSBearerIdentity := v_subscriberParameters.s1.epsBearerIdentity}
    }
    pt_CM.send(v_bearerIdMsg);

    pt_CM.send({
      info := "globalEnbId",
      msg := {Global_ENB_ID := v_enb_params.globalEnbId}
    });

    //f_InitForSending(v_subscriberParameters);
    //v_subscriberParameters.s1.mME_UE_S1AP_ID :=omit;
    /*v_subscriberParameters.s1 := omit;
    v_subscriberParameters.s11 := omit;
    v_subscriberParameters.s11_core7 := omit;
    v_subscriberParameters.s6a := omit;
    v_subscriberParameters.s6a := omit;
    v_subscriberParameters.sgs := omit;
    v_subscriberParameters.x := omit;
    v_subscriberParameters.gn := omit;
    v_subscriberParametersTable[0] := v_subscriberParameters;*/
    //v_subscriberParametersTable := {v_subscriberParameters};
    //log(v_subscriberParametersTable);
    //pt_CM.send(v_subscriberParametersTable);
    //f_InitForReceiving(v_subscriberParameters);
    //f_SubscriberParameters(v_subscriberParameters);
    //101108 TEMP Code
    //f_s1_pagingRequest_r_sms(v_subscriberParameters);
    
    f_sleep (3.0);
    
    //Attach Procedure
    v_ret := f_s1_BasicAttach(v_subscriberParameters);

    
    log (v_subscriberParameters.s1.mobileIdentity.digits);
    v_guti := valueof(a_octetstring(v_subscriberParameters.s1.mobileIdentity.digits));
    f_increaseLastDigitOfGuti(v_guti);
    v_subscriberParameters.s1.mobileIdentity.digits := v_guti;
    log (v_subscriberParameters.s1.mobileIdentity.digits);


    f_selfOrClientSyncAndVerdict("attach",v_ret);  
    //f_InitForSending_WithSecurity(v_subscriberParameters, g_v_securityParameters);
    //f_initSecurityContext(MmeParameters.mp_KASME);
    //g_v_securityContextInUse:=true;
    //v_subscriberParameters.s1.sequenceNumber_UL := 5;
    //f_s1_BasicServiceRequestWithSecurityWithMultipleBearers(v_subscriberParameters);

    f_selfOrClientExternalSyncAndVerdict("ZMMO",v_ret);
    

    f_sleep (2.0);

    //Detach Procedure
    v_ret := f_s1_BasicDetach(v_subscriberParameters);
    
    f_selfOrClientSyncAndVerdict("detach",v_ret);
    f_selfOrClientSyncAndVerdict("detach2",v_ret);
    f_selfOrClientSyncAndVerdict("detach3",v_ret);

    f_sleep (2.0);
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();
  }

template integer gtpSequenceNumber (in template integer p) := p; 
template integer a_int (template integer p_int) := p_int;
template octetstring a_octetstring(template octetstring p_octetstring) := p_octetstring;

 type record myValue {
   integer a optional,
   integer b optional
 }

 type record length (0..4) of myValue myValueLst

 template myValueLst a_myValue := {
   {
   a := 1,
   b := omit
   },
   {
   a := 2,
   b := omit
   },
   {
   a := 3,
   b := 1
   },
   {
   a := 4,
   b := omit
   }
   
 }

 template AMBR a_AMBR_pure( template AMBR p_AMBR) := p_AMBR;

  /***************** S11 interface *****************/
  function f_sGW_NS_9_0_0001  () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var CMessage v_bearerIdMsg ;
    var CMessage v_CMessage;
    var Global_ENB_ID v_Global_ENB_ID

    //var octetstring v_RAI := 'aabbccddeeff'O;
    var octetstring v_plmnId := 'aabbcc'O;
    var octetstring v_lac    := 'ddee'O;
    var octetstring v_rac    := 'ff'O;
    var octetstring v_PTmsi := 'ffeeddcc'O;
    var octetstring v_PTmsiSignature := '0b0c0d'O;
    var boolean v_boolean;
    var integer v_int;
    var integer v_size;
    //var charstring v_sutAddressArray[1..5];

    var template AMBR v_AMBRRecv_BU;

    //var integer v_sequenceNum;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    if (f_preamble_S11 ( mp_udpIpAddr_S11_SGW, mp_udpPortNumber_S11_SGW, 
        mp_udpIpAddr_S11_MME_New, mp_udpPortNumber_S11_MME_New ) != e_success){
      setverdict(fail);
    }
    f_sleep(30.0);
    f_selfOrClientSyncAndVerdict("init",v_ret);  
    
    f_SubscriberParameters(v_subscriberParameters);
    v_subscriberParametersTable[0] := v_subscriberParameters;   

                                 v_subscriberParameters.s11_core7.gtpSequenceNumber := 8388622;
                                 log(v_subscriberParameters.s11_core7.gtpSequenceNumber);

                                 v_subscriberParameters.s11_core7.gtpSequenceNumber := bit2int(int2bit(valueof(gtpSequenceNumber(v_subscriberParameters.s11_core7.gtpSequenceNumber)),24) xor4b '100000000000000000000000'B) + 1;

                                 log(v_subscriberParameters.s11_core7.gtpSequenceNumber);

    g_d_s11CommonDefault := activate(d_GtpV2CommonDefault());

    v_AMBRRecv_BU       :=  v_subscriberParameters.s11_core7.ambr;
 
    log (v_AMBRRecv_BU);
 
    //f_disableIprMsgIndications();
    //f_disableIprSuccessIndications();

    v_int := sizeof(a_myValue)
      log(v_int);


    f_guti2RaiPtmsiPtmsiSignature(valueof(a_octetstring('0102030405060708090a'O)), '8899'O, 
                                  v_plmnId, v_lac, v_rac, v_PTmsi, v_PTmsiSignature );

    //log ("RAI: 010203040506, ","RAI converted: ", v_RAI);
    log ("PLMNID: 010203, ","PLMN ID converted: ", v_plmnId);
    log ("LAC: 0405, ","LAC converted: ", v_lac);
    log ("RAC: 06, ","RAC converted: ", v_rac);
    log ("PTMSI: 0708090a, ","PTMSI converted: ", v_PTmsi);
    log ("PTMSI Sig: 088899, ","PTMSI Sig converted: ", v_PTmsiSignature);
    
    //New initialized bearer id (6) is received from eNB component:  
    f_receiveCMessage(?,v_bearerIdMsg);
    if (v_ret == e_success){ 
    v_subscriberParameters.s1.epsBearerIdentity := v_bearerIdMsg.msg.EPSBearerIdentity;
    }

    f_receiveCMessage(?,v_CMessage);

    //pt_CM.receive
    v_Global_ENB_ID := v_CMessage.msg.Global_ENB_ID;
    log("Global_ENB_ID");
    log(v_Global_ENB_ID);

    //In GtpV2InitParametersCore7.ttcn indication is set to 'omit' which cause error
    v_subscriberParameters.s11_core7.indication  := a_Indication(?,a_IEInfo(0),a_IndicationValue(e_false,e_false,e_false,e_false,e_false,e_false,
                                                       e_false,e_false,e_false,e_false,e_false,e_false,
                                                       e_false,e_false,e_false,e_false,omit,omit,omit,omit));


    //log(v_subscriberParameters);
    v_ret := f_s11_CreateSessionBasic/*Course*/ (v_subscriberParameters);

    v_size := sizeof(g_v_lastReceivedGTPPduValueCore7.createSessionRequest.ies.accessPointName.accessPointNameLabelList);
    log(v_size);

    log(v_subscriberParameters.s11_core7.gtpSequenceNumber);
    //v_subscriberParameters.s11_core7.gtpSequenceNumber := ?
    v_subscriberParameters.s11_core7.gtpSequenceNumber :=  a_int(7);
    v_subscriberParameters.s11_core7.gtpSequenceNumber := valueof(gtpSequenceNumber(v_subscriberParameters.s11_core7.gtpSequenceNumber)) + 10;
    v_subscriberParameters.s11_core7.s11_cause := e_context_not_found;
    v_subscriberParameters.s11.s11_cause := e_context_non_existent_or_found;
    log(v_subscriberParameters.s11_core7.s11_cause);
    log(v_subscriberParameters.s11.s11_cause);
    log(v_subscriberParameters.s11_core7.gtpSequenceNumber);
    log("paberg");

    
    if (v_ret == e_success){
      v_ret :=  f_s11_ModifyBearerBasic (v_subscriberParameters);
    }
    f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    //paberg

    g_v_s11_defaultReceiveTime := 20.0;
    //g_d_s11IpRouterIndicators := activate(f_ipRouterIndicationDefault()); 

    //deactivate(g_v_syncDefault);
    //deactivate(g_d_s11CommonDefault);

    log("IP ADDRESS COPYING FROM THE REQUEST TO RESPOSE FEATURE BEGINS");

    v_subscriberParameters.s11_core7.ebi := {a_EBI( 0 ,a_IEInfo(1), a_EBIValue(6,omit)),a_EBI( 0 ,a_IEInfo(1), a_EBIValue(7,omit))}

    //v_ret :=  f_s11_DeleteSessionBasic (v_subscriberParameters);
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd
    v_ret :=  f_s11_DeleteDedicatedBearerRequest_s(v_subscriberParameters);
    

    f_selfOrClientSyncAndVerdict("detach",v_ret);

    v_ret :=  f_s11_DeleteSessionBasic (v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("detach2",v_ret);

    v_ret :=  f_s11_DeleteSessionBasic (v_subscriberParameters);

    log("IP ADDRESS COPYING FROM THE REQUEST TO RESPOSE FEATURE ENDS");

    //deactivate(g_d_s11IpRouterIndicators);

    f_selfOrClientSyncAndVerdict("detach3",v_ret);

    f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_s11_DeleteSessionBasic (v_subscriberParameters);

    v_subscriberParametersTable[0] := v_subscriberParameters;
    v_subscriberParametersTable[1] := v_subscriberParameters;
    v_subscriberParametersTable[2] := v_subscriberParameters;

                                 v_subscriberParametersTable[1].s11_core7.gtpteid := 50;
                                                              v_subscriberParametersTable[2].s11_core7.gtpteid := 100;

    f_s11_ProcedureCollectReleaseAccessBearersRequestAndSendResp_rs(v_subscriberParametersTable,3);

    v_subscriberParameters  := v_subscriberParametersTable[0];
   //v_subscriberParameters2  := v_subscriberParametersTable[1];




    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }
  

  /////////////////////// S6A interface ///////////////////////////////////////////7
  function f_hSS_NS_9_0_0001 () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    f_SubscriberParameters(v_subscriberParameters);
    
    v_subscriberParameters.s6a.r_subscriptionData := a_SubscriptionData(a_SubscriptionDataGrp3GPP(v_subscriberParameters,0),0);

    log (v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics);
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0)); // rivi 845
    log (v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics);

    f_connect4SelfOrClientSync();
    f_preambleDiameter( v_subscriberParameters,
                        mp_sctpIpAddrS6aHLR, mp_sctpPortNumberS6aHLR, 
                        mp_sctpIpAddrS6aMMENew, mp_sctpPortNumberS6aMMENew );
    
    //g_d_s6ACommonDefault := activate(d_DeviceWatchdog());
    //g_d_s6ACommonDefault := activate(d_Purge());

    //v_subscriberParameters.s6a.r_mipHomeAgentAddress := DiameterS6AVPTemplates.a_MipHomeAgentAddress({ipv4 := "10.125.10.53"},0);
    //log ("paberg");
    //log(v_subscriberParameters);



    v_subscriberParameters.s6a.r_serviceSelection := DiameterS6AVPTemplates.a_ServiceSelection("sgw.nsn.com.mnc001.mcc262.gprs",0); 

    f_sleep (30.0);
    f_selfOrClientSyncAndVerdict("init",g_v_s6ret);
    
    if (mp_diameter_3GPP_baseline_in_use == false){
      if (f_receiveAirAndSendResponse(v_subscriberParameters) != e_success){
        setverdict(fail);
      }
      if (f_BasicReceiveULRAndSendResponse (v_subscriberParameters) != e_success){
        setverdict(fail);
      }
    }
    else{
      if (f_receiveAirAndSendResponse/*3GPP*/(v_subscriberParameters) != e_success){
        setverdict(fail);
      }
      if (f_BasicReceiveULRAndSendResponse/*3GPP*/ (v_subscriberParameters) != e_success){
        setverdict(fail);
      }
    }
    
    f_selfOrClientSyncAndVerdict("attach",g_v_s6ret);
    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    
    f_selfOrClientSyncAndVerdict("detach",g_v_s6ret);
    f_selfOrClientSyncAndVerdict("detach2",v_ret);
    f_selfOrClientSyncAndVerdict("detach3",v_ret);
    
    f_sleep(10.0);
    
    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,g_v_s6ret);
    f_disconnect4SelfOrClientSync();
    
  }
  
  
  //f_hSS_NS_9_0_0001
  function f_hSS_General1 (in SyncPointList p_syncPointIds) runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var integer ind := sizeof(p_syncPointIds);

    log(p_syncPointIds);
    log(ind);

    f_SubscriberParameters(v_subscriberParameters);
    //v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress[0].ipAddress.ipv4 := "127.0.0.3";
    //v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress[1]:= a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000003'O}, 16);

    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress := {
  a_ServedPartyIpAddress({ipv4 := "127.0.0.3"}, 0),
  a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000003'O}, 0) };

  log(v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress);

    log (v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters);
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters := e_operatorSpecific150;
    log (v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters);

    v_subscriberParameters.s6a.r_subscriptionData := a_SubscriptionData(a_SubscriptionDataGrp3GPP(v_subscriberParameters,0),0);

    log (v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics);
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0));
    log (v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics);

    f_connect4SelfOrClientSync();
    v_ret := f_preambleDiameter( v_subscriberParameters, 
                                 mp_sctpIpAddrS6aHLR, mp_sctpPortNumberS6aHLR, 
                                 mp_sctpIpAddrS6aMMENew, mp_sctpPortNumberS6aMMENew );
    
    /*if (f_receiveCerAndSendResponse(v_subscriberParameters) != e_success){
      setverdict(fail);
      }*/

    //f_CloseHSSComponent(e_error);

    v_subscriberParameters.s6a.r_serviceSelection := DiameterS6AVPTemplates.a_ServiceSelection("sgw.nsn.com.mnc001.mcc262.gprs",0); 

    f_sleep(30.0);
    //f_selfOrClientSyncAndVerdict("init",g_v_s6ret);
    f_selfOrClientSyncAndVerdict(p_syncPointIds[0],g_v_s6ret);
    
    if (mp_diameter_3GPP_baseline_in_use == false){
      if (f_receiveAirAndSendResponse(v_subscriberParameters) != e_success){
        setverdict(fail);
      }
      if (f_BasicReceiveULRAndSendResponse (v_subscriberParameters) != e_success){
        setverdict(fail);
      }
    }
    else{
      if (f_receiveAirAndSendResponse/*3GPP*/(v_subscriberParameters) != e_success){
        setverdict(fail);
      }

      if (f_BasicReceiveULRAndSendResponse/*3GPP*/ (v_subscriberParameters) != e_success){
        setverdict(fail);
      }
    }
    
    // SCTP CONNECTION SHUTTED DOWN BY MME BEGINS
    /*f_selfOrClientSyncAndVerdict("attach",v_ret);  // NOTE: for(ind:=1; to be set to 2
    f_Postamble_S6a(v_subscriberParameters);   
    f_sleep(1.0);
    f_preambleDiameter( mp_sctpIpAddrS6aHLR, mp_sctpPortNumberS6aHLR, 
                        mp_sctpIpAddrS6aMMENew, mp_sctpPortNumberS6aMMENew );
    
    if (f_receiveCerAndSendResponse(v_subscriberParameters) != e_success){
      setverdict(fail);
      }*/
    // SCTP CONNECTION SHUTTED DOWN BY MME ENDS
    
    //f_selfOrClientSyncAndVerdict("attach",g_v_s6ret);
    //f_selfOrClientSyncAndVerdict(p_syncPointIds[1],g_v_s6ret);
    
    //f_selfOrClientSyncAndVerdict("detach",g_v_s6ret);
    //f_selfOrClientSyncAndVerdict(p_syncPointIds[2],g_v_s6ret);

    for(ind:=1;ind<sizeof(p_syncPointIds)-1;ind:=ind+1) {
      f_selfOrClientSyncAndVerdict(p_syncPointIds[ind],g_v_s6ret);
    }
    
    f_sleep(1.0);
    
    //f_sendDprAndReceiveResponse_DNWTTTY(v_subscriberParameters);

    //f_Postamble_S6a(v_subscriberParameters);
    f_Postamble_S6a(v_subscriberParameters);
    
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,g_v_s6ret);
    f_disconnect4SelfOrClientSync();
    
  }
    
function f_sGW_NS_9_0_0001_mirror  () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
 
  var octetstring v_createSesson := 
  '482000b400000000000007000100080062020100000000f14c00080053680100'O &
  '00000010560008001085f817ff81fca05300030085f81752000100064d000200'O &
  '0000570009008a03000003'O &
   f_RealIP2Oct(mp_localAddress) & //'83cfac8d'O & //'83cfac8d'O &
  '5700090187000000000a66b6b847000c0003736777036e736e03636f6d800001'O &
  '00fc63000100014f00050001000000007f0001000048000800000003e8000007'O &
  'd05d001f00490001000550001600040900000000000000000000000000000000'O &
  '000000000300010001'O

  var octetstring v_modifyBearer := 
  '4822003103000003000008004d0002000000570009008a03000003'O &
   f_RealIP2Oct(mp_localAddress) & //'83cfac8d'O & //'83cfac8d'O &
  '5d00120049000100055700090080000030390a8c435d'O

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    if (f_preamble_S11 ( mp_udpIpAddr_S11_MME_New,
                         mp_udpPortNumber_S11_MME_New,
                         mp_udpIpAddr_S11_SGW,
                         mp_udpPortNumber_S11_SGW) != e_success){
      setverdict(fail);
    }
    f_sleep(30.0);
        f_selfOrClientSyncAndVerdict("init",v_ret);
    //f_selfOrClientSyncAndVerdictPR("init",v_ret);

      f_sleep (6.0);

      // ECHO PROCEDURE
        if(mp_gtp_Core7_baseline_in_use == false) {
          pt_gtp.send(RawGtpV2Msg:'40010015000100000300010008ff000800000fa0b1c2d3e4f5'O);
          pt_gtp.receive;
          pt_gtp.receive;//UdpMessageInd
        }
        else {
          pt_gtp.send(RawGtpV2Msg:'40010015000001000300010008'O);
          pt_gtp.receive;
          pt_gtp.receive;//UdpMessageInd
        }

    //createSessionRequest
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'482000b400000000000700000100080062020100000000f14c0008005368010000000010560008001085f817ff81fca05300030085f81752000100064d0002000004570009008a030000030a66b6065700090189000000000a66b6b847000c0003736777036e736e03636f6d80000100fd63000100014f00050001000000007f0001000148000800000003e8000007d05d001f00490001000550001600010900000000000000000000000000000000000000000300010001'O)
 }
  else{
    pt_gtp.send(RawGtpV2Msg:v_createSesson /*'482000b400000000000007000100080062020100000000f14c0008005368010000000010560008001085f817ff81fca05300030085f81752000100064d0002000000570009008a0300000383cfac8d5700090187000000000a66b6b847000c0003736777036e736e03636f6d80000100fc63000100014f00050001000000007f0001000048000800000003e8000007d05d001f00490001000550001600040900000000000000000000000000000000000000000300010001'O*/)
  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd

 // Modify Bearer Request
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'4822003103000003000800004d0002000000570009008a030000030a66b6065d00120049000100055700090080000030390a8c435d'O)
 }
  else {
    pt_gtp.send(RawGtpV2Msg:v_modifyBearer/*'4822003103000003000008004d0002000000570009008a0300000383cfac8d5d00120049000100055700090080000030390a8c435d'O*/)
  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd

f_selfOrClientSyncAndVerdict("attach",v_ret);
f_selfOrClientSyncAndVerdict("ZMMO",v_ret);

 f_sleep(2.0);
 //f_sleep(30.0);
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O)
 }
  else {
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)
  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd

 //f_sleep(1.5); 
f_selfOrClientSyncAndVerdict("detach",v_ret);
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O)
 }
  else {
    //f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)
  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd

f_selfOrClientSyncAndVerdict("detach2",v_ret);
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O)
 }
  else {
    //f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)
  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd

 f_selfOrClientSyncAndVerdict("detach3",v_ret);

  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O) }  else {
    f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O) }  else {
    f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O) }  else {
    f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O) }  else {
    f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O) }  else {
    f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O) }  else {
    f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd
  if(mp_gtp_Core7_baseline_in_use == false) {
pt_gtp.send(RawGtpV2Msg:'48240013030000030009000049000100054d0002000800'O) }  else {
    f_sleep(1.0);
pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)  }
pt_gtp.receive;
pt_gtp.receive;//UdpMessageInd



 // release access bearers
 pt_gtp.send(RawGtpV2Msg:'48aa00080001ee4600000300'O);
 pt_gtp.send(RawGtpV2Msg:'48aa00080001ee4600000300'O);
 pt_gtp.send(RawGtpV2Msg:'48aa00080001ee4600000300'O);
 pt_gtp.receive;
 pt_gtp.receive;//UdpMessageInd
 pt_gtp.receive;
 pt_gtp.receive;//UdpMessageInd
 pt_gtp.receive;
 pt_gtp.receive;//UdpMessageInd

 f_postamble_S11 ();
 f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
 f_disconnect4SelfOrClientSync();

  }

  
    /***************** S1 interface *****************/

  
  
  function f_eNB_NS_9_0_0001_mirrorNonStdSctp () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_v_sctpDefault := activate(d_S1SctpDefault()); 
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
    //v_enb_params.sctpIpAddr_S1_ENB_UE :=  mp_sctpIpAddr_S1_ENB_UE;
    //v_enb_params.sctpPortNumber_ENB_UE :=  7002;//2984;
    //v_enb_params.sctpIpAddr_S1_MME_New :=  mp_sctpIpAddr_S1_MME_New;
    //v_enb_params.sctpPortNumber_MME_New :=  7001; //2985;
    
    g_v_disable_heartbeat := true;
//    g_v_disable_all_ack := true;
  //  g_v_enable_message_ind := true;
    g_v_enable_heartbeat_ind := true; 
    //g_v_delay_all_ack := true;    
//     g_v_delay_shutdown_ack_timeLen := 0;
 //   g_v_delay_sack_timeLen := 0;
  //  g_v_delay_heartbeat_ack_timeLen := 7;
    //3_v_delay_ack_timeLen := 4 
    //v_ret := f_preamble_S1_4NonstandardSctpStack (v_enb_params);
    //pt_sctpNotification.send("enable_heartbeat");
    v_ret := f_preamble__S1m (v_enb_params);
    
//    pt_sctpNotification.send("disable_heartbeat_ind");
  //  pt_sctpNotification.send("enable_all_ack");
    pt_sctpNotification.send("enable_heartbeat");
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    
    f_sleep(30.0);
    f_selfOrClientSyncAndVerdict("init",v_ret);
    //pt_sctpNotification.send("disable_message_ind");
          
    pt_sctpNotification.send("delay_heartbeat_ack");
    pt_sctpNotification.send("5");
    //101108 TEMP Code
    
    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200030008000200d8001a002524075200db6ee69d1cf30534afbf50093a53b6d81011222204146205000122100010423600'O)

    //AuthResp
    pt_s1ap.receive;
    // InitialContextSetupReq     E_RABToBeSetupListCtxtSUReq   0a66b630 -> 0a660a0b
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf6 85f81722223303000003 006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)
    //pt_s1ap.send(RawGtpV2Msg:'00090080980000060000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000'O)

    pt_s1ap.send(RawGtpV2Msg:'000900809d0000070000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000006a400100'O) //SubscriberProfileIDforRFP 006a000101 added

    //RAB      E_RABSetupItemCtxtSURes
    pt_s1ap.receive;
    //AttachComplete
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    //pt_s1ap.receive;
    //f_sleep (0.1);
    //pt_s1ap.send(RawGtpV2Msg:'0009006f0000060000000200030008000200d8004200060803e82007d000180025010034000e050009070f800a66b635000030390034000e060009120f800a66b63500003039006b00050800040000004900206ebbe73f49ca89939178e9c5ccb999c499dc4e346f0433878b4de5062ed26adc'O);
    //pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    // ZMMO
    
    //pt_s1ap.send(RawGtpV2Msg: ''O);
    // pt_s1ap.receive(S1AP_PDU:?);
    
    //DetachReq
    pt_s1ap.receive;
    
    //pt_s1ap.receive;
    //DetachResp
    f_sleep (1.0);
    pt_s1ap.send(RawGtpV2Msg:'000b40160000030000000200030008000200d8001a0003020746'O)
    
    f_sleep (1.0);
    //Release
    pt_s1ap.send(RawGtpV2Msg:'0017001100000200630004000300d8000240020000'O);
    
    //Release complete
    pt_s1ap.receive;
    
    //This affects error in synchronization  S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    f_selfOrClientSyncAndVerdict("detach",v_ret);
    f_selfOrClientSyncAndVerdict("detach2",v_ret);
    f_selfOrClientSyncAndVerdict("detach3",v_ret);
    
    //S1AP.ErrorIndication
    //pt_s1ap.send(RawGtpV2Msg:'000f40150000030000400200060008400200d90002400201e0'O);

    //f_sleep (4.0);
    //f_sleep (20.0);
    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }


  /***************** S11 interface *****************/





  function f_hSS_NS_9_0_0001_mirrorNonStdSctp () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
  //  g_v_disable_heartbeat := true;
    //g_v_disable_all_ack := true;
 //   g_v_enable_message_ind := true;
  //  g_v_enable_heartbeat_ind := true;
//     g_v_delay_shutdown_ack_timeLen := 0;
 //   g_v_delay_sack_timeLen := 0;
  //  g_v_delay_heartbeat_ack_timeLen := 7;

    f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew,
                        mp_sctpPortNumberS6aMMENew,
                        mp_sctpIpAddrS6aHLR,
                        mp_sctpPortNumberS6aHLR);

    //CER
    f_sleep (15.0);
pt_diameter.send(RawDiameterMsg:'01010000bc80000101000000000db01783000014720000010b0000000c00005678000001014000000e00010a66b6640000000001084000001a6f726967696e686f73742e6d6d6d2e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010d0000000d464c4558490000000000010a4000000c00006f2a000001094000000c000028af00000104400000200000010a4000000c000028af000001024000000c01000023000001024000000c01000023'O)

pt_diameter.receive;

  f_sleep (30.0);
  f_selfOrClientSyncAndVerdict("init",v_ret);
 //f_selfOrClientSyncAndVerdictPR("init",v_ret);

   //DWR
   //pt_diameter.send(RawDiameterMsg:'0100005080000118000000000000000100000001000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d000001164000000c000002bc'O);

   //DWR
   //pt_diameter.receive;

   

 if (mp_diameter_3GPP_baseline_in_use == true){

  pt_diameter.send(RawDiameterMsg:'01010001dcc000013e010000230000000100000001000001074000002c616363657373706f696e74372e61636d652e636f6d3b313837363534333231303b353233000001154000000c00000000000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d0000012540000016686d736578616d706c652e636f6d00000000011b400000136578616d706c652e636f6d00000000014000001d616363657373706f696e74372e61636d652e636f6d0000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000010000027680000010000028af0202020200000580c000003c000028af00000582c0000010000028af0000000100000584c0000010000028af0000000200000583c000000e000028af1234000000000581c000003c000028af00000582c0000010000028af0000000100000584c0000010000028af0000000200000583c000000e000028af123400000000057fc000000f000028af456789000000011c40000034000001184000001d616363657373706f696e74372e61636d652e636f6d000000000000214000000b012345000000011a4000001d616363657373706f696e74372e61636d652e636f6d000000'O)

pt_diameter.receive;

  //DWR
  pt_diameter.send(RawDiameterMsg:'010100005080000118000000000000000100000001000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d000001164000000c000002bc'O)
  //DWA
pt_diameter.receive;


  //PUR
  pt_diameter.send(RawDiameterMsg:'0101000154c0000141010000230000000100000001000001074000002c616363657373706f696e74372e61636d652e636f6d3b313837363534333231303b353233000001154000000c00000000000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d0000012540000016686d736578616d706c652e636f6d00000000011b400000136578616d706c652e636f6d00000000014000001d616363657373706f696e74372e61636d652e636f6d0000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000010000027680000010000028af020202020000011c40000034000001184000001d616363657373706f696e74372e61636d652e636f6d000000000000214000000b012345000000011a4000001d616363657373706f696e74372e61636d652e636f6d000000'O)

  //PUA
pt_diameter.receive;


pt_diameter.send(RawDiameterMsg:'01010001d8c000013c01000023000000640000000c000001074000002c616363657373706f696e74372e61636d652e636f6d3b313837363534333231303b353233000001154000000c00000001000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d0000012540000016686d736578616d706c652e636f6d00000000011b400000136578616d706c652e636f6d00000000014000001d616363657373706f696e74372e61636d652e636f6d0000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000010000027680000010000028af0202020200000579c0000044000028af0000057ac0000012000028af3131323233330000000005bfc000000f000028af987654000000057bc0000014000028af343435353636373700000408c0000010000028af000003ec0000057dc0000010000028af000000020000057fc000000f000028af45678900000005d1c0000010000028af214365870000011c40000034000001184000001d616363657373706f696e74372e61636d652e636f6d000000000000214000000b012345000000011a4000001d616363657373706f696e74372e61636d652e636f6d000000'O)

pt_diameter.receive;

      }
 else {
   //AIR
pt_diameter.send(RawDiameterMsg:'0100010cc000028b010000230000000500000005000001074000001e4d4d452e4e534e2e434f4d3b35303333313635313b350000000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d0000000001254000001864657374686f73742e6d6d652e636f6d0000011b40000018646573747265616c6d6e736e2e636f6d00000001400000173236323031303030303030303030310000000580c000002c000028af00000582c0000010000028af0000000100000584c0000010000028af000000010000057fc000000f000028af62f21000000005afc0000010000028af00000000'O);

 //AIA
pt_diameter.receive;

 //ULR
pt_diameter.send(RawDiameterMsg:'010000f0c000028a010000230000000600000006000001074000001e4d4d452e4e534e2e434f4d3b35303333313635313b360000000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d0000000001254000001864657374686f73742e6d6d652e636f6d0000011b40000018646573747265616c6d6e736e2e636f6d0000000140000017323632303130303030303030303031000000057dc0000010000028af000000020000057fc000000f000028af62f2100000000408c0000010000028af000003ec'O);

 //ULA
pt_diameter.receive;

 }

     // SCTP CONNECTION SHUTTED DOWN BY MME BEGINS
 /*f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_sendShutdownS6a();
    f_sleep(1.0);
    f_preambleDiameter( mp_sctpIpAddrS6aMMENew,
                        mp_sctpPortNumberS6aMMENew,
                        mp_sctpIpAddrS6aHLR,
                        mp_sctpPortNumberS6aHLR);
      f_sleep(3.0);
    //CER
      pt_diameter.send(RawDiameterMsg:'010000bc80000101000000000db01783000014720000010b0000000c00005678000001014000000e00010a66b6640000000001084000001a6f726967696e686f73742e6d6d6d2e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010d0000000d464c4558490000000000010a4000000c00006f2a000001094000000c000028af00000104400000200000010a4000000c000028af000001024000000c01000023000001024000000c01000023'O)

      pt_diameter.receive;*/
     // SCTP CONNECTION SHUTTED DOWN BY MME ENDS


 f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    f_selfOrClientSyncAndVerdict("detach",v_ret);
f_selfOrClientSyncAndVerdict("detach2",v_ret);
f_selfOrClientSyncAndVerdict("detach3",v_ret);
    

    //f_sleep(10.0);

    // DPR / DPA
    pt_diameter.receive;
    f_sleep(0.1);
    pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);

    //f_Postamble_S6a(v_subscriberParameters);
    f_Postamble_S6a_WithoutShutdown();
    //f_sendShutdownS6a(); // This sends SCTP shutdown primitive
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  testcase NS_60_18_0002_TesterVerfication ( ) runs on MTC system TSI {

    var SGsComp sGS := SGsComp.create("SGS");
    
    var SGsComp sGSm := SGsComp.create("SGSm");

    var SyncPointList v_SyncPointList := {"init","attach","ZMMO","detach", c_poSyncPoint};
 
    sGS.start( f_sGS_NS_60_18_0002 () );
    sGSm.start( f_sGS_NS_60_18_0002_mirror () );

    f_serverSyncClientsAndStop(2,{"init","attach","ZMMO","detach", c_poSyncPoint});  
  } 

  function f_sGS_NS_60_18_0002 () runs on SGsComp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    
     f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_SGsSyncDefault());
    
    
    f_SubscriberParameters(v_subscriberParameters);

    v_ret := f_initSGs( mp_sctpIpAddr_SGs_MSCVLR, 
                             mp_sctpPortNumber_SGs_MSCVLR, 
                              mp_sctpIpAddr_SGs_MME_New,
                              mp_sctpPortNumber_SGs_MME_New);
    
  
       // Basic Location update procedure for combined imsi attach
    f_selfOrClientSyncAndVerdict("init",v_ret);  

       v_subscriberParameters.sgs.imsi := mp_sgs_imsi_1 ;
      v_subscriberParameters.sgs.lac := mp_s1AP_TAC_1 ;
      v_subscriberParameters.sgs.mccmnc := mp_s1AP_plmnIdentity_1 ;
//    v_subscriberParameters.sgs.rejectCuae := e_imsi_unknown_hlr ;
    
    //f_LUR_LUReject_rs(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("attach",v_ret);
    
    
    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    
    //f_BasicImsiDetachIndAndAck_rs(v_subscriberParameters);
    
    
    f_selfOrClientSyncAndVerdict("detach",v_ret);
    v_ret := f_shutdownSGs();
     f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
     f_disconnect4SelfOrClientSync();
   }

  function f_sGS_NS_60_18_0002_mirror () runs on SGsComp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    g_v_verificationFlag := true;
    
     f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_SGsSyncDefault());
    
    
    f_SubscriberParameters(v_subscriberParameters);
    //g_v_disable_heartbeat := true;
    v_ret := f_initSGs(mp_sctpIpAddr_SGs_MME_New,
                       mp_sctpPortNumber_SGs_MME_New,
                       mp_sctpIpAddr_SGs_MSCVLR, 
                       mp_sctpPortNumber_SGs_MSCVLR);
    
  
       // Basic Location update procedure for combined imsi attach
    f_selfOrClientSyncAndVerdict("init",v_ret);  

       v_subscriberParameters.sgs.imsi := mp_sgs_imsi_1 ;
      v_subscriberParameters.sgs.lac := mp_s1AP_TAC_1 ;
      v_subscriberParameters.sgs.mccmnc := mp_s1AP_plmnIdentity_1 ;
   // v_subscriberParameters.sgs.rejectCuae := e_imsi_unknown_hlr ;
    
    //f_LUR_LUReject_rs(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    
    //f_BasicImsiDetachIndAndAck_rs(v_subscriberParameters);
    
    //f_sleep(35.0);

    f_selfOrClientSyncAndVerdict("detach",v_ret);

     v_ret := f_shutdownSGs();
     f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
     f_disconnect4SelfOrClientSync();
  }

  testcase tc_s1ap_mirror () runs on MTC system TSI {

    var S1Comp  eNB := S1Comp.create("ENB");

    var S1Comp  eNBm := S1Comp.create("ENBm");

    eNB.start( f_ENB_s() );

    eNBm.start(f_ENBm_r() );

    f_serverSyncClientsAndStop(2,{"init",c_poSyncPoint});
  }

  function f_ENB_s () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var integer v_setupIndex := 1; 

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_d_s1CommonDefault := activate(d_S1ComDef());

   //SCTP Connection
    v_ret := f_initS1 (mp_sctpIpAddr_S1_ENB_UE,
                       mp_sctpPortNumber_ENB_UE, 
                       mp_sctpIpAddr_S1_MME_New, 
                       mp_sctpPortNumber_MME_New);

    f_S1_Initparameters();
    f_S10_Initparameters();
    f_enbParameters(v_enb_params);

    v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
    a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    v_ret := f_S1setupProcedure( v_enb_params);

    for (v_setupIndex :=2;v_setupIndex<5;v_setupIndex:=v_setupIndex+1){
      v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
      a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    }

    f_SubscriberParameters(v_subscriberParameters);
    f_InitS1HandoverParameters(v_subscriberParameters);

    v_subscriberParameters.s1.mME_UE_S1AP_ID := 1;
    v_subscriberParameters.s1.eNB_UE_S1AP_ID := 216;
    v_subscriberParameters.s1.handover.handoverType := ltetoutran;
    v_subscriberParameters.s1.handover.cause := a_Cause_radioNetwork(s1_intra_system_handover_triggered);
    v_subscriberParameters.s1.handover.targetID := a_TargetID_TargetRNC_ID(
                                                       a_TargetRNC_ID(a_LAI(
                                                         '62F210'O,
                                                         'C358'O,
                                                         omit),
                                                       '12'O,
                                                       125,
                                                       omit,
                                                       omit));
    v_subscriberParameters.s1.handover.sRVCCHOIndication := pSandCS;
    v_subscriberParameters.s1.handover.mSClassmark2 := '1103001000'O;

    f_selfOrClientSyncAndVerdict("init",v_ret);

    pt_s1ap.send(a_s1AP_HandoverRequiredSRVCC_test(v_subscriberParameters));

    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();
  }

  function f_ENBm_r () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    var octetstring v_nashex;
    var boolean v_mat_ret4releaseComplete;
    
    f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
   
    v_ret := f_preamble__S1m (v_enb_params);

    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    

    f_selfOrClientSyncAndVerdict("init",v_ret);

    pt_s1ap.receive(S1AP_PDU:?);

    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

    template S1AP_PDU a_s1AP_HandoverRequiredSRVCC_test (in template SubscriberParameters p_subscriberParameters) :=
    a_handoverPreparation_HandoverRequired_PDU ({
      a_HandoverRequiredIE_MME_UE_S1AP_ID (p_subscriberParameters.s1.mME_UE_S1AP_ID),
      a_HandoverRequiredIE_eNB_UE_S1AP_ID (p_subscriberParameters.s1.eNB_UE_S1AP_ID),
      //a_HandoverRequiredIE_HandoverType (p_subscriberParameters.s1.handover.handoverType),
      //a_HandoverRequiredIE_Cause (p_subscriberParameters.s1.handover.cause),
      //a_HandoverRequiredIE_TargetID (p_subscriberParameters.s1.handover.targetID),
      /*a_HandoverRequiredIE_Direct_Forwarding_Path_Availability(
        p_subscriberParameters.s1.handover.direct_Forwarding_Path_Availability
      ), */
       a_HandoverRequiredIE_SRVCCHOIndication (p_subscriberParameters.s1.handover.sRVCCHOIndication), 
      //a_HandoverRequiredIE_Source_ToTarget_TransparentContainer(
      //  char2oct("This is.")
      //),
      //      a_HandoverRequiredIE_Source_ToTarget_TransparentContainer_Secondary(),
      a_HandoverRequiredIE_MSClassmark2(p_subscriberParameters.s1.handover.mSClassmark2)
      //      a_HandoverRequiredIE_MSClassmark3(p_subscriberParameters.s1.handover.mSClassmark3)
      });

  modulepar charstring mp_sutAddress_ssh := "10.121.122.180";
  modulepar charstring mp_username_ssh := "root";
  modulepar charstring mp_password_ssh := "Mozart3";
  modulepar charstring mp_command_ssh := "ls";

  testcase tc_ext_f_exe_mml () runs on MTC system TSI {
    var charstring v_sutAddress_ssh := "";
    var charstring v_username_ssh := "";
    var charstring v_password_ssh := "";
    var charstring v_command_ssh := "";
    
    v_sutAddress_ssh := mp_sutAddress_ssh;
    v_username_ssh   := mp_username_ssh;
    v_password_ssh   := mp_password_ssh;
    v_command_ssh    := mp_command_ssh;
    
    log(v_sutAddress_ssh);
    log(v_username_ssh);
    log(v_password_ssh);
    log(v_command_ssh);
    f_exe_mml(v_sutAddress_ssh,v_username_ssh,v_password_ssh,v_command_ssh);
    
    f_sleep(3.0);
  }
  
 testcase Multi_CreatSessionRequest_testing () runs on MTC system TSI {
    
   var GTPV2Comp sGW := GTPV2Comp.create("SGW");
   var GTPV2Comp sGWm := GTPV2Comp.create("MME_SGW");
   var S3Comp sGSN := S3Comp.create("SGSN");
   var S3Comp sGSNm := S3Comp.create("MME_SGSN");
//   var SyncPointList v_SyncPointList_forLoop;
   var integer v_looptimesOfSync := 0;
//   var SyncPointList v_SyncPointList := {"init", "processes", "postamble"};

   var SyncPointList v_SyncPointList ; 
   v_SyncPointList[0] := "init";
   for(v_looptimesOfSync:=1; v_looptimesOfSync <= mp_timesOfCreatSession;  v_looptimesOfSync := v_looptimesOfSync + 1)
   {
     v_SyncPointList [v_looptimesOfSync] := "CreatSession" & int2str(v_looptimesOfSync);
   }
   
   v_SyncPointList [mp_timesOfCreatSession + 1] := "postamble";
   
   sGW.start( f_sGW_side() );
   sGWm.start( f_MME_SGW_side() );
   sGSN.start ( f_sGSN_side() );
   sGSNm.start ( f_MME_sGSN_side() );
   
   
   f_serverSyncClientsAndStop(4,v_SyncPointList)
   
  }
  
  function f_sGW_side() runs on GTPV2Comp {
  
    var FncRetCode v_ret := e_success;
    var integer i:= 0;
    var integer v_looptimesOfSync := 0;
    f_connect4SelfOrClientSync();
    f_preamble_S11( mp_sGW_Ipaddress, mp_sGW_port_number, mp_MME_Ipaddress, mp_MME_port_number );
    f_selfOrClientSyncAndVerdict("init",v_ret)
    
    for( i := 1; i <= mp_timesOfCreatSession; i:=i+1 ){
    
    // sGW receive CreatSessionRequest from MME
    pt_gtp.receive(a_CreateSessionRequest (
        *, //length
        *, //teid,
        *, //sequenceNumber,
        *,
        *,
        *,//a_MEI(?,a_IEInfo(0),p_subscriberParameters.s11_core7.mei),
        *,//a_ULI(?,a_IEInfo(0),e_ULIValue(?,*,*,*,*,*,*,*,*,*,omit)),
        *,
        *,
        *,
        *,
        *,//a_FTEID(?,a_IEInfo(1),a_FTEIDValue(?,*,*,p_subscriberParameters.s11_core7.pgwFteidValue.interfaceType,?,
                                    //  p_subscriberParameters.s11_core7.pgwFteidValue.ipv4Addr, omit,omit)),
        *, //a_AccessPointName(?,a_IEInfo(0), {p_subscriberParameters.s11_core7.accessPointLabel_1, p_subscriberParameters.s11_core7.accessPointLabel_2, p_subscriberParameters.s11_core7.accessPointLabel_3}),
        *,
        *,
        *,
        *,
        *, //check with Juhani,when s6a AA is ready,this could be checked
        *, //Linked EBI
        *, //Protocol Configuration Options
        *,
        *, //bearerContextsToBeRemoved
        *, //traceInformation
        *, //a_Recovery(?,a_IEInfo(0),a_RestartCounter(1)),
        *, //mMECSID
        *, //sGWCSID
        *, // ePDGFQCSID REL10.8
        *, //TWAN-FQ-CSID
        *,//a_UETimeZone(?,a_IEInfo(0),a_UETimeZoneValue(*,*)), //uETimeZone
        *, // userCSGInformation REL10.8
        *, //a_ChargingCharacteristics(?,a_IEInfo(0),a_ChargingCharacteristicsValue('3200'O,omit)),//chargingCharacteristics. same as AMBR, sent from HSS, should be checked when s6a AA is ready
        *, // mmeS4SgsnLDN REL10.8
        *, // sgwLDN REL10.8
        *, // ePdgLDN REL10.8
        *, //TWAN LDN
        *, // signallingPriorityIndication REL10.8
        *, //UE Local IP Address
        *, //UE UDP Port
        *, // maxMbrApnAmbr REL10.8
        *, // apco REL10.8
        *, //H(e)NB Local IP Address
        *, // mMES4SGSNIdentifier
        *, //  ePDGIPAddress 
        omit, //PresenceReportingAreaInformation,
        *,
        *,
        *  //privateExtension
        ));
    pt_gtp.receive;//UdpMessageInd
    // sGW send CreatSessionResponse to MME
//    pt_gtp.send(RawGtpV2Msg:'482100880000000100000500020002001000570009008b0001ee460a66fa2e5700090187000c0d8b0a66b9454f00050001c0a800017f000100005d002d0049000100050200020010005700090081000030390a660a0b5700090285000030390a66fa2e5e00040000000005030001000d880010000b746965746f656e61746f7203636f6d4a00040011223344'O);
    pt_gtp.send (a_CreateSessionResponseTest(0))  
    
    // sGW receive ModifyBearerRequest from MME
    pt_gtp.receive(
    a_ModifyBearerRequest (
    *, //messageLength
    *, //teid
    *, //sequenceNumber
    *,//a_MEI(?,a_IEInfo(0),p_subscriberParameters.s11_core7.mei), //MEI
    *,//a_ULI(?,a_IEInfo(0),e_ULIValue(?,?,?,?,?,?,?,?,?,?,omit)), //ULI
    *, //ServingNetwork
    *, //a_RATType(?,a_IEInfo(0),a_RATTypeValue( p_subscriberParameters.s11_core7.radioAccessType)), //RATType
    *,
    *,
    *, //AMBR
    *, //DelayValue
    *,
    //?, //a_BearerContextListMBReqIE(?,a_IEInfo(0),a_BearerContextListMBReq(?)),
    *, //bearerContextsToBeRemoved
    *, //a_Recovery(?,a_IEInfo(0),a_RestartCounter(8)),
    *,//a_UETimeZone(?,a_IEInfo(0),a_UETimeZoneValue(?,?)), //uETimeZone
    *, //mMEFQCSID
    *, //sGWFQCSID
      *, //userCSGInformation rel 10
      *, //mMEorS4_SGSNLDN rel 10
      *, //p_sGWLDN rel 10
      *, //p_maxMBRorAPN_AMBR rel 10
      *,  //privateExtension
      *, //heNBLocalIPAddress
      *, //heNBUDPPort
      * //mMES4SGSNIdentifier
    ,
    omit //PresenceReportingAreaInformation
    ));
    pt_gtp.receive;//UdpMessageInd
    // sGW send ModifyBearerResponse to MME;
//    pt_gtp.send(RawGtpV2Msg:'4823002f00000001000008000200020010005d00180049000100050200020010005700090081000030390a660a0b030001000d'O);

    pt_gtp.send( a_ModifyBearerResponseTest(0) );
    f_selfOrClientSyncAndVerdict("CreatSession" & int2str( i ) ,v_ret);
  
  }
  
    
    f_postamble_S11();
    f_selfOrClientSyncAndVerdict("postamble",v_ret);
    f_disconnect4SelfOrClientSync()  
  }
  
  function f_MME_SGW_side() runs on GTPV2Comp {
    
    var FncRetCode v_ret := e_success;
    var integer i:= 0;
    var integer v_looptimesOfSync := 0;
    f_connect4SelfOrClientSync();
    f_preamble_S11( mp_MME_Ipaddress, mp_MME_port_number, mp_sGW_Ipaddress, mp_sGW_port_number );
    f_selfOrClientSyncAndVerdict("init",v_ret);
   
    for( i := 1; i <= mp_timesOfCreatSession; i:=i+1 ){
    // MME send the CreatSessionRequest to SGW 
//    pt_gtp.send (RawGtpV2Msg:'482000d200000000000005000100080062120700000000f14c000800536801000000001056000d001862f271000162f271000000ea5300030062f2715200010006570009008a000000010a66bc645700090187000000000a66b6b847001f0003736777036e736e03636f6d066d6e63303137066d6363323632046770727380000100fc63000100014f00050001000000007f000100004800080000000002000000015d001f004900010005500016000409000000000000000000000000000000000000000003000100017200020080005f0002003200'O) ;
//    pt_gtp.send(a_CreateSessionRequestTest(0));
    pt_gtp.send(a_CreateSessionRequestTest_for_test(0));


    // MME reveive CreatSessionResponse from SGW 
    pt_gtp.receive (      
    a_CreateSessionResponse(
     *, //
     *,
     *,
     *,
     *,
     *,
	 *, //h(e)nbReportingAction 
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
     *,
	 *,
     *,
     omit, //presenceReportingAreaAction,
     *,
     *,
     *,
     *,
     *,
     * ));
    pt_gtp.receive;//UdpMessageInd
    // MME send ModifyBearerRequest to SGW
//    pt_gtp.send (RawGtpV2Msg:'482200310001ee4600000800570009008a000000010a66bc645d00120049000100055700090080000030390a8c435d720002008000'O);

     pt_gtp.send ( a_ModifyBearerRequestTest(0) );
    
    // MME receive ModifyBearerResponse from SGW;
    pt_gtp.receive(
   a_ModifyBearerResponse(
   *, // 
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   *,
   omit, //presenceReportingAreaAction,
   * ));
   pt_gtp.receive;//UdpMessageInd
   f_selfOrClientSyncAndVerdict("CreatSession" & int2str( i ) ,v_ret);
  }

    f_postamble_S11();
    f_selfOrClientSyncAndVerdict("postamble",v_ret);
    f_disconnect4SelfOrClientSync();
  }
  
  function f_sGSN_side( ) runs on S3Comp {
 
    var FncRetCode v_ret := e_success;
    var integer i:= 0;
    var integer v_looptimesOfSync := 0;
    f_connect4SelfOrClientSync();
    f_preambleGtpV1( mp_sGW_Ipaddress, mp_sGW_port_number + 1, mp_MME_Ipaddress, mp_MME_port_number + 1 );
    f_selfOrClientSyncAndVerdict("init",v_ret)
    
    for( i := 1; i <= mp_timesOfCreatSession; i:=i+1 ){
    
    // sGW receive CreatSessionRequest from MME
/*    
    pt_gtpv1.receive( a_EchoRequest(
          a_MessageHeaderGTP_SFlag,
          ?, //messageLength
    0, //teid
    a_HeaderOptionalPart_SPresented(0),  //sequenceNumber
          omit
    ) );
*/  
    pt_gtpv1.receive(a_sgsnContextRequest_for_Gtpv1(?))
    
    // sGW send CreatSessionResponse to MME
/*    
    pt_gtpv1.send(a_EchoResponse(
          a_MessageHeaderGTP_SFlag,
          0, //messageLength
    0, //teid
    a_HeaderOptionalPart_SPresented(0),  //sequenceNumber
     a_Recovery(8),
    omit
    ));
*/
    pt_gtpv1.send(a_updatePDPContextResponse_for_Gtpv1(0));
    
    // sGW receive ModifyBearerRequest from MME
 /*
    pt_gtpv1.receive(a_EchoRequest(
          a_MessageHeaderGTP_SFlag,
          ?, //messageLength
    0, //teid
    a_HeaderOptionalPart_SPresented(0),  //sequenceNumber
          omit
    ));
*/
    pt_gtpv1.receive(a_sgsnContextRequest_for_Gtpv1(?))
    // sGW send ModifyBearerResponse to MME;
/*    
    pt_gtpv1.send(a_EchoResponse(
          a_MessageHeaderGTP_SFlag,
          0, //messageLength
    0, //teid
    a_HeaderOptionalPart_SPresented(0),  //sequenceNumber
     a_Recovery(8),
    omit
    ));
*/
   pt_gtpv1.send(a_updatePDPContextResponse_for_Gtpv1(0));
  
   f_selfOrClientSyncAndVerdict("CreatSession" & int2str( i ) ,v_ret);
   
  }

    f_postambleGtpV1();
    f_selfOrClientSyncAndVerdict("postamble",v_ret);
    f_disconnect4SelfOrClientSync()  
 
 } 
 
  function f_MME_sGSN_side( ) runs on S3Comp {
    var FncRetCode v_ret := e_success;
    var integer i:= 0;
    var integer v_looptimesOfSync := 0;
    f_connect4SelfOrClientSync();
    f_preambleGtpV1( mp_MME_Ipaddress, mp_MME_port_number + 1, mp_sGW_Ipaddress, mp_sGW_port_number + 1 );
    f_selfOrClientSyncAndVerdict("init",v_ret);
   
    for( i := 1; i <= mp_timesOfCreatSession; i:=i+1 ){
    // MME send the CreatSessionRequest to SGW 
/*    
    pt_gtpv1.send ( a_EchoRequest(
          a_MessageHeaderGTP_SFlag,
          0, //messageLength
    0, //teid
    a_HeaderOptionalPart_SPresented(0),  //sequenceNumber
          omit
    ) ) ;
*/
    pt_gtpv1.send(a_sgsnContextRequest_for_Gtpv1(0));
    // MME reveive CreatSessionResponse from SGW 
/*    
    pt_gtpv1.receive ( a_EchoResponse(
          a_MessageHeaderGTP_SFlag,
          ?, //messageLength
    0, //teid
    a_HeaderOptionalPart_SPresented(0),  //sequenceNumber
     a_Recovery(8),
    omit
    ) );
*/
    pt_gtpv1.receive(a_updatePDPContextResponse_for_Gtpv1(?))
    
    // MME send ModifyBearerRequest to SGW
/*
    pt_gtpv1.send ( a_EchoRequest(
          a_MessageHeaderGTP_SFlag,
          0, //messageLength
    0, //teid
    a_HeaderOptionalPart_SPresented(0),  //sequenceNumber
          omit
    ));
*/
    pt_gtpv1.send(a_sgsnContextRequest_for_Gtpv1(0));  
    // MME receive ModifyBearerResponse from SGW;
/*    
    pt_gtpv1.receive(a_EchoResponse(
          a_MessageHeaderGTP_SFlag,
          ?, //messageLength
    0, //teid
    a_HeaderOptionalPart_SPresented(0),  //sequenceNumber
     a_Recovery(8),
    omit
    ));
*/
    pt_gtpv1.receive(a_updatePDPContextResponse_for_Gtpv1(?))
    
    f_selfOrClientSyncAndVerdict("CreatSession" & int2str( i ) ,v_ret);
    
    }
    f_postambleGtpV1();
    f_selfOrClientSyncAndVerdict("postamble",v_ret);
    f_disconnect4SelfOrClientSync();
 
 }
 
   testcase tc_testForNotValidVualue () runs on S1Comp system TSI {
     var octetstring v_corId;
     var bitstring v_temp;
     var integer v_index;
     var template LcsapSubscriberParameters v_subscriberParameters;
     f_SlsSubscriberParameters(v_subscriberParameters);
     log(v_subscriberParameters.correlation_ID);   
     v_corId := valueof( v_subscriberParameters.correlation_ID) ;
     v_temp := oct2bit(v_corId);
     for ( v_index := 5; v_index <= 8; v_index := v_index + 1 ){
        v_temp[v_index] := '1'B;
    }
    v_subscriberParameters.correlation_ID := bit2oct(v_temp);
    log(v_subscriberParameters.correlation_ID);
   }     
  

  testcase tc_Two_S1AP_WithinOneSctpMsg() runs on MTC system TSI {
    var S1Comp eNB;
    var S1Comp mME;

    eNB := S1Comp.create("ENB");
    mME := S1Comp.create("MME");
    eNB.start( f_S1AP_eNB() );
    mME.start( f_MME_mME() );
    f_serverSyncClientsAndStop(2,{"init",c_poSyncPoint});

  }

  function  f_S1AP_eNB() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var template CMessage v_bearerIdMsg;
    var integer v_setupIndex := 1; 

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_d_s1CommonDefault := activate(d_S1ComDef());

   //SCTP Connection
    v_ret := f_initS1 (mp_sctpIpAddr_S1_ENB_UE,
                       mp_sctpPortNumber_ENB_UE, 
                       mp_sctpIpAddr_S1_MME_New, 
                       mp_sctpPortNumber_MME_New);
    
    f_S1_Initparameters();
    f_S10_Initparameters();
    f_enbParameters(v_enb_params);

    //log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);
    g_v_extSyncTimeGuard := 20.0;
    //log ("g_v_extSyncTimeGuard = ", g_v_extSyncTimeGuard);

    v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
    a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    v_ret := f_S1setupProcedure( v_enb_params);

    for (v_setupIndex :=2;v_setupIndex<5;v_setupIndex:=v_setupIndex+1){
      v_enb_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
      a_ENB_ID_macroENB_ID(substr(f_generateUnique32bitIdentityForSimultaneouslySetups(v_setupIndex),12,20)),omit);
    }
    
    f_selfOrClientSyncAndVerdict("init",v_ret);
    
    pt_s1ap.send (
    a_initialUEMessage_InitialUEMessage_PDU({  
          a_InitialUEMessage_IE_eNB_UE_S1AP_ID(123),
          a_InitialUEMessage_IE_NAS_PDU(                   a_NAS_PDU(a_NASMessage_plainSMMessage(
                     a_PlainSMMessage(a_EPSBearerIdentity(3),
                       a_ProcedureTransactionIdentifier(100), 
                         a_SMMessage_pDNConnectivityReject(
                           a_PDNConnectivityReject(
                             a_ESMCause(
                               a_ESMCauseValue(e_service_option_temporarily_out_of_order_cause_0)),
                             a_ProtocolConfigurationOptions(1,
                               omit,
                               omit),
                               a_GPRSTimer3(e_steps_of_10_minutes,25) )))))),
      a_InitialUEMessage_IE_TAI(a_TAI(
                    '695847'O,
                    '1212'O,
                    omit 
                  )),
      a_InitialUEMessage_IE_EUTRAN_CGI(a_EUTRAN_CGI ('695847'O, hex2bit('2828282'H), omit)),
      a_InitialUEMessage_IE_RRC_Establishment_Cause(mo_Signalling),
      a_InitialUEMessage_IE_S_TMSI(a_S_TMSI('12'O, '11223344'O,omit)),
      a_InitialUEMessage_IE_CSG_Id('101010101010101010101010101'B),
      a_InitialUEMessage_IE_GUMMEI_ID(a_GUMMEI( '010203'O,'1234'O, '01'O, omit )),
          a_InitialUEMessage_IE_CellAccessMode(hybrid),
          a_InitialUEMessage_IE_TransportLayerAddress(a_TransportLayerAddress_normal('00001010011001101111101001001011'B)),
          a_InitialUEMessage_IE_RelayNode_Indicator(e_true)
      })
    )
    
    pt_s1ap.send (
    a_initialUEMessage_InitialUEMessage_PDU({  
          a_InitialUEMessage_IE_eNB_UE_S1AP_ID(123),
          a_InitialUEMessage_IE_NAS_PDU(                   a_NAS_PDU(a_NASMessage_plainSMMessage(
                     a_PlainSMMessage(a_EPSBearerIdentity(3),
                       a_ProcedureTransactionIdentifier(100), 
                         a_SMMessage_pDNConnectivityReject(
                           a_PDNConnectivityReject(
                             a_ESMCause(
                               a_ESMCauseValue(e_service_option_temporarily_out_of_order_cause_0)),
                             a_ProtocolConfigurationOptions(1,
                               omit,
                               omit),
                               a_GPRSTimer3(e_steps_of_10_minutes,25) )))))),
      a_InitialUEMessage_IE_TAI(a_TAI(
                    '695847'O,
                    '1212'O,
                    omit 
                  )),
      a_InitialUEMessage_IE_EUTRAN_CGI(a_EUTRAN_CGI ('695847'O, hex2bit('2828282'H), omit)),
      a_InitialUEMessage_IE_RRC_Establishment_Cause(mo_Signalling),
      a_InitialUEMessage_IE_S_TMSI(a_S_TMSI('12'O, '11223344'O,omit)),
      a_InitialUEMessage_IE_CSG_Id('101010101010101010101010101'B),
      a_InitialUEMessage_IE_GUMMEI_ID(a_GUMMEI( '010203'O,'1234'O, '01'O, omit )),
          a_InitialUEMessage_IE_CellAccessMode(hybrid),
          a_InitialUEMessage_IE_TransportLayerAddress(a_TransportLayerAddress_normal('00001010011001101111101001001011'B)),
          a_InitialUEMessage_IE_RelayNode_Indicator(e_true)
      })
    )

    pt_s1ap.send (
    a_initialUEMessage_InitialUEMessage_PDU({  
          a_InitialUEMessage_IE_eNB_UE_S1AP_ID(123),
          a_InitialUEMessage_IE_NAS_PDU(                   a_NAS_PDU(a_NASMessage_plainSMMessage(
                     a_PlainSMMessage(a_EPSBearerIdentity(3),
                       a_ProcedureTransactionIdentifier(100), 
                         a_SMMessage_pDNConnectivityReject(
                           a_PDNConnectivityReject(
                             a_ESMCause(
                               a_ESMCauseValue(e_service_option_temporarily_out_of_order_cause_0)),
                             a_ProtocolConfigurationOptions(1,
                               omit,
                               omit),
                               a_GPRSTimer3(e_steps_of_10_minutes,25) )))))),
      a_InitialUEMessage_IE_TAI(a_TAI(
                    '695847'O,
                    '1212'O,
                    omit 
                  )),
      a_InitialUEMessage_IE_EUTRAN_CGI(a_EUTRAN_CGI ('695847'O, hex2bit('2828282'H), omit)),
      a_InitialUEMessage_IE_RRC_Establishment_Cause(mo_Signalling),
      a_InitialUEMessage_IE_S_TMSI(a_S_TMSI('12'O, '11223344'O,omit)),
      a_InitialUEMessage_IE_CSG_Id('101010101010101010101010101'B),
      a_InitialUEMessage_IE_GUMMEI_ID(a_GUMMEI( '010203'O,'1234'O, '01'O, omit )),
          a_InitialUEMessage_IE_CellAccessMode(hybrid),
          a_InitialUEMessage_IE_TransportLayerAddress(a_TransportLayerAddress_normal('00001010011001101111101001001011'B)),
          a_InitialUEMessage_IE_RelayNode_Indicator(e_true)
      })
    )
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();
   }

  function f_MME_mME() runs on S1Comp {
    var FncRetCode v_ret := e_success;
    var template EnbParameters v_enb_params;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_v_verificationFlag := true;

    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
    v_ret := f_preamble__S1m (v_enb_params);

    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)

    f_selfOrClientSyncAndVerdict("init",v_ret);
    
    pt_s1ap.receive;
    
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();

  }


  testcase tc_S1APRaw_Mirror() runs on MTC system TSI {
    var S1Comp v_S1ap, v_mme1, v_mme2;
  
    v_S1ap :=  S1Comp.create("S1AP");              //server

    v_mme1 :=S1Comp.create("MME1");

    v_S1ap.start( f_S1APRaw() );  

    v_mme1.start( f_S1APRaw_Mirror() );     



    f_serverSyncClientsAndStop(2,{c_prSyncPoint,c_poSyncPoint});

  }

  import from S1apTestCases { modulepar mp_octetMsg};
  import from BssappCodecTestCases { template a_RawGtpV2Msg};
  function f_S1APRaw() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    f_connect4SelfOrClientSync ();
    g_v_verificationFlag := true;
    g_v_numberOfSCTPconnections:=1;  
    v_ret := f_initS1(  mp_localAddress, 
                                 50071, 
                                 mp_localAddress,
                                 60081);

    f_selfOrClientSyncAndVerdictPR (c_prSyncPoint, v_ret);
   
    pt_s1ap.send(RawGtpV2Msg: a_RawGtpV2Msg (mp_octetMsg));
    f_selfOrClientSyncAndVerdictPO (c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync ();

  }



  function f_S1APRaw_Mirror() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    f_connect4SelfOrClientSync ();  
    g_v_verificationFlag := false;
    g_v_numberOfSCTPconnections:=1;    
//    g_v_enable_heartbeat_ind := true;
   g_v_start_nonstdsctp := true;
    v_ret := f_initS1(  mp_localAddress, 
                                 60081, 
                                 mp_localAddress,
                                 50071 );
    f_selfOrClientSyncAndVerdictPR (c_prSyncPoint, v_ret);

    pt_s1ap.receive(S1AP_PDU:?);
    f_selfOrClientSyncAndVerdictPO (c_poSyncPoint, v_ret);

    f_disconnect4SelfOrClientSync ();
    
  }

  import from GtpV2CodecTestCasesCore3 {modulepar mp_hexDump3;};
  import from GtpV2CodecTestTemplatesCore7 {template a_RawGtpV2MsgCodec;};
  testcase tc_Gtpv2Raw_mirror() runs on MTC system TSI {
    
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");

    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");

    var SyncPointList v_SyncPointList := {
      "init",
      c_poSyncPoint
    };

    sGW.start(f_Gtpv2Raw_mirror());

    sGWm.start(f_Gtpv2Raw());

    f_serverSyncClientsAndStop( 2 , v_SyncPointList );

  }

  function f_Gtpv2Raw () runs on GTPV2Comp {
var FncRetCode v_ret := e_success;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    v_ret := f_preamble_S11 ( mp_udpIpAddr_S11_SGW, 
                              mp_udpPortNumber_S11_SGW, 
                              mp_udpIpAddr_S11_MME_New, 
                              mp_udpPortNumber_S11_MME_New );
    g_d_s11CommonDefault := activate(d_GtpV2CommonDefault()); 

    f_selfOrClientSyncAndVerdict("init",v_ret);

    pt_gtp.send(a_RawGtpV2MsgCodec(mp_hexDump3));

    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_Gtpv2Raw_mirror () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    if (f_preamble_S11 ( mp_udpIpAddr_S11_MME_New,
                         mp_udpPortNumber_S11_MME_New,
                         mp_udpIpAddr_S11_SGW,
                         mp_udpPortNumber_S11_SGW) != e_success){
      setverdict(fail);
    }
    f_selfOrClientSyncAndVerdict("init",v_ret);

    pt_gtp.receive(GtpV2MsgCore7:?);
    pt_gtp.receive;//UdpMessageInd
    
    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  testcase tc_DiameterRaw_Mirror() runs on MTC system TSI {
    var DIAMComp hSS := DIAMComp.create("HSS");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    hSS.start( f_DiameterRaw() );  

    hSSm.start( f_DiameterRaw_Mirror() );     


    f_serverSyncClientsAndStop(2,{c_prSyncPoint,"data",c_poSyncPoint});

  }

  import from DiameterCodecTestCases3GPP {modulepar mp_DiameterhexDump};
  function f_DiameterRaw() runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;

    f_SubscriberParameters(v_subscriberParameters);
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress := {
    a_ServedPartyIpAddress({ipv4 := "127.0.0.1"}, 0),
    a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000001'O}, 0) };
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters := e_operatorSpecific150;
    v_subscriberParameters.s6a.r_subscriptionData := a_SubscriptionData(a_SubscriptionDataGrp3GPP(v_subscriberParameters,0),0);
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0));
    
    f_connect4SelfOrClientSync();
    v_ret := f_preambleDiameter( v_subscriberParameters, 
                                 mp_sctpIpAddrS6aHLR, mp_sctpPortNumberS6aHLR, 
                                 mp_sctpIpAddrS6aMMENew, mp_sctpPortNumberS6aMMENew );

    v_subscriberParameters.s6a.r_serviceSelection := DiameterS6AVPTemplates.a_ServiceSelection("sgw.nsn.com.mnc001.mcc262.gprs",0);
    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict(c_prSyncPoint,g_v_s6ret);

    pt_diameter.send(RawDiameterMsg:mp_DiameterhexDump);
    f_selfOrClientSyncAndVerdict("data",g_v_s6ret);

    f_Postamble_S6a(v_subscriberParameters);
    
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,g_v_s6ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_DiameterRaw_Mirror() runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;

    f_SubscriberParameters(v_subscriberParameters);
    
    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;

    v_ret := f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew,
                        mp_sctpPortNumberS6aMMENew,
                        mp_sctpIpAddrS6aHLR,
                        mp_sctpPortNumberS6aHLR);

    f_sleep(5.0);
    pt_diameter.send(RawDiameterMsg:'01010000bc80000101000000000db01783000014720000010b0000000c00005678000001014000000e00010a66b6640000000001084000001a6f726967696e686f73742e6d6d6d2e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010d0000000d464c4558490000000000010a4000000c00006f2a000001094000000c000028af00000104400000200000010a4000000c000028af000001024000000c01000023000001024000000c01000023'O);

    pt_diameter.receive;

    //v_subscriberParameters.s6a.r_serviceSelection := DiameterS6AVPTemplates.a_ServiceSelection("sgw.nsn.com.mnc001.mcc262.gprs",0);
    f_selfOrClientSyncAndVerdict(c_prSyncPoint,v_ret);

    pt_diameter.receive(DiameterS6Message:?);
    f_selfOrClientSyncAndVerdict("data",v_ret);
    
    // DPR / DPA
    pt_diameter.receive;
    f_sleep(0.1);
    pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);

    //f_Postamble_S6a(v_subscriberParameters);
    f_Postamble_S6a_WithoutShutdown();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  testcase NS_48_32_0002Verification() runs on MTC system TSI {
    var S1Comp eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");
    var S3Comp sGSN := S3Comp.create("SGSN");


    var S1Comp  eNBm := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");
    var S3Comp  sGSNm := S3Comp.create("SGSNm");
  
    connect (eNB:pt_CM,sGSN:pt_CM);


    eNBm.start( f_eNB_NS_48_32_0002_mirror () );
    sGWm.start( f_sGW_NS_48_32_0002_mirror () );
    hSSm.start( f_hSS_NS_48_32_0002_mirror () );
    sGSNm.start( f_sGSN_NS_48_32_0002_mirror () );

    eNB.start( f_eNB_NS_48_32_0002 () );
    sGW.start( f_sGW_NS_48_32_0002  () );
    hSS.start( f_hSS_NS_48_32_0002  () );
    sGSN.start( f_sGSN_NS_48_32_0002 () );
  
    f_serverSyncClientsAndStop(8,{"init","attach","uerelease","coll","ZMMO","tau","detach", c_poSyncPoint});

  }

/******************************* s1*********************************************/ 

  function f_eNB_NS_48_32_0002  () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
  var template SubscriberParameters v_subscriberParameters2;
    var template SubscriberParametersTable v_subscriberParametersTable;
  var template EnbParameters v_enb_params;
  var template CMessageList v_guti;    

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    f_connect4SelfOrClientExternalSync(30.0);

    //SCTP Connection
    f_enbParameters(v_enb_params);
    v_ret := f_preamble_S1 (v_enb_params);
    f_SubscriberParameters(v_subscriberParameters);
  f_SubscriberParameters(v_subscriberParameters2);
    f_selfOrClientSyncAndVerdict("init",v_ret);  
  
  v_subscriberParameters2.s1.mobileIdentity := a_EPSMobileIdentity('1111'B, e_even, e_guti, mp_old_guti);
  //guti is sent to the SGSN component. so that rac and lac values can be checked even guti is changed.
  v_guti := {
    {
      info := "GUTI",
      msg := {EPSMobileIdentity := v_subscriberParameters2.s1.mobileIdentity}
    }
  }
  pt_CM.send(v_guti)
          
    //Attach Procedure
    v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("attach",v_ret);  
    
    //Context Release
    v_subscriberParameters.s1.mME_UE_S1AP_ID := 4;

    v_ret :=  f_s1_UEContextRelease_srs(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);  
    
    //Tau Procedure
    v_subscriberParameters.s1.S1AP_TAC := mp_s1AP_TAC_2;
    v_subscriberParameters.s1.epsUpdateActiveFlag := e_bearer_establishment_requested;
    v_ret:= f_s1_TauReq_InitialUe_s_s (v_subscriberParameters); //Tau Req
  if( v_ret == e_success){ 
      v_ret:= f_s1_InitialContextSetupReq_TauAccept_s_r(v_subscriberParameters);}
    
    if (v_ret == e_success){  
        v_subscriberParameters2.s1.sequenceNumber_UL := 1;
        v_subscriberParameters2.s1.epsUpdateActiveFlag := e_no_bearer_establishment_requested;
      v_subscriberParameters2.s1.epsBearerIdentity :=5;
    v_subscriberParameters2.s1.eNB_UE_S1AP_ID := mp_s1AP_eNB_UE_S1AP_ID_2;
        // v_ret := f_s1_TauReq_InitialUe_for_intersystem_TAU_s_s(v_subscriberParameters);
    v_ret := f_s1_TauReq_InitialUe_withoutLastVisitedTAI_s(v_subscriberParameters2);}
  if( v_ret == e_success){
    v_ret := f_s1_UEContextReleaseCommand_rs(v_subscriberParameters2);} 
    
  f_selfOrClientSyncAndVerdict("coll",v_ret);
    f_selfOrClientExternalSyncAndVerdict("ZMMO",v_ret);  

    // Second Tau Procedure
    
    v_ret := f_s1_BasicTrackingAreaUpdateWithSecurity_InitialUe(v_subscriberParameters);
//    v_ret := f_s1_UEContextReleaseCommand_rs(v_subscriberParameters)
    f_selfOrClientSyncAndVerdict("tau",v_ret)

    if(v_ret == e_success){
       f_InitForSending_WithSecurity(v_subscriberParameters, g_v_securityParameters);
 v_subscriberParametersTable := {v_subscriberParameters};
pt_CM.send(v_subscriberParametersTable);
    }
    //Detach Procedure
    v_ret := f_s1_BasicDetachWithSecurity(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("detach",v_ret);


    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();

  }

 /************************** s11*********************/ 

  function f_sGW_NS_48_32_0002  () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    v_ret := f_preamble_S11 ( mp_udpIpAddr_S11_SGW, 
                              mp_udpPortNumber_S11_SGW, 
                              mp_udpIpAddr_S11_MME_New, 
                              mp_udpPortNumber_S11_MME_New );
    f_SubscriberParameters(v_subscriberParameters);
    g_d_s11CommonDefault := activate(d_GtpV2CommonDefault());  
    f_selfOrClientSyncAndVerdict("init",v_ret);  

    //Subscriber is attached
    v_ret := f_s11_CreateSessionBasic (v_subscriberParameters);
    if (v_ret == e_success){
      v_ret :=  f_s11_ModifyBearerBasic (v_subscriberParameters);
    }
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    //To idle state
    f_s11_ReleaseAccessBearersBasic(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);

    //Collision  
    f_selfOrClientSyncAndVerdict("coll",v_ret);
  f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
//  v_ret := f_s11_CreateSessionBasic (v_subscriberParameters);
//    if (v_ret == e_success){
  //v_ret :=  f_s11_ModifyBearerBasic_ServiceRequest (v_subscriberParameters); 
    f_selfOrClientSyncAndVerdict("tau",v_ret);  

    //Detach
    v_ret := f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("detach",v_ret);


    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
      
  }

 /********************** S6A interface **************************************/

  function f_hSS_NS_48_32_0002 () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();

    v_ret := f_preambleDiameter( v_subscriberParameters,
                                 mp_sctpIpAddrS6aHLR, 
                                 mp_sctpPortNumberS6aHLR, 
                                 mp_sctpIpAddrS6aMMENew, 
                                 mp_sctpPortNumberS6aMMENew );
      
    f_selfOrClientSyncAndVerdict("init",v_ret);  

    v_ret := f_BasicUpdateLocationWithAuthentication(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);  
    f_selfOrClientSyncAndVerdict("coll",v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    f_selfOrClientSyncAndVerdict("tau",v_ret);  
    f_selfOrClientSyncAndVerdict("detach",v_ret);


    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  /********************* Gn *************************************/
     
   function f_sGSN_NS_48_32_0002( ) runs on S3Comp {

   var FncRetCode v_ret := e_success;
   var template SubscriberParameters v_subscriberParameters;
   var UnicodeText1to255 v_mnc_value;
   var CMessageList v_gutiMsg;
   var octetstring v_guti := 'ffff'O;

   f_connect4SelfOrClientSync();
   
   f_preambleGtpV1( mp_udpIpAddr_S3Gn_SGSN, 
                    mp_udpPortNumber_S3Gn_SGSN, 
                mp_udpIpAddr_S3Gn_MME_New, 
                    mp_udpPortNumber_S3Gn_MME_New );

   f_SubscriberParameters(v_subscriberParameters);
   g_def_GtpV1Default := activate( GtpV1Defaults.d_gtpV1Default(true));
   f_selfOrClientSyncAndVerdict("init",v_ret);  
   v_ret := f_receiveCM(?,v_gutiMsg);
   if (v_ret == e_success){
     v_guti := v_gutiMsg[0].msg.EPSMobileIdentity.digits;
   }
   log(v_guti);
   f_selfOrClientSyncAndVerdict("attach", v_ret);
   f_selfOrClientSyncAndVerdict("uerelease",v_ret);
   //Incoming TAU
   f_gutiMap2RaiPtmsi(v_subscriberParameters, v_guti );
   v_subscriberParameters.gn.pTMSISignature := '800BBF'O; //this have to be same value than in TAU Request!!
   //v_ret := f_gtpv1_SGSNContextRequest_rsr_with_system_failure_cause(v_subscriberParameters);
   
   f_selfOrClientSyncAndVerdict("coll", v_ret);
   f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
   f_selfOrClientSyncAndVerdict("tau",v_ret);
   f_selfOrClientSyncAndVerdict("detach",v_ret);
 
   f_postambleGtpV1();      
   f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
   f_disconnect4SelfOrClientSync();
  }



  function f_eNB_NS_48_32_0002_mirror () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
        
    v_ret := f_preamble__S1m (v_enb_params);
    
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    
    f_selfOrClientSyncAndVerdict("init",v_ret);
    

    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200040008000200d8001a0025240752008322540d7dc410205734531870ade7b41001221004554410001120130050246700'O)
    
    //AuthResp
    pt_s1ap.receive;
    // SecurityModeCommand
    pt_s1ap.send(RawGtpV2Msg:'000b40240000030000000200040008000200d8001a001110377fc4276600075d020005a020a80060'O)
    //SecurityModeComplete
    pt_s1ap.receive;

    //RabSetupList (Attach accept) 0a66fa46 -> 0A66B630 -> 0a660a0b
    pt_s1ap.send(RawGtpV2Msg:'00090080bc000007000000034001380008000200d8004200060803e82007d00018006c0000340067450009070f800a660a0b000030395827c8ad5b300107420149064062f280000100345201c10509ffffffff0c03736777036e736e03636f6d0501c0a800015d0150300c22111f939602010648ffff003203815e020102500bf662f280c35833c0c00109172c5949006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069006a400100'O)

    //pt_s1ap.send(RawGtpV2Msg:'000900809d0000070000000200030008000200d8004200060807d02003e80018004e0000340049450009040f800a660a0b000030393a07420149064085f817000100205201c10909ffffffff000000000c03736777036e736e03636f6d05010a66b630500bf685f81722223303000003006b00050000000000004900200000000000000000000000000000000000000000000000000000000000000000006a400100'O) //SubscriberProfileIDforRFP 006a000101 added
//from error log
//                            00090080b60000060000000200040008000200d8004200060803e82007d00018006c0000340067450009070f800a794371000030395827513847e30107420149064062f210000100345201c10509ffffffff0c03736777036e736e03636f6d0501c0a800015d0150300c22111f939602010648ffff003203815e020102500bf662f210c3500ac1c00004172c5949006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069'O)

    //RabSetUpListResp
    pt_s1ap.receive;

    //Attach Complete
    pt_s1ap.receive;

    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    pt_s1ap.receive;
    f_sleep (0.1);
    //ContextReleaseCommand  
  //pt_s1ap.send(RawGtpV2Msg:'0017001100000200630004000400d8000240020060'O);
    pt_s1ap.send(RawGtpV2Msg:'0017001100000200630004000400d8000240020060'O);
    //ContextReleaseComplete
    pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("uerelease",v_ret);

    //TrackingAreaUpdateReq
    pt_s1ap.receive;
    //TrackingAreaUpdateAccept  rrr 0a794371 --> 0A66B630 -> 0a660a0b
    pt_s1ap.send(RawGtpV2Msg:'00090080870000070000000200050008000200d8004200060803e82007d0001800380000340033450009070f800a660a0b000030392427c5c8160e020749005a49500bf662f210c3500ac1c0000554064062f2100002172c5949006b0005080004000000490020bbb4e8454fa4adb63547744474d67b1ed4a1624e573e10fd4ebf22dbe2564385006a400100'O);

    //TrackingAreaUpdateReq
    pt_s1ap.receive;
    pt_s1ap.send(RawGtpV2Msg:'001700110000020063000500064001390002400126'O)

    //ContextReleaseComplete
    pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("coll",v_ret);


   f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    
    //TrackingAreaUpdateReq  0a794371 --> 0A66B630 -> 0a660a0b
    pt_s1ap.receive;
    pt_s1ap.send(RawGtpV2Msg:'00090080870000070000000200070008000200d8004200060803e82007d0001800380000340033450009070f800a660a0b0000303924270786e66f020749005a49500bf662f210c3500ac1c0000754064062f2100002172c5949006b00050800040000004900206ebbe73f49ca89939178e9c5ccb999c499dc4e346f0433878b4de5062ed26adc006a400100'O)
 
    //RabSetupItemRes
    pt_s1ap.receive;
    
    //TrackingAreaUpdateCompleted
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("tau",v_ret);
    //DetachRequest
    pt_s1ap.receive;
    pt_s1ap.send(RawGtpV2Msg:'000b401d000003000000034001530008000200d8001a00090827c5290b54030746'O)

    //UEContextRelease command
    pt_s1ap.send(RawGtpV2Msg:'001700110000020063000504015300d80002400124'O)
    pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("detach",v_ret);
    
    f_sleep (4.0);
    
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }
  
  /***************** S11 interface *****************/

  function f_sGW_NS_48_32_0002_mirror  () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    
    var octetstring v_createSesson := 
     '482000d200000000000236000100080062220300000000f14c0008'O &
     '0053680100000000f156000d001862f232000162f232000000ea53'O &
     '00030062f2325200010006570009008a80000056'O &
     f_RealIP2Oct(mp_localAddress) & //0a667ce4
     '5700090187000000000a66b6b847001f0003736777036e736e03636f6d066d6e63303233066d6363323632046770727380000100fc63000100014f00050001000000007f000100004800080000000002000000015d001f004900010005500016004409000000000000000000000000000000000000000003000100017200020021015f0002000b00'O;

    var octetstring v_modifyBearer := 
    '482200310001ee4600023800570009008a80000056'O &
    f_RealIP2Oct(mp_localAddress) & //0a667ce4
    '5d00120049000100055700090080000030390a8c435d720002002101'O;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    if (f_preamble_S11 ( mp_udpIpAddr_S11_MME_New,
                         mp_udpPortNumber_S11_MME_New,
                         mp_udpIpAddr_S11_SGW,
                         mp_udpPortNumber_S11_SGW) != e_success){
      setverdict(fail);
    }
    f_selfOrClientSyncAndVerdict("init",v_ret);


    f_sleep (3.0);
    
    //createSessionRequest
    pt_gtp.send(RawGtpV2Msg:v_createSesson)
    
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
    
    // Modify Bearer Request
    pt_gtp.send(RawGtpV2Msg:v_modifyBearer)
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd

    f_selfOrClientSyncAndVerdict("attach",v_ret);


    pt_gtp.send(RawGtpV2Msg:'48aa00120001ee4600000800'O) //560006000862f2100001
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);
    f_selfOrClientSyncAndVerdict("coll",v_ret);

    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);

    f_sleep(2.0);
    //Modify                c0a86c0b   ->  83cfac8d
    //pt_gtp.send(RawGtpV2Msg:'482200480001ee460000060056000d001862f280000262f280000000ea570009008a030000e4c0a865815d00120049000100055700090080000030390a8c435d7200020008005f0002003200'O)
    //pt_gtp.receive;


    f_selfOrClientSyncAndVerdict("tau",v_ret);

    pt_gtp.send(RawGtpV2Msg:'48240013030000030000090049000100054d0002000800'O)
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
    
    f_selfOrClientSyncAndVerdict("detach",v_ret);

    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  /////////////////////// S6A interface ///////////////////////////////////////////7

  function f_hSS_NS_48_32_0002_mirror () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
    f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew,
                                     mp_sctpPortNumberS6aMMENew,
                                     mp_sctpIpAddrS6aHLR,
                                     mp_sctpPortNumberS6aHLR);
    
    //CER
    f_sleep (16.0);
    pt_diameter.send(RawDiameterMsg:'01010000bc80000101000000000db01783000014720000010b0000000c00005678000001014000000e00010a66b6640000000001084000001a6f726967696e686f73742e6d6d6d2e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010d0000000d464c4558490000000000010a4000000c00006f2a000001094000000c000028af00000104400000200000010a4000000c000028af000001024000000c01000023000001024000000c01000023'O)
    
    pt_diameter.receive;
    
    f_selfOrClientSyncAndVerdict("init",v_ret);
    
    f_sleep (1.0);
    pt_diameter.send(RawDiameterMsg:'01010001dcc000013e010000230000000100000001000001074000002c616363657373706f696e74372e61636d652e636f6d3b313837363534333231303b353233000001154000000c00000000000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d0000012540000016686d736578616d706c652e636f6d00000000011b400000136578616d706c652e636f6d00000000014000001d616363657373706f696e74372e61636d652e636f6d0000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000010000027680000010000028af0202020200000580c000003c000028af00000582c0000010000028af0000000100000584c0000010000028af0000000200000583c000000e000028af1234000000000581c000003c000028af00000582c0000010000028af0000000100000584c0000010000028af0000000200000583c000000e000028af123400000000057fc000000f000028af456789000000011c40000034000001184000001d616363657373706f696e74372e61636d652e636f6d000000000000214000000b012345000000011a4000001d616363657373706f696e74372e61636d652e636f6d000000'O)

pt_diameter.receive;


pt_diameter.send(RawDiameterMsg:'01010001d8c000013c01000023000000640000000c000001074000002c616363657373706f696e74372e61636d652e636f6d3b313837363534333231303b353233000001154000000c00000001000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d0000012540000016686d736578616d706c652e636f6d00000000011b400000136578616d706c652e636f6d00000000014000001d616363657373706f696e74372e61636d652e636f6d0000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000010000027680000010000028af0202020200000579c0000044000028af0000057ac0000012000028af3131323233330000000005bfc000000f000028af987654000000057bc0000014000028af343435353636373700000408c0000010000028af000003ec0000057dc0000010000028af000000020000057fc000000f000028af45678900000005d1c0000010000028af21436587000005d580000010000028af000000010000011c40000034000001184000001d616363657373706f696e74372e61636d652e636f6d000000000000214000000b012345000000011a4000001d616363657373706f696e74372e61636d652e636f6d000000'O)

 pt_diameter.receive;
 
 
 f_selfOrClientSyncAndVerdict("attach",v_ret);
 f_selfOrClientSyncAndVerdict("uerelease",v_ret);
 f_selfOrClientSyncAndVerdict("coll",v_ret);
 f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
 f_selfOrClientSyncAndVerdict("tau",v_ret);
 f_selfOrClientSyncAndVerdict("detach",v_ret);

    

    // DPR / DPA
 pt_diameter.receive;
 f_sleep(0.2);
 pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);
 
 f_sleep(0.5);
 
 //f_Postamble_S6a(v_subscriberParameters);
 f_Postamble_S6a_WithoutShutdown();
 //f_sendShutdownS6a(); // This sends SCTP shutdown primitive
 f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
 f_disconnect4SelfOrClientSync();

  }

   function f_sGSN_NS_48_32_0002_mirror( ) runs on S3Comp {

   var FncRetCode v_ret := e_success;
   //var template SgsnSubscriberParameters v_subscriberParameters;
   //var UnicodeText1to255 v_mnc_value;
   var CMessageList v_gutiMsg;
   var octetstring v_guti := 'ffff'O;

   f_connect4SelfOrClientSync();
   
   f_preambleGtpV1( mp_udpIpAddr_S3Gn_MME_New, 
                    mp_udpPortNumber_S3Gn_MME_New,
                    mp_udpIpAddr_S3Gn_SGSN, 
                    mp_udpPortNumber_S3Gn_SGSN 
                     );

   //f_InitSgsnSubscriberParameters(v_subscriberParameters);
   g_def_GtpV1Default := activate( GtpV1Defaults.d_gtpV1Default(true));
   f_selfOrClientSyncAndVerdict("init",v_ret);  



   log(v_guti);
   f_selfOrClientSyncAndVerdict("attach", v_ret);
   f_selfOrClientSyncAndVerdict("uerelease",v_ret);
   //Incoming TAU
   //pt_gtpv1.send(RawGtpV1Msg:'3232002200000000000200000362f2302222c005c03300c20c800bbf0dfe11070000058500040ac80402'O);
   //pt_gtpv1.receive;

    f_sleep(2.0); //30000e5 --> 7000005
    //pt_gtpv1.send(RawGtpV1Msg:'32340006070000050002000001cc'O);
    


   
   f_selfOrClientSyncAndVerdict("coll", v_ret);
   f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
   f_selfOrClientSyncAndVerdict("tau",v_ret);
   f_selfOrClientSyncAndVerdict("detach",v_ret);
 
   f_postambleGtpV1();      
   f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
   f_disconnect4SelfOrClientSync();
  }


template DiameterS6Message a_AirMsg_send := a_AirMsg(0,1,1,1,DiameterBase_Templates.a_SessionId(a_sessionId,0),
            omit, // [+] 3GPP 29.272 REL10.6
            a_AuthSessionState(STATE_MAINTAINED,0),  
            a_OriginHost(a_origHost,0),    
            a_OriginRealm(a_origRealm,0),
            a_DestinationHost(a_destHost,0),            
            a_DestinationRealm(a_destRealm,0),           
            a_UserName(a_origHost,0),      
            {a_SupportedFeatures(a_SupportedFeaturesGrp(0),0)},
            a_RequestedEUtranAuthInfo(
                                      a_RequestedEUtranAuthInfoGrp(
                                        a_NumberOfRequestedVectors(1,0),
          a_ImmediateResponsePreferred(2,0),
          a_ReSynchronizationInfo('1234'O,0)
          ),0
              ),
            a_RequestedUtranGeranAuthInfo(
              a_RequestedUtranGeranAuthInfoGrp(
          a_NumberOfRequestedVectors(1,0),
          a_ImmediateResponsePreferred(2,0),
          a_ReSynchronizationInfo('1234'O,0)
          ),0
              ),  
            a_VisitedPlmnId('456789'O,0),
          //a_RequestingNodeType(MME,0),          
            {a_ProxyInfo(a_origHost,'012345'O,0)},
            {a_RouteRecord(a_origHost,0)},
            omit)



template DiameterS6Message a_AirMsg_receive := a_AirMsg(?,1,1,1,DiameterBase_Templates.a_SessionId(a_sessionId,?),
            omit, // [+] 3GPP 29.272 REL10.6
            a_AuthSessionState(STATE_MAINTAINED,?),  
            a_OriginHost(a_origHost,?),    
            a_OriginRealm(a_origRealm,?),
            a_DestinationHost(a_destHost,?),            
            a_DestinationRealm(a_destRealm,?),           
            a_UserName(a_origHost,?),      
            {a_SupportedFeatures(a_SupportedFeaturesGrp(?),?)},
            a_RequestedEUtranAuthInfo(
                                      a_RequestedEUtranAuthInfoGrp(
                                        a_NumberOfRequestedVectors(1,?),
          a_ImmediateResponsePreferred(2,?),
          a_ReSynchronizationInfo('1234'O,?)
          ),?
              ),
            a_RequestedUtranGeranAuthInfo(
              a_RequestedUtranGeranAuthInfoGrp(
          a_NumberOfRequestedVectors(1,?),
          a_ImmediateResponsePreferred(2,?),
          a_ReSynchronizationInfo('1234'O,?)
          ),?
              ),  
            a_VisitedPlmnId('456789'O,?),
          //a_RequestingNodeType(MME,?),          
            {a_ProxyInfo(a_origHost,'012345'O,?)},
            {a_RouteRecord(a_origHost,?)},
            omit)


  testcase NS_100_270_0001Verification() runs on MTC system TSI {
    var S1Comp eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");
   
    var S1Comp eNBm := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");
    
    connect (eNB:pt_CM,sGW:pt_CM);
    
    eNBm.start( f_eNB_NS_100_270_0001_mirror () );
    sGWm.start( f_sGW_NS_100_270_0001_mirror () );
    hSSm.start( f_hSS_NS_100_270_0001_mirror () );

    eNB.start( f_eNB_NS_100_270_0001 () );
    sGW.start( f_sGW_NS_100_270_0001 () );
    hSS.start( f_hSS_NS_100_270_0001 () );

    f_serverSyncClientsAndStop(6,{"init","attach","uerelease","collision_start", "collision_end", "detach",c_poSyncPoint});
    
    alt 
    {
      [] all component.done {setverdict(pass);}
    }
  }


 function f_eNB_NS_100_270_0001 () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;  
  
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);
  //SCTP Connection
    f_enbParameters(v_enb_params);
    v_ret := f_preamble_S1 (v_enb_params);
    f_SubscriberParameters(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("init",v_ret);
  //Attach Procedure
    v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);
  f_selfOrClientSyncAndVerdict("attach",v_ret);
    v_ret :=  f_s1_UEContextRelease_srs(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);

  //Service Request
  v_ret:= f_s1_ServiceRequest_s_s (v_subscriberParameters);
    v_ret:= f_s1_initialContextSetup_no_nas_pdu_r( v_subscriberParameters);
  f_selfOrClientSyncAndVerdict("collision_start",v_ret);
  
  if (v_ret == e_success){
    v_ret:= f_s1_ServiceRequest_s_s (v_subscriberParameters);
  }
    v_subscriberParameters.s1.s1AP_Cause:=?;
    if (v_ret == e_success){
  v_ret:=f_errorIndication_r(v_subscriberParameters);
    }
    f_selfOrClientSyncAndVerdict("collision_end",v_ret);

  v_ret := f_s1_BasicCipheredDetachWithSecurityInitialUE( v_subscriberParameters );
    f_selfOrClientSyncAndVerdict("detach",v_ret);

    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();
}

 function f_eNB_NS_100_270_0001_mirror () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;  
  
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);
    //SCTP Connection
    f_enbParameters(v_enb_params);
    v_ret := f_preamble__S1m (v_enb_params);
    f_SubscriberParameters(v_subscriberParameters);

    // SetupReq
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b00006212850000c3ee003300574001a8'O)
    
    f_selfOrClientSyncAndVerdict("init",v_ret);

  //Attach Procedure
    
    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b403b00000300000005c0100000280008000200d8001a0025240752007ae97812a15e0f9728b8d36697849e951010203000014607800020134415041601'O)
    
    //AuthResp
    pt_s1ap.receive;
    // SecurityModeCommand
    pt_s1ap.send(RawGtpV2Msg:'000b402700000300000005c0100000280008000200d8001a00111037594f346a00075d220005a020a80060'O)
    //SecurityModeComplete
    pt_s1ap.receive;

    //RabSetupList (Attach accept) 0a66fa46 -> 0A66B630 -> 0a660a0b
    pt_s1ap.send(RawGtpV2Msg:'00090080d500000700000005c0100000280008000200d8004200060803e82007d00018008082000034007d450009050f800a660a0b000030396e278b2c97c1014cd964eadaf9d2d4708e36fc78e51d4d636f7e8f5aaa4393c0a74c8c5170a47951355a935ed9cc4af4abdfca1ba477221153b4fac3142c8afa583e58553f6f4e383b022b1f25dac22f66a011b77d10a9b3672454145a455ede1125640d4a0431e0dc09ec2d37b036006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069006a400100'O)

    //RabSetUpListResp
    pt_s1ap.receive;

    //Attach Complete
    pt_s1ap.receive;
    
   f_selfOrClientSyncAndVerdict("attach",v_ret);

    //ContextReleaseRequest
    pt_s1ap.receive;
    f_sleep (0.1);
    //ContextReleaseCommand  
    pt_s1ap.send(RawGtpV2Msg:'00170014000002006300070c1000002800d80002400202e0'O);
    //ContextReleaseComplete
    pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("uerelease",v_ret);


    //Service Request
    pt_s1ap.receive;
    //E_RABToBeSetupListCtxtSUReq
    pt_s1ap.send(RawGtpV2Msg:'0009006500000700000005c0100000290008000200d8004200060803e82007d000180013000034000e050009050f800a660a0b00003039006b0005080004000000490020bbb4e8454fa4adb63547744474d67b1ed4a1624e573e10fd4ebf22dbe2564385006a400100'O);

    f_selfOrClientSyncAndVerdict("collision_start",v_ret);
    
    //Service Request
    pt_s1ap.receive;
    pt_s1ap.send(RawGtpV2Msg:'000f401800000300004005c0100000290008400200d80002400201c0'O);
    
    f_selfOrClientSyncAndVerdict("collision_end",v_ret);

    //detachRequest
    pt_s1ap.receive;
    //detachAccept
    pt_s1ap.send(RawGtpV2Msg:'000b401f00000300000005c01000002b0008000200d8001a00090827388f60ed0351ec'O);
    //UEContextReleaseCommand
    pt_s1ap.send(RawGtpV2Msg:'00170013000002006300070c1000002b00d80002400124'O);
    //UEContextReleaseComplete
    pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("detach",v_ret);

    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();
}


  function f_sGW_NS_100_270_0001  () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    v_ret := f_preamble_S11 ( mp_udpIpAddr_S11_SGW,
                              mp_udpPortNumber_S11_SGW, 
                        mp_udpIpAddr_S11_MME_New,
                              mp_udpPortNumber_S11_MME_New );

    f_SubscriberParameters(v_subscriberParameters);  
    g_d_s11CommonDefault := activate(d_GtpV2CommonDefault());
    f_selfOrClientSyncAndVerdict("init",v_ret); 
    v_ret := f_s11_CreateSessionBasic (v_subscriberParameters);
    if (v_ret == e_success){
        v_ret :=  f_s11_ModifyBearerBasic (v_subscriberParameters);
    }
    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict("attach",v_ret);
    v_ret := f_s11_ReleaseAccessBearersBasic(v_subscriberParameters);
    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);
    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict("collision_start",v_ret);
    //  v_ret :=  f_s11_ModifyBearerBasic_ServiceRequest (v_subscriberParameters);
    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict("collision_end",v_ret);

    v_ret := f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict("detach",v_ret);

    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }
 
  function f_echo() runs on GTPV2Comp {
    // echoRequest
    pt_gtp.send(RawGtpV2Msg:'4001000987ec7f000300010016'O);
    // echoResponse
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
  }

  function f_echo2() runs on GTPV2Comp {
    // echoRequest
    pt_gtp.send(RawGtpV2Msg:'4001000987ec7f000300010016'O);
    pt_gtp.send(RawGtpV2Msg:'4001000987ec7f000300010016'O);
    // echoResponse
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
  }

  function f_sGW_NS_100_270_0001_mirror  () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;

    var octetstring v_createSesson := 
     '482000cd000000000002c8000100080062128500000000f14c0008'O &
     '0053680100000000f156000d00186282510001628251000000ea53'O &
     '0003006282515200010006570009008a1000000c'O &
     f_RealIP2Oct(mp_localAddress) & //0a667ce4
     '5700090187000000000a66b6b847001f0003736777036e736e03636f6d066d6e63313538066d6363323632046770727380000100fc63000100014f00050001000000007f000100004800080000000002000000015d001f00490001000550001600440900000000000000000000000000000000000000007200020021015f000200ab00'O;

    var octetstring v_modifyBearer := 
    '482200310001ee460002cb00570009008a1000000c'O &
    f_RealIP2Oct(mp_localAddress) & //0a667ce4
    '5d00120049000100055700090080000030390a8c435d720002002101'O;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    v_ret := f_preamble_S11 ( mp_udpIpAddr_S11_MME_New,
                              mp_udpPortNumber_S11_MME_New, 
                              mp_udpIpAddr_S11_SGW,
                              mp_udpPortNumber_S11_SGW);

    f_SubscriberParameters(v_subscriberParameters);  
    g_d_s11CommonDefault := activate(d_GtpV2CommonDefault());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_echo();

    //createSessionRequest
    pt_gtp.send(RawGtpV2Msg:v_createSesson)
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd

    f_echo();
    
    // Modify Bearer Request
    pt_gtp.send(RawGtpV2Msg:v_modifyBearer)
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd

    f_echo();
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    f_echo();
    
    //releaseAccessBearersRequest
    pt_gtp.send(RawGtpV2Msg:'48aa00080001ee460002ce00'O) 
    //releaseAccessBearersResponse
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd

    f_echo();
    
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);

    f_echo();
    f_echo();
    
    f_selfOrClientSyncAndVerdict("collision_start",v_ret);

    f_echo();
    f_echo();
    
    f_selfOrClientSyncAndVerdict("collision_end",v_ret);

    f_echo2();
    f_echo2();
    
    //deleteSessionRequest
    pt_gtp.send(RawGtpV2Msg:'482400130001ee460002d10049000100054d0002000800'O)
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd

    f_echo2();
    
    f_selfOrClientSyncAndVerdict("detach",v_ret);

    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }
 

  function f_hSS_NS_100_270_0001 () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();

    v_ret := f_preambleDiameter( v_subscriberParameters,
                                 mp_sctpIpAddrS6aHLR,
                                 mp_sctpPortNumberS6aHLR, 
                                 mp_sctpIpAddrS6aMMENew,
                                 mp_sctpPortNumberS6aMMENew );

     
    f_selfOrClientSyncAndVerdict("init",v_ret);

    v_ret := f_BasicUpdateLocationWithAuthentication(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);
    f_selfOrClientSyncAndVerdict("collision_start",v_ret);
    f_selfOrClientSyncAndVerdict("collision_end",v_ret);
    f_selfOrClientSyncAndVerdict("detach",v_ret);
    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_hSS_NS_100_270_0001_mirror () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;//This is important!
    v_ret := f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew,
                                     mp_sctpPortNumberS6aMMENew,
                                     mp_sctpIpAddrS6aHLR,
                                     mp_sctpPortNumberS6aHLR);

    /*f_preambleDiameter(  v_subscriberParameters,
                           mp_sctpIpAddrS6aMMENew,
                           mp_sctpPortNumberS6aMMENew, 
                           mp_sctpIpAddrS6aHLR,
                           mp_sctpPortNumberS6aHLR );*/

    f_sleep (2.0);
    //CER
    pt_diameter.send(RawDiameterMsg:'01010000c88000010100000000126a660b000000e600000104400000200000010a4000000c000028af000001024000000c01000023000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d0000000001014000000e00010aff948600000000010a4000000c00006f2a0000010d0000000f466c6578694e5300000001164000000c00000000000001094000000c000028af000001024000000c010000230000010b0000000c00000001'O)
    pt_diameter.receive;
    f_selfOrClientSyncAndVerdict("init",v_ret);

    //DWR
    pt_diameter.send(RawDiameterMsg:'01010000588000011800000000126a660c000000e7000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d0000000001164000000c00000000'O)
    pt_diameter.receive;
    

    //AIR
    pt_diameter.send(RawDiameterMsg:'01010000e4c000013e01000023000005010000050100000107400000234d4d452e4e534e2e434f4d3b333238383333343335303b3839363200000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d00000001400000173236323135383030303030303030310000000580c000002c000028af00000582c0000010000028af0000000100000584c0000010000028af000000010000057fc000000f000028af62825100'O)
    pt_diameter.receive;
 
    //ULR
    pt_diameter.send(RawDiameterMsg:'0101000134c000013c01000023000006010000060100000107400000234d4d452e4e534e2e434f4d3b333238383333343335303b3932313800000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d0000000140000017323632313538303030303030303031000000057dc0000010000028af0000007a0000057fc000000f000028af6282510000000408c0000010000028af000003ec000005d1c0000011000028af53785085f00000000000064f80000010000028af000000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000000000027680000010000028af00000000'O)
    pt_diameter.receive;

    f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("uerelease",v_ret);
    f_selfOrClientSyncAndVerdict("collision_start",v_ret);
    f_selfOrClientSyncAndVerdict("collision_end",v_ret);
    f_selfOrClientSyncAndVerdict("detach",v_ret);

    //DPR
    pt_diameter.receive;
    f_sleep(0.2);
    //DPA
    pt_diameter.send(RawDiameterMsg:'01010000580000011a000000000000060500000605000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010c4000000c000007d1'O)
    f_sleep(0.5);

    //f_Postamble_S6a(v_subscriberParameters);
    f_Postamble_S6a_WithoutShutdown();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }


  testcase tc_Diameter_Mirror() runs on MTC system TSI {
    var DIAMComp hSS1 := DIAMComp.create("HSS1");
    var DIAMComp hSS2 := DIAMComp.create("HSS2");
    var DIAMComp hSSm := DIAMComp.create("MME");

    hSS1.start( f_Diameter1() );
  
    hSS2.start( f_Diameter2() );

    hSSm.start( f_Diameter_Mirror() );     


    f_serverSyncClients(3, c_prSyncPoint);
    //NOTE:f_serverSyncAllClients(2, "AIR") will wait for 2 PTC send ClientReady of "AIR" to the MTC,and then MTC will send ServerReady to all the 3 PTC
    f_serverSyncAllClients(2, "AIR");
    f_serverSyncAllClients(2, "ULR");
    f_serverSyncClientsAndStop(3,{c_poSyncPoint});
  
  }

  function f_Diameter1() runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    timer t_guard := 30.0;
    var boolean skipAIRsync := false;
    var boolean skipULRsync := false;
  
    f_SubscriberParameters(v_subscriberParameters);
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress := {
    a_ServedPartyIpAddress({ipv4 := "127.0.0.1"}, 0),
    a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000001'O}, 0) };
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters := e_operatorSpecific150;
    v_subscriberParameters.s6a.r_subscriptionData := a_SubscriptionData(a_SubscriptionDataGrp3GPP(v_subscriberParameters,0),0);
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0));
    
    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;  
    v_ret := f_preambleDiameterWithoutCerCea( /*v_subscriberParameters, */
                                 mp_sctpIpAddrS6aHLR, mp_sctpPortNumberS6aHLR, 
                                 mp_sctpIpAddrS6aMMENew, mp_sctpPortNumberS6aMMENew );

    v_subscriberParameters.s6a.r_serviceSelection := DiameterS6AVPTemplates.a_ServiceSelection("sgw.nsn.com.mnc001.mcc262.gprs",0);
    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict(c_prSyncPoint,v_ret);

    //ready to receive AIR message
         
    t_guard.start;
    alt {
    [] pt_diameter.receive( a_AirMsg_receive ) -> value g_v_lastReceivedS6aPduValue {
      t_guard.stop;
      v_ret := e_success;
      g_v_lastReceivedS6PduValueExist := true;
    }
    [] pt_diameter.receive( DiameterS6Message: ? ) -> value g_v_lastReceivedS6aPduValue {
      t_guard.stop;    
      v_ret := e_error;
      g_v_lastReceivedS6PduValueExist := true;
    }
    [] syncPort.receive((m_syncServerReady("AIR")) ) {
        t_guard.stop;    
        v_ret := e_success;
       skipAIRsync:=true;
    
  }  
    [] pt_diameter.receive {
  t_guard.stop;  
      v_ret := e_error;
      g_v_lastReceivedS6PduValueExist := false;
    }
    [] t_guard.timeout {
      v_ret := e_timeout;
      g_v_lastReceivedS6PduValueExist := false;
    }
    }
    //if already received m_syncServerReady in   syncPort, skip sync function,only the HSS receive diameter Message will execute f_selfOrClientSyncAndVerdict
    if(skipAIRsync == false)
    {
        f_selfOrClientSyncAndVerdict("AIR",v_ret);
    }


    //ready to receive ULR message
    t_guard.start;
    alt {
    [] pt_diameter.receive( a_ULR(?) ) -> value g_v_lastReceivedS6aPduValue {
  t_guard.stop;      
      v_ret := e_success;
      g_v_lastReceivedS6PduValueExist := true;
    }
    [] pt_diameter.receive( DiameterS6Message: ? ) -> value g_v_lastReceivedS6aPduValue {
  t_guard.stop;  
      v_ret := e_error;
      g_v_lastReceivedS6PduValueExist := true;
    }
    [] syncPort.receive((m_syncServerReady("ULR")) ) {
        t_guard.stop;    
        v_ret := e_success;
       skipULRsync:=true;
    
  }  
    [] pt_diameter.receive {
  t_guard.stop;  
      v_ret := e_error;
      g_v_lastReceivedS6PduValueExist := false;
    }
    [] t_guard.timeout {
      v_ret := e_timeout;
      g_v_lastReceivedS6PduValueExist := false;
    }
    }

    if(skipULRsync == false)
    {
        f_selfOrClientSyncAndVerdict("ULR",v_ret);
    }

    f_Postamble_S6a_WithoutShutdown();
    //f_Postamble_S6a_WithoutShutdown();
    
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_Diameter2() runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    timer t_guard := 30.0;
    var boolean skipAIRsync := false;
    var boolean skipULRsync := false;
  
    f_SubscriberParameters(v_subscriberParameters);
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.servedPartyIpAddress := {
    a_ServedPartyIpAddress({ipv4 := "127.0.0.1"}, 0),
    a_ServedPartyIpAddress({ipv6 := '0000000000000000000000007F000001'O}, 0) };
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.epsSubscribedQosProfile.grp.qosClassIdentifier.ipCanSpecificQosParameters := e_operatorSpecific150;
    v_subscriberParameters.s6a.r_subscriptionData := a_SubscriptionData(a_SubscriptionDataGrp3GPP(v_subscriberParameters,0),0);
    v_subscriberParameters.s6a.r_subscriptionData.grp.g3GPPChargingCharacteristics := valueof(a_G3GPPChargingCharacteristics("0100",0));
    
    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;  
    v_ret := f_preambleDiameterWithoutCerCea( /*v_subscriberParameters, */
                                 mp_sctpIpAddrS6aHLR, mp_sctpPortNumberS6aHLR+10, 
                                 mp_sctpIpAddrS6aMMENew, mp_sctpPortNumberS6aMMENew );

    v_subscriberParameters.s6a.r_serviceSelection := DiameterS6AVPTemplates.a_ServiceSelection("sgw.nsn.com.mnc001.mcc262.gprs",0);
    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict(c_prSyncPoint,v_ret);

    //ready to receive AIR message
         
    t_guard.start;
    alt {
    [] pt_diameter.receive( a_AirMsg_receive ) -> value g_v_lastReceivedS6aPduValue {
      t_guard.stop;
      v_ret := e_success;
      g_v_lastReceivedS6PduValueExist := true;
    }
    [] pt_diameter.receive( DiameterS6Message: ? ) -> value g_v_lastReceivedS6aPduValue {
      t_guard.stop;    
      v_ret := e_error;
      g_v_lastReceivedS6PduValueExist := true;
    }
    [] syncPort.receive((m_syncServerReady("AIR")) ) {
        t_guard.stop;    
        v_ret := e_success;
       skipAIRsync:=true;
    
  }  
    [] pt_diameter.receive {
  t_guard.stop;  
      v_ret := e_error;
      g_v_lastReceivedS6PduValueExist := false;
    }
    [] t_guard.timeout {
      v_ret := e_timeout;
      g_v_lastReceivedS6PduValueExist := false;
    }
    }
  
    if(skipAIRsync == false)
    {
        f_selfOrClientSyncAndVerdict("AIR",v_ret);
    }


    //ready to receive ULR message

    t_guard.start;
    alt {
    [] pt_diameter.receive( a_ULR(?) ) -> value g_v_lastReceivedS6aPduValue {
  t_guard.stop;      
      v_ret := e_success;
      g_v_lastReceivedS6PduValueExist := true;
    }
    [] pt_diameter.receive( DiameterS6Message: ? ) -> value g_v_lastReceivedS6aPduValue {
  t_guard.stop;  
      v_ret := e_error;
      g_v_lastReceivedS6PduValueExist := true;
    }
    [] syncPort.receive((m_syncServerReady("ULR")) ) {
        t_guard.stop;    
        v_ret := e_success;
       skipULRsync:=true;
    
  }  
    [] pt_diameter.receive {
  t_guard.stop;  
      v_ret := e_error;
      g_v_lastReceivedS6PduValueExist := false;
    }
    [] t_guard.timeout {
      v_ret := e_timeout;
      g_v_lastReceivedS6PduValueExist := false;
    }
    }

    if(skipULRsync == false)
    {
        f_selfOrClientSyncAndVerdict("ULR",v_ret);
    }
  
    //f_Postamble_S6a(v_subscriberParameters);
    f_Postamble_S6a_WithoutShutdown();
    
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }



  function f_Diameter_Mirror() runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;

    f_SubscriberParameters(v_subscriberParameters);
    
    f_connect4SelfOrClientSync();
    

    v_ret := f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew,
                        mp_sctpPortNumberS6aMMENew,
                        mp_sctpIpAddrS6aHLR,
                        mp_sctpPortNumberS6aHLR);

    f_sleep(5.0);
    //pt_diameter.send(RawDiameterMsg:'01010000bc80000101000000000db01783000014720000010b0000000c00005678000001014000000e00010a66b6640000000001084000001a6f726967696e686f73742e6d6d6d2e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010d0000000d464c4558490000000000010a4000000c00006f2a000001094000000c000028af00000104400000200000010a4000000c000028af000001024000000c01000023000001024000000c01000023'O);

    //pt_diameter.receive;

    //v_subscriberParameters.s6a.r_serviceSelection := DiameterS6AVPTemplates.a_ServiceSelection("sgw.nsn.com.mnc001.mcc262.gprs",0);
    f_selfOrClientSyncAndVerdict(c_prSyncPoint,v_ret);

    //pt_diameter.receive(DiameterS6Message:?);
    pt_diameter.send(a_AirMsg_send);

    f_selfOrClientSyncAndVerdict("AIR",v_ret);

  f_sleep(5.0);
       pt_diameter.send(a_ULR(0));
    f_selfOrClientSyncAndVerdict("ULR",v_ret);

   
    
    // DPR / DPA
    //pt_diameter.receive;
    //f_sleep(0.1);
    //pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);

    //f_Postamble_S6a(v_subscriberParameters);
    f_Postamble_S6a_WithoutShutdown();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }


  testcase tc_S1AP_CDMA() runs on MTC system TSI {
    var S1Comp eNB;
    var S1Comp mME;

    eNB := S1Comp.create("ENB");
    mME := S1Comp.create("MME");
    eNB.start( f_S1AP_CDMA() );
    mME.start( f_MME_CDMA() );
    f_serverSyncClientsAndStop(2,{"init","cdma", c_poSyncPoint});

  }

  function  f_S1AP_CDMA() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());

   //SCTP Connection
    v_ret := f_initS1 (mp_sctpIpAddr_S1_ENB_UE,
                       mp_sctpPortNumber_ENB_UE, 
                       mp_sctpIpAddr_S1_MME_New, 
                       mp_sctpPortNumber_MME_New);

    f_enbParameters(v_enb_params);
    
    f_SubscriberParameters(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("init",v_ret);

    v_subscriberParameters.s1.mME_UE_S1AP_ID := 12;

    f_s1_cdma2000Tunneling_sr(v_subscriberParameters)

    f_selfOrClientSyncAndVerdict("cdma",v_ret);

    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
   }

  function f_MME_CDMA() runs on S1Comp {
    var FncRetCode v_ret := e_success;
    var template EnbParameters v_enb_params;
    var template SubscriberParameters v_subscriberParameters;

    //f_S1_Initparameters();
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    g_v_verificationFlag := true;

    f_SubscriberParameters(v_subscriberParameters);

    //SCTP Connection
    f_enbParameters(v_enb_params);
    v_ret := f_preamble__S1m (v_enb_params);

    f_selfOrClientSyncAndVerdict("init",v_ret);
    
    pt_s1ap.receive;
    //downlink
    pt_s1ap.send(RawGtpV2Msg:'0013401b00000400000002000c0008000200d8004700014000460003021111'O);
    //uplink
    //pt_s1ap.send(RawGtpV2Msg:'0014404400000900000002000c0008000200d800470001400048000302123400544001000066000a000211220233440255660061000504aabb112200460003021111008c40020064'O);

    f_selfOrClientSyncAndVerdict("cdma",v_ret);
    
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }


  testcase NS_15_13_0006_SubscrSend() runs on MTC system TSI {
    var S1Comp eNB := S1Comp.create("ENB");
    var S1Comp eNB2 := S1Comp.create("ENB2");
 
    connect (eNB:pt_CM,eNB2:pt_CM);
    eNB.start( f_eNB_NS_15_13_0006 () );
    eNB2.start( f_eNB2_NS_15_13_0006 () );

    f_serverSyncClientsAndStop(2,{"init","attach", c_poSyncPoint});

  }

//-------------------------------------------------------------------------------//
/* S1 interface eNB1*/ 

  function f_eNB_NS_15_13_0006  () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var integer i := 0;
    var template EnbParameters v_enb_params;    
    g_v_extSyncTimeGuard := 120.0;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
       
    f_enbParameters(v_enb_params);
    v_ret := f_preamble_S1 (v_enb_params);
    f_SubscriberParameters(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("init",v_ret);                  

    //Attach Procedure
    //v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);
v_subscriberParameters.s1.epsBearerIdentity := 0;
v_subscriberParameters.s1.nasKeySetIdentifier := e_key_set_0;
    v_subscriberParameters.s1.res := '1111111111'O;

  v_subscriberParameters.s1.sequenceNumber_DL := (0..255);
  v_subscriberParameters.s1.sequenceNumber_UL := 0;

v_subscriberParameters.s1.keyeNB := '1111'B;

      v_subscriberParameters.s1.epsBearerIdentity := 1;

//      g_v_NAS_parameter.mobileIdentity:= v_attAcc.gUTI
//      g_v_NAS_parameter.s_Tmsi.m_TMSI := substr (v_attAcc.gUTI.digits, len-4,4);
//      g_v_NAS_parameter.s_Tmsi.mMEC := v_attAcc.gUTI.digits[len-5];


    g_v_securityParameters.kASME              := '0101010101010101010101010101010101010102010101010101010101034455'O;
    g_v_securityParameters.integrityAlgorithm := e_eia2;
    g_v_securityParameters.cipheringAlgorithm := e_eea0;
    g_v_securityParameters.integrityKey       := '01010101010101010101010101010101'O;
    g_v_securityParameters.cipheringKey       := '01010101010101010101010101010101'O;
    g_v_securityParameters.countDL            := 0;
    g_v_securityParameters.countUL            := 0;
    g_v_securityParameters.bearerIdentity     := 0;
    g_v_securityParameters.direction          := e_downlink;
    g_v_securityContextInUse                  := true;

v_subscriberParameters.s1.mME_UE_S1AP_ID := 1;

    if(v_ret == e_success){
       f_InitForSending_WithSecurity(v_subscriberParameters, g_v_securityParameters);
//log(v_subscriberParameters);
       v_subscriberParametersTable := {v_subscriberParameters};
       pt_CM.send(v_subscriberParametersTable);
    }
    f_selfOrClientSyncAndVerdict("attach",v_ret);    

    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

 }

//////////// S1 interface eNB2 ////////////// 

  function f_eNB2_NS_15_13_0006  () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb2_params;  
  var template EnbParameters v_enb_params;
     
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());

    //SCTP Connection
    f_enb2Parameters(v_enb2_params);
    f_enbParameters(v_enb_params);
    //v_ret := f_preamble_S1 (v_enb2_params);
v_ret := f_preamble__S1m (v_enb_params);

    v_enb2_params.globalEnbId := a_Global_ENB_ID( mp_s1AP_plmnIdentity_1,
                                 a_ENB_ID_macroENB_ID(hex2bit( mp_macro_enb_id_hex_2 )),omit /*exts*/);

    v_enb2_params.enbName :=  { normal := mp_enb_name_2 };

    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O);

    f_selfOrClientSyncAndVerdict("init",v_ret);    

    pt_CM.receive(SubscriberParametersTable:?)->value v_subscriberParametersTable;
    v_subscriberParameters := v_subscriberParametersTable[0];
    f_InitForReceiving_WithSecurity(v_subscriberParameters, g_v_securityParameters)
    g_v_securityContextInUse:=true;
    g_v_securityParameters.kASME:=mp_KASME;
    g_v_securityParameters.direction:=e_uplink;
    v_subscriberParameters.s1.eNB_UE_S1AP_ID := mp_eNB_UE_S1AP_ID2;
    f_selfOrClientSyncAndVerdict("attach",v_ret);    

    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  testcase NS_9_0_0002Verify() runs on MTC system TSI {
    var S1Comp eNB := S1Comp.create("ENB");
    //var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");
    //var TRAFComp tRAF := TRAFComp.create("TRAF");
    var S1Comp eNBm := S1Comp.create("ENBm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    //connect (eNB:pt_CM,tRAF:pt_CM);
    
    eNBm.start( f_eNB_NS_9_0_0002_m () );
    hSSm.start( f_hSS_9_0_0002_m() );

    eNB.start( f_eNB_NS_9_0_0002 () );
    //sGW.start( f_sGW_NS_9_0_0002  () );
    hSS.start( f_hSS_9_0_0002() );
    //tRAF.start( f_traffica_NS_9_0_0002 () );

    // FT19 US25_19 GUTI trace: added ext sync point "ZMMO" 
    f_serverSyncClientsAndStop(4,{"init", "1_HeartBeat", "attach","ZMMO","detach","attach2","detach2", "2_HeartBeat", c_poSyncPoint});
    
  }

/***************** S1 interface *****************/ 

  function f_eNB_NS_9_0_0002 () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;    
    var template CMessageList v_trafficaMsg;
  
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    // FT19 US25_19 GUTI trace: added ext sync point "ZMMO" 
    //NEW function call for EXTERNAL ROBOT SYNC!!!
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);

    //SCTP Connection
    f_enbParameters(v_enb_params);
    v_ret := f_preamble_S1 (v_enb_params);
    f_selfOrClientSyncAndVerdict("init",v_ret);    

    f_sleep(1.0);
    f_selfOrClientSyncAndVerdict("1_HeartBeat",v_ret);

    f_SubscriberParameters(v_subscriberParameters);

    //Attach Procedure
    v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);

    v_trafficaMsg := {
    {
      info := "GUTI",
      msg := {EPSMobileIdentity := v_subscriberParameters.s1.gUTI}
      
    },
    {
      info := "IMSI",
      msg := {hexstring := v_subscriberParameters.s1.imsi}
      
    }
    }
    
    //pt_CM.send(v_trafficaMsg);
    f_selfOrClientSyncAndVerdict("attach",v_ret);    
    f_sleep(2.0);

    // FT19 US25_19 GUTI trace: added ext sync point "ZMMO" 
    f_selfOrClientExternalSyncAndVerdict("ZMMO",v_ret);

    //Detach Procedure
    v_ret :=  f_s1_BasicDetachWithSecurity(v_subscriberParameters);        

    f_selfOrClientSyncAndVerdict("detach",v_ret);    
    f_sleep (1.0); 

    //Attach with guti Procedure
    v_subscriberParameters.s1.S1AP_TAC :=  '0001'O;
    v_subscriberParameters.s1.epsBearerIdentity := 0 ;

    v_ret := f_s1_BasicAttachWithSecurity_with_guti (v_subscriberParameters);

    v_trafficaMsg := {
    {
      info := "GUTI",
      msg := {EPSMobileIdentity := v_subscriberParameters.s1.gUTI}
    }
    }
    
    //pt_CM.send(v_trafficaMsg);
    f_selfOrClientSyncAndVerdict("attach2",v_ret);    

    f_sleep (2.0);

    //Detach Procedure

    v_ret := f_s1_BasicDetachWithSecurity(v_subscriberParameters);        

    f_selfOrClientSyncAndVerdict("detach2",v_ret);    

    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict("2_HeartBeat",v_ret);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    // FT19 US25_19 GUTI trace: added ext sync point "ZMMO" 
    //NEW function call for EXTERNAL ROBOT SYNC!!!
    f_disconnect4SelfOrClientExternalSync();

  }

/////////////////////// S6A interface ///////////////////////////////////////////7

  function f_hSS_9_0_0002 () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();

    v_ret := f_preambleDiameter( v_subscriberParameters,
                                 mp_sctpIpAddrS6aHLR,
                                 mp_sctpPortNumberS6aHLR, 
                                 mp_sctpIpAddrS6aMMENew,
                                 mp_sctpPortNumberS6aMMENew );

    f_selfOrClientSyncAndVerdict("init",v_ret);  

    f_selfOrClientSyncAndVerdict("1_HeartBeat",v_ret);

    v_ret := f_BasicUpdateLocationWithAuthenticationChargChar(v_subscriberParameters);
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    
    f_selfOrClientSyncAndVerdict("detach",v_ret);

    f_selfOrClientSyncAndVerdict("attach2",v_ret);

    f_selfOrClientSyncAndVerdict("detach2",v_ret);

    f_selfOrClientSyncAndVerdict("2_HeartBeat",v_ret);
    
    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }



  function f_eNB_NS_9_0_0002_m () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    timer t_shutdown := 20.0;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    log(v_enb_params);
    g_v_enable_message_ind := false;
    g_v_enable_heartbeat_ind := false;

    v_ret := f_preamble__S1m (v_enb_params);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b000062f2720000c36b00330057400119'O)
    
    f_sleep(30.0);
    f_selfOrClientSyncAndVerdict("init",v_ret);
    f_selfOrClientSyncAndVerdict("1_HeartBeat",v_ret);

    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b403b00000300000005c08000001d0008000200d8001a002524075200d8bcb23b12796be4ef1409c930dd33581010203200106063800100014010443300'O)

    //AuthResp
    pt_s1ap.receive;

    //SecurityModeCommand
    pt_s1ap.send(RawGtpV2Msg:'000b402700000300000005c08000001d0008000200d8001a001110377fc4276600075d020005a020a80060'O) 

    pt_s1ap.receive;

    //RAB      E_RABSetupItemCtxtSUReq & res
    pt_s1ap.send(RawGtpV2Msg:'00090080d500000700000005c08000001d0008000200d8004200060803e82007d00018008082000034007d450009040f800a660a0b000030396e271121b45f0107420149064062f272000100475201c10509ffffffff1f03736777036e736e03636f6d066d6e63303237066d636332363204677072730501c0a800015d0100300c23111f939602017648ffff003203815e02ffff500bf662f272c36b33e000000c172c5949640100006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069006a400100'O) 
    pt_s1ap.receive;

    //AttachComplete
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);

    //pt_s1ap.receive;
    //f_sleep (0.1);
    //pt_s1ap.send(RawGtpV2Msg:'0009006f0000060000000200030008000200d8004200060803e82007d000180025010034000e050009070f800a66b635000030390034000e060009120f800a66b63500003039006b00050800040000004900206ebbe73f49ca89939178e9c5ccb999c499dc4e346f0433878b4de5062ed26adc'O);
    //pt_s1ap.receive;

    
    //DetachReq
    pt_s1ap.receive;
    
    //DetachResp
    f_sleep (1.0);
    pt_s1ap.send(RawGtpV2Msg:'000b401f00000300000005c08000001d0008000200d8001a000908279411114a020746'O)
    
    f_sleep (1.0);
    //Release
    pt_s1ap.send(RawGtpV2Msg:'00170013000002006300070c8000001d00d80002400124'O);
    
    //Release complete
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("detach",v_ret);

    pt_s1ap.receive;
    pt_s1ap.send(RawGtpV2Msg:'00090080d500000700000005c08000001e0008000200d8004200060803e82007d00018008082000034007d450009040f800a660a0b000030396e27d1d6849e0307420149064062f272000100475201c10509ffffffff1f03736777036e736e03636f6d066d6e63303237066d636332363204677072730501c0a800015d0100300c23111f939602017648ffff003203815e02ffff500bf662f272c36b33e000000d172c5949640100006b00050800040000004900206ebbe73f49ca89939178e9c5ccb999c499dc4e346f0433878b4de5062ed26adc006a400100'O);
   
    pt_s1ap.receive;
    pt_s1ap.receive;

   f_selfOrClientSyncAndVerdict("attach2",v_ret);

    pt_s1ap.receive;

    pt_s1ap.send(RawGtpV2Msg:'000b401f00000300000005c08000001e0008000200d8001a0009082737fb2fdd040746'O);

    pt_s1ap.send(RawGtpV2Msg:'00170013000002006300070c8000001e00d80002400124'O);
    pt_s1ap.receive;
 
    f_selfOrClientSyncAndVerdict("detach2",v_ret);



    f_selfOrClientSyncAndVerdict("2_HeartBeat",v_ret);
    
    t_shutdown.start;
    alt {
    [] pt_sctpNotification.receive("sctpShutdownCompleteNotification") 
       {setverdict(pass);}
    [] t_shutdown.timeout 
       {setverdict(fail);}
    }
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }
  
   function f_hSS_9_0_0002_m () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
    f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew,
                        mp_sctpPortNumberS6aMMENew,
                        mp_sctpIpAddrS6aHLR,
                        mp_sctpPortNumberS6aHLR);

    //CER
    f_sleep (15.0);
pt_diameter.send(RawDiameterMsg:'01010000c880000101000000003a7b660b0000000c00000104400000200000010a4000000c000028af000001024000000c01000023000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d0000000001014000000e0001c0a87f0200000000010a4000000c00006f2a0000010d0000000f466c6578694e5300000001164000000c00000000000001094000000c000028af000001024000000c010000230000010b0000000c00000001'O)

pt_diameter.receive;

  f_sleep (30.0);
  f_selfOrClientSyncAndVerdict("init",v_ret);

  f_selfOrClientSyncAndVerdict("1_HeartBeat",v_ret);
   
  pt_diameter.send(RawDiameterMsg:'01010000e4c000013e01000023583013085830130800000107400000234d4d452e4e534e2e434f4d3b333735383039363339363b3531323100000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d00000001400000173236323237303030303030303030310000000580c000002c000028af00000582c0000010000028af0000000100000584c0000010000028af000000010000057fc000000f000028af62f27200'O)

pt_diameter.receive;


pt_diameter.send(RawDiameterMsg:'0101000120c000013c010000236e0014086e00140800000107400000234d4d452e4e534e2e434f4d3b333735383039363339363b3533373700000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d0000000140000017323632323730303030303030303031000000057dc0000010000028af000000620000057fc000000f000028af62f2720000000408c0000010000028af000003ec0000064f80000010000028af000000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000000000027680000010000028af00000000'O)
pt_diameter.receive;

 f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO",v_ret);
    f_selfOrClientSyncAndVerdict("detach",v_ret);
f_selfOrClientSyncAndVerdict("attach2",v_ret);
f_selfOrClientSyncAndVerdict("detach2",v_ret);
f_selfOrClientSyncAndVerdict("2_HeartBeat",v_ret);
    

    //f_sleep(10.0);

    // DPR / DPA
    pt_diameter.receive;
    f_sleep(0.1);
    pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);

    //f_Postamble_S6a(v_subscriberParameters);
    f_Postamble_S6a_WithoutShutdown();
    //f_sendShutdownS6a(); // This sends SCTP shutdown primitive
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }


  testcase NS_001195_02_0016_pilot_verify() runs on MTC system TSI {
    var S1Comp    eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp  hSS := DIAMComp.create("HSS");
    var SGsComp   sGS := SGsComp.create("SGS");

    var S1Comp    eNBm := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp  hSSm := DIAMComp.create("HSSm");
    var SGsComp   sGSm := SGsComp.create("SGSm");

    var SyncPointList v_SyncPointList := {"init", "attach", "lua", "TAU", "ZMMO", "detach", c_poSyncPoint};

    connect(eNB:pt_CM, sGW:pt_CM);

    eNB.start( f_eNB_NS_001195_02_0016_pilot() );
    sGW.start( f_sGW_NS_001195_02_0016_pilot() );
    hSS.start( f_hSS_BasicUpdateLocationWithAuthentication_r(v_SyncPointList) );
    sGS.start( f_sGS_NS_001195_02_0016_pilot() );

    eNBm.start( f_eNB_NS_001195_02_0016_pilot_mirror() );
    sGWm.start( f_sGW_NS_001195_02_0016_pilot_mirror() );
    hSSm.start( f_hSS_NS_001195_02_0016_pilot_mirror(v_SyncPointList) );
    sGSm.start( f_sGS_NS_001195_02_0016_pilot_mirror() );

    f_serverSyncClientsAndStop(8, v_SyncPointList);
    
    alt 
    {
      [] all component.done {setverdict(pass);}
    }
  }

  function f_hSS_NS_001195_02_0016_pilot_mirror(in SyncPointList p_syncPointIds) runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var integer ind := 0;

    //f_SubscriberParameters(v_subscriberParameters);
    f_connect4SelfOrClientSync();

    g_v_verificationFlag := true;
    v_ret := f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew, mp_sctpPortNumberS6aMMENew, 
                                              mp_sctpIpAddrS6aHLR,    mp_sctpPortNumberS6aHLR);

    f_sleep (15.0);
    // cer
    pt_diameter.send(RawDiameterMsg:'01010000bc80000101000000000db01783000014720000010b0000000c00005678000001014000000e00010a797aca0000000001084000001a6f726967696e686f73742e6d6d6d2e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010d0000000d464c4558490000000000010a4000000c00006f2a000001094000000c000028af00000104400000200000010a4000000c000028af000001024000000c01000023000001024000000c01000023'O);
    // cea
    pt_diameter.receive;
    f_selfOrClientSyncAndVerdictPR(p_syncPointIds[0], v_ret);

    f_sleep(0.3);
    //air
    pt_diameter.send(RawDiameterMsg:'01010000e4c000013e010000235ce001005ce0010000000107400000224d4d452e4e534e2e434f4d3b333232313232353437333b3531320000000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d00000001400000173236323134353030303030303030310000000580c000002c000028af00000582c0000010000028af0000000100000584c0000010000028af000000010000057fc000000f000028af62524100'O);
    //aia
    pt_diameter.receive;

    f_sleep(0.3);
    //ulr
    pt_diameter.send(RawDiameterMsg:'0101000120c000013c01000023e8a00200e8a0020000000107400000224d4d452e4e534e2e434f4d3b333232313232353437333b3736380000000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d0000000140000017323632313435303030303030303031000000057dc0000010000028af0000007a0000057fc000000f000028af6252410000000408c0000010000028af000003ec0000064f80000010000028af000000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000000000027680000010000028af00000000'O);
    //ula
    pt_diameter.receive;

    for (ind:=1; ind<sizeof(p_syncPointIds)-1; ind:=ind+1) {
      f_selfOrClientSyncAndVerdict(p_syncPointIds[ind], g_v_s6ret);
    }
    
    //dpr
    pt_diameter.receive;
    //dpa
    pt_diameter.send(RawDiameterMsg:'01010000580000011a00000000e8a00204e8a00204000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010c4000000c000007d1'O);

    f_sleep(0.3);// waiting send out dpa
    f_Postamble_S6a_WithAbort();// send ABORT to PEER, add rule in sctpasn.aut

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
  }

/***************** S1 interface *****************/ 
  function f_eNB_NS_001195_02_0016_pilot() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var integer expectedins := 5 , expectedos := 6;
     
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S1SyncDefault() );
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);

    f_sleep(0.5);
    f_enbParameters(v_enb_params);
    v_ret := f_preamble_S1_s (v_enb_params);
    
    f_SubscriberParameters(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("init", v_ret);  

    //for combined imsi attach
    v_subscriberParameters.s1.oldLocationAreaIdentification :=  COMMONIEs_Templates.a_LocationAreaIdentification(6, 2, 15, 2, 1, 0, 1);                             
    v_subscriberParameters.s1.locationAreaIdentification := ?;
     v_subscriberParameters.s1.attachType :=  e_combined_eps_imsi_attach; /*enas ATT_REQ ATTACH TYPE*/
    v_subscriberParameters.s1.attach_result_type := e_eps_imsi_attach;

    //Attach Procedure
    v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("attach", v_ret);

    //SET different TAI to the UplinkNASTransport
    v_subscriberParameters.s1.S1AP_TAC := mp_s1AP_TAC_2;
    v_subscriberParameters.s1.tAC := a_TAC(2);
    v_subscriberParameters.s1.oldLocationAreaIdentification :=  COMMONIEs_Templates.a_LocationAreaIdentification(6, 2, 15, 2, 1, 0, 1);                             
    v_subscriberParameters.s1.locationAreaIdentification := ?;
    v_subscriberParameters.s1.epsUpdateType := e_combined_ta_la_updating; //(#1)
    v_subscriberParameters.s1.epsUpdateResult := e_combined_ta_la_updated ; // (#1)
    
    //Tau Procedure
    v_ret := f_s1_BasicTrackingAreaUpdateWithSecurity_Ul_Nas(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("lua", v_ret);
    f_selfOrClientSyncAndVerdict("TAU", v_ret);
    f_selfOrClientExternalSyncAndVerdict("ZMMO", v_ret);

    //Detach Procedure
    v_ret := f_s1_BasicDetachWithSecurity(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("detach", v_ret);  

    f_postamble_S1_s ();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();

  }

  function f_eNB_NS_001195_02_0016_pilot_mirror() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template EnbParameters v_enb_params;
    g_v_verificationFlag := true;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S1SyncDefault() );
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);

      f_enbParameters(v_enb_params);

      v_ret := f_preamble__S1m(v_enb_params);
      if (v_ret != e_success) {
        setverdict(fail);
        //f_CloseHSSComponent(v_ret);
        return;
      }

      // S1AP.S1SetupRequest
      pt_s1apNonUE.receive;
      // S1AP.S1SetupResponse
      pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b00006212540000c3e100330057400119'O);
    f_selfOrClientSyncAndVerdict("init", v_ret);

      // attachRequest
      pt_s1ap.receive;
      f_sleep(0.2);
      // authenticationRequest
      pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200010008000200d8001a0025240752004d7180baa689b37f2760ace25c08faa61001200000040033080120204054007200'O);
      // authenticationResponse
      pt_s1ap.receive;

      f_sleep(0.2);
      // securityModeCommand
      pt_s1ap.send(RawGtpV2Msg:'000b40240000030000000200010008000200d8001a001110377fc4276600075d020005a020a80060'O);
      // securityModeComplete
      pt_s1ap.receive;

      f_sleep(0.2);
      // S1AP.InitialContextSetupRequest
      pt_s1ap.send(RawGtpV2Msg:'00090080da0000070000000200010008000200d8004200060803e82007d0001800808a000034008084450009040f800a660a0b0000303975272edcdb8d01074202490640625241000100475201c10509ffffffff1f03736777036e736e03636f6d066d6e63313435066d636332363204677072730501c0a800015d0100300c23111f939602017648ffff003203815e02ffff500bf6625241c3e133c0000001130103540001172c5949640100f2006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069006a400100'O);
      // S1AP.InitialContextSetupResponse
      pt_s1ap.receive;

      // attachComplete
      pt_s1ap.receive;
    f_selfOrClientSyncAndVerdict("attach", v_ret);

      // trackingAreaUpdateRequest
      pt_s1ap.receive;
      f_sleep(0.2);
      // trackingAreaUpdateAccept
      pt_s1ap.send(RawGtpV2Msg:'000b40420000030000000200010008000200d8001a002f2e27bf295d47020749015a49500bf6625241c3e133c00000025406406252410002130103540102172c5949640100f2'O);
      // trackingAreaUpdateComplete
      pt_s1ap.receive;
    f_selfOrClientSyncAndVerdict("lua", v_ret);
    f_selfOrClientSyncAndVerdict("TAU", v_ret);
    f_selfOrClientExternalSyncAndVerdict("ZMMO", v_ret);

      // detachRequest
      pt_s1ap.receive;
      f_sleep(0.2);
      // detachAccept
      pt_s1ap.send(RawGtpV2Msg:'000b401c0000030000000200010008000200d8001a00090827c5290b54030746'O);

      f_sleep(0.2);
      // S1AP.UEContextReleaseCommand
      pt_s1ap.send(RawGtpV2Msg:'0017001000000200630004000100d80002400124'O);
      // S1AP.UEContextReleaseComplete
      pt_s1ap.receive;
    f_selfOrClientSyncAndVerdict("detach", v_ret);

      f_postamble_S1 ();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();
  }

  function f_sGW_NS_001195_02_0016_pilot() runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S11SyncDefault() );

    v_ret := f_preamble_S11 ( mp_udpIpAddr_S11_SGW,
                              mp_udpPortNumber_S11_SGW, 
                              mp_udpIpAddr_S11_MME_New,
                              mp_udpPortNumber_S11_MME_New );

    f_SubscriberParameters(v_subscriberParameters);  
    g_d_s11CommonDefault := activate( d_GtpV2CommonDefault() );
    f_selfOrClientSyncAndVerdict("init", v_ret); 

    v_ret := f_s11_CreateSessionBasic (v_subscriberParameters);
    if (v_ret == e_success) {
        v_ret :=  f_s11_ModifyBearerBasic (v_subscriberParameters);
    }
    f_selfOrClientSyncAndVerdict("attach", v_ret);
    f_selfOrClientSyncAndVerdict("lua", v_ret);
    f_selfOrClientSyncAndVerdict("TAU", v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO", v_ret);

    v_ret := f_s11_DeleteSessionBasic (v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("detach", v_ret);

    f_postamble_S11 ();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_sGW_NS_001195_02_0016_pilot_mirror() runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S11SyncDefault() );

    v_ret := f_preamble_S11 ( mp_udpIpAddr_S11_MME_New,
                              mp_udpPortNumber_S11_MME_New, 
                              mp_udpIpAddr_S11_SGW,
                              mp_udpPortNumber_S11_SGW);

    f_SubscriberParameters(v_subscriberParameters);  
    g_d_s11CommonDefault := activate( d_GtpV2CommonDefault() );
    f_selfOrClientSyncAndVerdict("init", v_ret); 

    f_sleep(0.3);
    // createSessionRequest
    pt_gtp.send(RawGtpV2Msg:'482000cd00000000000003000100080062125400000000f14c00080053680100000000f156000d00186252410001625241000000ea530003006252415200010006570009008a00000001'O & f_RealIP2Oct(mp_localAddress) & '5700090187000000000a66b6b847001f0003736777036e736e03636f6d066d6e63313435066d6363323632046770727380000100fc63000100014f00050001000000007f000100004800080000000002000000015d001f00490001000550001600440900000000000000000000000000000000000000007200020021015f000200ab00'O);
    // createSessionResponse
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd

    f_sleep(0.3);
    // modifyBearerRequest
    pt_gtp.send(RawGtpV2Msg:'482200360001ee4600000500570009008a00000001'O & f_RealIP2Oct(mp_localAddress) & '5d00120049000100055700090080000030390a8c435d0300010004720002002101'O);
    // modifyBearerResponse
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
    f_selfOrClientSyncAndVerdict("attach", v_ret);
    f_selfOrClientSyncAndVerdict("lua", v_ret);
    f_selfOrClientSyncAndVerdict("TAU", v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO", v_ret);

    f_sleep(0.3);
    // deleteSessionRequest
    pt_gtp.send(RawGtpV2Msg:'482400240001ee4600000700490001000556000d00186252410002625241000000ea4d0002000800'O);
    // deleteSessionResponse
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
    f_selfOrClientSyncAndVerdict("detach", v_ret);

    f_postamble_S11 ();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_sGS_NS_001195_02_0016_pilot() runs on SGsComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var default def1; 
    var integer expectedins := 5 , expectedos := 6;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_SGsSyncDefault());
    
    f_SubscriberParameters(v_subscriberParameters);
    f_initSGs_r(  mp_sctpIpAddr_SGs_MSCVLR, 
                  mp_sctpPortNumber_SGs_MSCVLR, 
                  mp_sctpIpAddr_SGs_MME_New,
                  mp_sctpPortNumber_SGs_MME_New);
        
    def1 := activate( d_SctpInitPostDefault_sgs() );
    
    f_selfOrClientSyncAndVerdict("init", v_ret); 

      v_subscriberParameters.sgs.imsi := mp_sgs_imsi_1 ;
      v_subscriberParameters.sgs.lac := mp_s1AP_TAC_1 ;
      v_subscriberParameters.sgs.mccmnc := mp_sgs_mccmnc ;

      // Location update for combined imsi attach
      v_subscriberParameters.sgs.tai := a_SGsAP_TAI(mp_sgs_mccmnc, mp_s1AP_TAC_1); //rel9 update
      v_subscriberParameters.sgs.ecgi := a_SGsAP_ECGI(mp_sgs_mccmnc, 234); //rel9 update
      f_BasicLUR_procedure(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("attach", v_ret);
    
      // Location update for combined tau
      f_TAU_BasicLUR_procedure(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("lua", v_ret);
    
    f_selfOrClientSyncAndVerdict("TAU", v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO", v_ret);
    f_selfOrClientSyncAndVerdict("detach", v_ret);

      v_ret := f_shutdownSGs_s();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_sGS_NS_001195_02_0016_pilot_mirror() runs on SGsComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    g_v_verificationFlag := true;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_SGsSyncDefault() );
    
    f_SubscriberParameters(v_subscriberParameters);
    v_ret := f_initSGs( mp_sctpIpAddr_SGs_MME_New,
                        mp_sctpPortNumber_SGs_MME_New,
                        mp_sctpIpAddr_SGs_MSCVLR, 
                        mp_sctpPortNumber_SGs_MSCVLR );
    
    f_sleep(3.0);
    f_selfOrClientSyncAndVerdict("init", v_ret); 

    f_sleep(0.3);
    // location_update_request
    pt_sgsap.send(RawDiameterMsg:'09010829264107000000100937066d6d65633333096d6d65676963336531036d6d6503657063066d6e63313435066d63633236320b336770706e6574776f726b036f72670a010104050103540102040562f2100001070100230562128100012407621281000000ea'O);
    // location_update_accept
    pt_sgsap.receive;

    f_selfOrClientSyncAndVerdict("attach", v_ret);
    
    f_sleep(0.3);
    // location_update_request
    pt_sgsap.send(RawDiameterMsg:'09010829264107000000100937066d6d65633333096d6d65676963336531036d6d6503657063066d6e63313435066d63633236320b336770706e6574776f726b036f72670a010204050103540102070100230562128100022407621281000000ea'O);
    // location_update_accept
    pt_sgsap.receive;

    f_selfOrClientSyncAndVerdict("lua", v_ret);
    f_selfOrClientSyncAndVerdict("TAU", v_ret);
    f_selfOrClientSyncAndVerdict("ZMMO", v_ret);
    f_selfOrClientSyncAndVerdict("detach", v_ret);

    v_ret := f_shutdownSGs();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
  }


  import from SctpMessages { template all; };
  testcase tc_s1ap_payloadProtocolId() runs on MTC system TSI {
    var S1Comp    eNB := S1Comp.create("ENB");
    
    var S1Comp    eNBm := S1Comp.create("ENBm");
   
    var SyncPointList v_SyncPointList := {"init", "attach", "lua", "detach", c_poSyncPoint};

    eNB.start( f_s1ap_payloadProtocolId() );
    
    eNBm.start( f_s1ap_payloadProtocolId_mirror() );
    
    f_serverSyncClientsAndStop(2, v_SyncPointList);
    
    alt 
    {
      [] all component.done {setverdict(pass);}
    }
  }

/***************** S1 interface *****************/ 
  function f_s1ap_payloadProtocolId() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var template SctpMsgParams v_sctpMsgParams;
    var integer expectedins := 5 , expectedos := 6;
     
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S1SyncDefault() );
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);

    f_set_tos(136);
    f_sleep(0.5);  // cannot remove this
    f_enbParameters(v_enb_params);
    f_initSctpParameters(v_sctpMsgParams);
    v_ret := f_preamble_S1_s (v_enb_params); // enable ntdSctpStack
    
    f_SubscriberParameters(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("init", v_ret);  

    //for combined imsi attach
    v_subscriberParameters.s1.oldLocationAreaIdentification :=  COMMONIEs_Templates.a_LocationAreaIdentification(6, 2, 15, 2, 1, 0, 1);                             
    v_subscriberParameters.s1.locationAreaIdentification := ?;
     v_subscriberParameters.s1.attachType :=  e_combined_eps_imsi_attach; /*enas ATT_REQ ATTACH TYPE*/
    v_subscriberParameters.s1.attach_result_type := e_eps_imsi_attach;

    //Attach Procedure
    v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);
    log("TOS: ", g_v_receivedSctpMsg.ipHeader.tos);
    f_selfOrClientSyncAndVerdict("attach", v_ret);

    //SET different TAI to the UplinkNASTransport
    v_subscriberParameters.s1.S1AP_TAC := mp_s1AP_TAC_2;
    v_subscriberParameters.s1.tAC := a_TAC(2);
    v_subscriberParameters.s1.oldLocationAreaIdentification :=  COMMONIEs_Templates.a_LocationAreaIdentification(6, 2, 15, 2, 1, 0, 1);                             
    v_subscriberParameters.s1.locationAreaIdentification := ?;
    v_subscriberParameters.s1.epsUpdateType := e_combined_ta_la_updating; //(#1)
    v_subscriberParameters.s1.epsUpdateResult := e_combined_ta_la_updated ; // (#1)
    
    //Tau Procedure
    v_ret := f_s1_BasicTrackingAreaUpdateWithSecurity_Ul_Nas(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("lua", v_ret);
    f_set_tos(0);


    v_sctpMsgParams.flagLocal := 3;
    v_sctpMsgParams.sreamIdentifierLocal := g_uEAssociatedSctpOutStreamId;
    v_sctpMsgParams.payloadProIdenifierLocal := 18; // s1ap
    v_sctpMsgParams.dataStringLocal := '000B40380000030000000200010008000200D8001A0025240752004D7180BAA689B37F2760ACE25C08FAA61001200000040033080120204054007200'O;
    f_s1_DATA_s(v_sctpMsgParams);  // authenticationRequest

    f_s1_SACK_r(v_sctpMsgParams);

    v_sctpMsgParams.dataStringRemote := '000b40240000030000000200010008000200d8001a001110377fc4276600075d020005a020a80060'O;
    f_s1_DATA_r(v_sctpMsgParams);  // securityModeCommand

    pt_s1ap.receive(S1AP_PDU:?);


    f_sleep(0.2);
    //Detach Procedure
    v_ret := f_s1_BasicDetachWithSecurity(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("detach", v_ret);  

    f_postamble_S1_s (); // ntdSctpStack

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();

  }

  function f_s1ap_payloadProtocolId_mirror() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template EnbParameters v_enb_params;
    g_v_verificationFlag := true;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S1SyncDefault() );
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);

      f_enbParameters(v_enb_params);

      v_ret := f_preamble__S1m(v_enb_params);
      if (v_ret != e_success) {
        setverdict(fail);
        //f_CloseHSSComponent(v_ret);
        return;
      }

      // S1AP.S1SetupRequest
      pt_s1apNonUE.receive(S1AP_PDU:?);
      // S1AP.S1SetupResponse
      pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b00006212540000c3e100330057400119'O);
    f_selfOrClientSyncAndVerdict("init", v_ret);

      // attachRequest
      pt_s1ap.receive(S1AP_PDU:?);
      f_sleep(0.2);
      // authenticationRequest
      pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200010008000200d8001a0025240752004d7180baa689b37f2760ace25c08faa61001200000040033080120204054007200'O);
      // authenticationResponse
      pt_s1ap.receive(S1AP_PDU:?);

      f_sleep(0.2);
      // securityModeCommand
      pt_s1ap.send(RawGtpV2Msg:'000b40240000030000000200010008000200d8001a001110377fc4276600075d020005a020a80060'O);
      // securityModeComplete
      pt_s1ap.receive(S1AP_PDU:?);

      f_sleep(0.2);
      // S1AP.InitialContextSetupRequest
      pt_s1ap.send(RawGtpV2Msg:'00090080da0000070000000200010008000200d8004200060803e82007d0001800808a000034008084450009040f800a660a0b0000303975272edcdb8d01074202490640625241000100475201c10509ffffffff1f03736777036e736e03636f6d066d6e63313435066d636332363204677072730501c0a800015d0100300c23111f939602017648ffff003203815e02ffff500bf6625241c3e133c0000001130103540001172c5949640100f2006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069006a400100'O);
      // S1AP.InitialContextSetupResponse
      pt_s1ap.receive(S1AP_PDU:?);

      // attachComplete
      pt_s1ap.receive(S1AP_PDU:?);
    f_selfOrClientSyncAndVerdict("attach", v_ret);

      // trackingAreaUpdateRequest
      pt_s1ap.receive(S1AP_PDU:?);
      f_sleep(0.2);
      // trackingAreaUpdateAccept
      pt_s1ap.send(RawGtpV2Msg:'000b40420000030000000200010008000200d8001a002f2e27bf295d47020749015a49500bf6625241c3e133c00000025406406252410002130103540102172c5949640100f2'O);
      // trackingAreaUpdateComplete
      pt_s1ap.receive(S1AP_PDU:?);
      log("TOS: ", g_v_receivedSctpMsg.ipHeader.tos);
    f_selfOrClientSyncAndVerdict("lua", v_ret);

      // authenticationRequest
      pt_s1ap.receive(S1AP_PDU:?);
      // securityModeCommand
      pt_s1ap.send(RawGtpV2Msg:'000b40240000030000000200010008000200d8001a001110377fc4276600075d020005a020a80060'O);

      // detachRequest
      pt_s1ap.receive(S1AP_PDU:?);
      f_sleep(0.2);
      // detachAccept
      pt_s1ap.send(RawGtpV2Msg:'000b401c0000030000000200010008000200d8001a00090827c5290b54030746'O);

      f_sleep(0.2);
      // S1AP.UEContextReleaseCommand
      pt_s1ap.send(RawGtpV2Msg:'0017001000000200630004000100d80002400124'O);
      // S1AP.UEContextReleaseComplete
      pt_s1ap.receive(S1AP_PDU:?);
    f_selfOrClientSyncAndVerdict("detach", v_ret);

      f_postamble_S1 ();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();
  }

  testcase tc_NBAP_payloadProtocolId() runs on MTC system TSI {
    var S1Comp    eNB := S1Comp.create("ENB");
    
    var S1Comp    eNBm := S1Comp.create("ENBm");
   
    var SyncPointList v_SyncPointList := {"init", "attach", "lua", "detach", c_poSyncPoint};

    eNB.start( f_NBAP_payloadProtocolId() );
    
    eNBm.start( f_NBAP_payloadProtocolId_mirror() );
    
    f_serverSyncClientsAndStop(2, v_SyncPointList);
    
    alt 
    {
      [] all component.done {setverdict(pass);}
    }
  }

/***************** S1 interface *****************/ 
  function f_NBAP_payloadProtocolId() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
    var integer expectedins := 5 , expectedos := 6;
     
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S1SyncDefault() );
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);

    f_sleep(0.5);
    f_enbParameters(v_enb_params);
    v_ret := f_preamble_S1_s (v_enb_params); // enable ntdSctpStack
    
    f_SubscriberParameters(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("init", v_ret);  

    //for combined imsi attach
    v_subscriberParameters.s1.oldLocationAreaIdentification :=  COMMONIEs_Templates.a_LocationAreaIdentification(6, 2, 15, 2, 1, 0, 1);                             
    v_subscriberParameters.s1.locationAreaIdentification := ?;
     v_subscriberParameters.s1.attachType :=  e_combined_eps_imsi_attach; /*enas ATT_REQ ATTACH TYPE*/
    v_subscriberParameters.s1.attach_result_type := e_eps_imsi_attach;

    //Attach Procedure
    v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("attach", v_ret);

    f_sendNbap(RawGtpV2Msg: '123456789ABCDEF0'O); // fake NBAP message

    //SET different TAI to the UplinkNASTransport
    v_subscriberParameters.s1.S1AP_TAC := mp_s1AP_TAC_2;
    v_subscriberParameters.s1.tAC := a_TAC(2);
    v_subscriberParameters.s1.oldLocationAreaIdentification :=  COMMONIEs_Templates.a_LocationAreaIdentification(6, 2, 15, 2, 1, 0, 1);                             
    v_subscriberParameters.s1.locationAreaIdentification := ?;
    v_subscriberParameters.s1.epsUpdateType := e_combined_ta_la_updating; //(#1)
    v_subscriberParameters.s1.epsUpdateResult := e_combined_ta_la_updated ; // (#1)
    //Tau Procedure
    v_ret := f_s1_BasicTrackingAreaUpdateWithSecurity_Ul_Nas(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("lua", v_ret);


    //Detach Procedure
    v_ret := f_s1_BasicDetachWithSecurity(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("detach", v_ret);  

    f_postamble_S1_s (); // ntdSctpStack

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();

  }

  function f_NBAP_payloadProtocolId_mirror() runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template EnbParameters v_enb_params;
    g_v_verificationFlag := true;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S1SyncDefault() );
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);

      f_enbParameters(v_enb_params);
      v_ret := f_preamble__S1m(v_enb_params);
      if (v_ret != e_success) {
        setverdict(fail);
        //f_CloseHSSComponent(v_ret);
        return;
      }

      // S1AP.S1SetupRequest
      pt_s1apNonUE.receive;
      // S1AP.S1SetupResponse
      pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b00006212540000c3e100330057400119'O);
    f_selfOrClientSyncAndVerdict("init", v_ret);

      // attachRequest
      pt_s1ap.receive;
      f_sleep(0.2);
      // authenticationRequest
      pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200010008000200d8001a0025240752004d7180baa689b37f2760ace25c08faa61001200000040033080120204054007200'O);
      // authenticationResponse
      pt_s1ap.receive;

      f_sleep(0.2);
      // securityModeCommand
      pt_s1ap.send(RawGtpV2Msg:'000b40240000030000000200010008000200d8001a001110377fc4276600075d020005a020a80060'O);
      // securityModeComplete
      pt_s1ap.receive;

      f_sleep(0.2);
      // S1AP.InitialContextSetupRequest
      pt_s1ap.send(RawGtpV2Msg:'00090080da0000070000000200010008000200d8004200060803e82007d0001800808a000034008084450009040f800a660a0b0000303975272edcdb8d01074202490640625241000100475201c10509ffffffff1f03736777036e736e03636f6d066d6e63313435066d636332363204677072730501c0a800015d0100300c23111f939602017648ffff003203815e02ffff500bf6625241c3e133c0000001130103540001172c5949640100f2006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069006a400100'O);
      // S1AP.InitialContextSetupResponse
      pt_s1ap.receive;

      // attachComplete
      pt_s1ap.receive;
    f_selfOrClientSyncAndVerdict("attach", v_ret);
    
      pt_s1ap.receive(RawGtpV2Msg: ?); // NBAP message

      // trackingAreaUpdateRequest
      pt_s1ap.receive;
      f_sleep(0.2);
      // trackingAreaUpdateAccept
      pt_s1ap.send(RawGtpV2Msg:'000b40420000030000000200010008000200d8001a002f2e27bf295d47020749015a49500bf6625241c3e133c00000025406406252410002130103540102172c5949640100f2'O);
      // trackingAreaUpdateComplete
      pt_s1ap.receive;
    f_selfOrClientSyncAndVerdict("lua", v_ret);


      // detachRequest
      pt_s1ap.receive;
      f_sleep(0.2);
      // detachAccept
      pt_s1ap.send(RawGtpV2Msg:'000b401c0000030000000200010008000200d8001a00090827c5290b54030746'O);

      f_sleep(0.2);
      // S1AP.UEContextReleaseCommand
      pt_s1ap.send(RawGtpV2Msg:'0017001000000200630004000100d80002400124'O);
      // S1AP.UEContextReleaseComplete
      pt_s1ap.receive;
    f_selfOrClientSyncAndVerdict("detach", v_ret);

      f_postamble_S1 ();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
    f_disconnect4SelfOrClientExternalSync();
  }

//This requires following change in f_GtpV1_ReceiveWithIPAddressChange
//f_changeSUTAddress(e_udp, v_udpTcpMsgInd.sutAddress.ipAddress, mp_udpPortNumber_SGSN);
//->
//f_changeSUTAddress(e_udp, v_udpTcpMsgInd.sutAddress.ipAddress, v_udpTcpMsgInd.sutAddress.portField);

   testcase NS_48_43_0016() runs on MTC system TSI {
    var S1Comp eNB := S1Comp.create("ENB");
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var DIAMComp hSS := DIAMComp.create("HSS");
    var S3Comp sGSN := S3Comp.create("SGSN");

    var S1Comp eNBm    := S1Comp.create("ENBm");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");
    var DIAMComp hSSm  := DIAMComp.create("HSSm");
    var S3Comp sGSNm   := S3Comp.create("SGSNm");

    connect (eNB:pt_CM,sGSN:pt_CM);

    eNBm.start ( f_eNB_NS_48_43_0016m  () );
    sGWm.start ( f_sGW_NS_48_43_0016m  () );
    hSSm.start ( f_hSS_NS_48_43_0016m  () );
    sGSNm.start( f_sGSN_NS_48_43_0016m () );

    eNB.start ( f_eNB_NS_48_43_0016  () );
    sGW.start ( f_sGW_NS_48_43_0016  () );
    hSS.start ( f_hSS_NS_48_43_0016  () );
    sGSN.start( f_sGSN_NS_48_43_0016 () );
    
    f_serverSyncClientsAndStop(8,{"init","attach","detach","TAUfails",c_poSyncPoint});
  }

/***************** s1 interface *****************/ 

  function f_eNB_NS_48_43_0016  () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template EnbParameters v_enb_params;
	var template CMessageList v_guti;

    f_connect4SelfOrClientSync();
    f_connect4SelfOrClientExternalSync(g_v_extSyncTimeGuard);
    g_v_syncDefault := activate(d_S1SyncDefault());

    //SCTP Connection
    f_enbParameters(v_enb_params);
    v_ret := f_preamble_S1 (v_enb_params);
    f_SubscriberParameters(v_subscriberParameters);
	f_selfOrClientSyncAndVerdict("init",v_ret);	

    //Attach Procedure
	v_subscriberParameters.s1.S1AP_qCI := 5;
    v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("attach",v_ret);	

    // Detach

      v_ret := f_s1_BasicDetachWithSecurity(v_subscriberParameters);
	f_selfOrClientSyncAndVerdict("detach",v_ret);

    //TAU Request
    v_subscriberParameters.s1.mobileIdentity := a_EPSMobileIdentity('1111'B, e_even, e_guti, mp_old_guti);
	//guti is sent to the SGSN component. so that rac and lac values can be checked even guti is changed.
     v_guti := {
    {
      info := "GUTI",
      msg := {EPSMobileIdentity := v_subscriberParameters.s1.mobileIdentity}
    }
    }
    pt_CM.send(v_guti);
	
    v_subscriberParameters.s1.sequenceNumber_UL := 1;
    v_subscriberParameters.s1.epsUpdateActiveFlag := e_no_bearer_establishment_requested;
	v_subscriberParameters.s1.epsBearerIdentity :=5;
     v_ret := f_s1_TauReq_InitialUe_withoutLastVisitedTAI_s(v_subscriberParameters);
     
     //TAU reject
    if (v_ret == e_success){
		v_subscriberParameters.s1.cause := e_no_eps_bearer_context_activated;
	    v_ret := f_s1_PlainTauReject_r(v_subscriberParameters);
    }
    if (v_ret == e_success){
    v_ret := f_s1_UEContextReleaseCommand_rs(v_subscriberParameters);
    f_selfOrClientExternalSyncAndVerdict("TAUfails",v_ret);
    }	
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
	f_disconnect4SelfOrClientExternalSync();

  }

 /***************** s11 interface *****************/ 

  function f_sGW_NS_48_43_0016  () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
	var template SubscriberParameters v_subscriberParameters;

	f_connect4SelfOrClientSync();
	g_v_syncDefault := activate(d_S11SyncDefault());

    v_ret := f_preamble_S11 (  mp_udpIpAddr_S11_SGW,
                               mp_udpPortNumber_S11_SGW, 
			                   mp_udpIpAddr_S11_MME_New,
                               mp_udpPortNumber_S11_MME_New );

    f_SubscriberParameters(v_subscriberParameters);
    g_d_s11CommonDefault := activate(d_GtpV2CommonDefault());	
    f_selfOrClientSyncAndVerdict("init",v_ret);	

	// attach
	
	v_ret := f_s11_CreateSessionBasic (v_subscriberParameters);
    if (v_ret == e_success){
      v_ret :=  f_s11_ModifyBearerBasic (v_subscriberParameters);
	}
    f_selfOrClientSyncAndVerdict("attach",v_ret);   

    // Detach
    v_ret := f_s11_DeleteSessionBasic (v_subscriberParameters);
	f_selfOrClientSyncAndVerdict("detach",v_ret);

    //TAU
	
	/*v_subscriberParameters.s11_core7.ambr.aMBRValue.aPNAMBRforDownlink := 2048;
	v_subscriberParameters.s11_core7.ambr.aMBRValue.aPNAMBRforUplink := 1024;
	v_subscriberParameters.s11_core7.bearerQoS.bearerQoSValue.guaranteedBitRateForDownlink := *;
	v_subscriberParameters.s11_core7.bearerQoS.bearerQoSValue.guaranteedBitRateForUplink := *;
	v_subscriberParameters.s11_core7.bearerQoS.bearerQoSValue.priorityLevel := 11;
	v_subscriberParameters.s11_core7.bearerQoS.bearerQoSValue.labelQCI := '05'O;
	

	//	v_subscriberParameters.s11_core7.pgwFteidValue.interfaceType := e_s5_or_s8_pgw_gtp_c;
	v_subscriberParameters.s11_core7.pgwFteidValue.interfaceType := e_s5_or_s8_pgw_pmipv6;
	v_subscriberParameters.s11_core7.pgwFteidValue.ipv4Addr := mp_s11_PGWAddress;
	v_subscriberParameters.s11_core7.indication := a_Indication(?,a_IEInfo(0),a_IndicationValue(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,omit,omit,?)) ;
    v_subscriberParameters.s11_core7.indication.indicationValue.operationIndication := e_true;
	//TAU
    v_subscriberParameters.s11.eBI := *;										 
    v_ret := f_s11_CreateSessionRequest_PGW_FTEID_r(v_subscriberParameters);

    v_subscriberParameters.s11_core7.eBI := 5;
    v_ret := f_s11_CreateSessionResponse_s(v_subscriberParameters);*/
    f_selfOrClientSyncAndVerdict("TAUfails",v_ret);
    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
      
  }

 /***************** s6a interface *****************/

  function f_hSS_NS_48_43_0016 () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriptionData v_subscriptionData;
    f_SubscriberParameters(v_subscriberParameters);
	f_connect4SelfOrClientSync();

    v_ret := f_preambleDiameter( v_subscriberParameters,
                                 mp_sctpIpAddrS6aHLR, 
                                 mp_sctpPortNumberS6aHLR, 
                                 mp_sctpIpAddrS6aMMENew, 
                                 mp_sctpPortNumberS6aMMENew );

    
    f_selfOrClientSyncAndVerdict("init",v_ret);	


    v_subscriberParameters.s6a.r_contextIdentifier := 2;
    v_subscriberParameters.s6a.r_subscriptionData.grp.apnOiReplacement := omit;
    v_subscriberParameters.s6a.r_qosClassIdentifierEnum := e_interactive_THP1_SIyes_SSDna;
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.ambr.grp.maxRequestedBandwidthDl.maximumBandwidth := 2048000;
    v_subscriberParameters.s6a.r_subscriptionData.grp.aPNConfigurationProfile.grp.apnConfiguration[0].grp.ambr.grp.maxRequestedBandwidthUl.maximumBandwidth := 1024000;
    v_subscriberParameters.s6a.r_priorityOfAllocationAndRetention := 15;
    //v_subscriberParameters.s6a.r_serviceSelection.serviceName := "nsn.nokia.com";
    
    v_ret := f_receiveAirAndSendResponse(v_subscriberParameters);

    if(v_ret == e_success)
      {
	v_ret := f_BasicReceiveULRAndSendResponseThreeApn_sec_default(v_subscriberParameters);
      }
	  
    f_selfOrClientSyncAndVerdict("attach",v_ret); 
    f_selfOrClientSyncAndVerdict("detach",v_ret);	
    f_selfOrClientSyncAndVerdict("TAUfails",v_ret);
    f_Postamble_S6a(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

 /***************** Gn interface *****************/

   function f_sGSN_NS_48_43_0016( ) runs on S3Comp {

   var FncRetCode v_ret := e_success;
   var template SubscriberParameters v_subscriberParameters;
   var octetstring v_nasToken := 'ffff'O;
   var CMessageList v_nasTokenMsg;
   var CMessageList v_gutiMsg;
   var octetstring v_guti := 'ffff'O;
   var UnicodeText1to255 v_mnc_value;
   f_connect4SelfOrClientSync();
   
   f_preambleGtpV1( mp_udpIpAddr_S3Gn_SGSN, 
                    mp_udpPortNumber_S3Gn_SGSN, 
		            mp_udpIpAddr_S3Gn_MME_New, 
                    mp_udpPortNumber_S3Gn_MME_New );

   f_SubscriberParameters(v_subscriberParameters);
   g_def_GtpV1Default := activate( GtpV1Defaults.d_gtpV1Default(true));
   f_selfOrClientSyncAndVerdict("init",v_ret);	
   f_selfOrClientSyncAndVerdict("attach",v_ret);	
   f_selfOrClientSyncAndVerdict("detach",v_ret);
   //TAU
   v_ret := f_receiveCM(?,v_gutiMsg);
   if (v_ret == e_success){
     v_guti := v_gutiMsg[0].msg.EPSMobileIdentity.digits;
	 }
   log(v_guti);

   f_gutiMap2RaiPtmsi(v_subscriberParameters, v_guti );
   v_subscriberParameters.gn.pTMSISignature := '800BBF'O //this have to be same value than in TAU Request!!

   
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos4Fields.guaranteedBitRateForDownlink := 100;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos4Fields.guaranteedBitRateForUplink:= 90;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos4Fields.maximumBitRateForDownlink:= 151;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos4Fields.maximumBitRateForUplink:= 135;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos4Fields.sdu_ErrorRatio:= ?; //e_1x10exp6;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos4Fields.trafficClass:= ?; //e_InteractiveClass;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos4Fields.trafficHandlingPriority:= ?; //e_PriorityLevel1;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos4Fields.transferDelay:= 10;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.qos99Fields.allocation_retentionPriority := 3;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.sourceStatisticsDescriptor:= ?; //e_Unknown;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.signallingIndication:= ?; //e_OptimisedForSignallingTraffic;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.maximumBitRateForDownlinkExt := 0;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.guaranteedBitRateForDownlinkExt := 0;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.maximumBitRateForUplinkExt := 0;
   v_subscriberParameters.gn.qosNeg.qosFormat5_18.guaranteedBitRateForUplinkExt := 0;

   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos4Fields.guaranteedBitRateForDownlink := 100;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos4Fields.guaranteedBitRateForUplink:= 90;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos4Fields.maximumBitRateForDownlink:= 151;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos4Fields.maximumBitRateForUplink:= 135;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos4Fields.sdu_ErrorRatio:= ?; //e_1x10exp6;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos4Fields.trafficClass:= ?; //e_InteractiveClass;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos4Fields.trafficHandlingPriority:= ?; //e_PriorityLevel1;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos4Fields.transferDelay:= 10;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.qos99Fields.allocation_retentionPriority := 3;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.sourceStatisticsDescriptor:= ?; //e_Unknown;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.signallingIndication:= ?; //e_OptimisedForSignallingTraffic;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.maximumBitRateForDownlinkExt := 0;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.guaranteedBitRateForDownlinkExt := 0;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.maximumBitRateForUplinkExt := 0;
   v_subscriberParameters.gn.qosSub.qosFormat5_18.guaranteedBitRateForUplinkExt := 0;

   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos4Fields.guaranteedBitRateForDownlink := 100;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos4Fields.guaranteedBitRateForUplink:= 90;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos4Fields.maximumBitRateForDownlink:= 151;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos4Fields.maximumBitRateForUplink:= 135;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos4Fields.sdu_ErrorRatio:= ?; //e_1x10exp6;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos4Fields.trafficClass:= ?; //e_InteractiveClass;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos4Fields.trafficHandlingPriority:= ?; //e_PriorityLevel1;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos4Fields.transferDelay:= 10;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.qos99Fields.allocation_retentionPriority := 3;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.sourceStatisticsDescriptor:= ?; //e_Unknown;
   v_subscriberParameters.gn.qosReq.qosFormat5_18.signallingIndication:= ?; //e_OptimisedForSignallingTraffic;
   	v_subscriberParameters.gn.qosReq.qosFormat5_18.maximumBitRateForDownlinkExt := 0;
	v_subscriberParameters.gn.qosReq.qosFormat5_18.guaranteedBitRateForDownlinkExt := 0;
	v_subscriberParameters.gn.qosReq.qosFormat5_18.maximumBitRateForUplinkExt := 0;
	v_subscriberParameters.gn.qosReq.qosFormat5_18.guaranteedBitRateForUplinkExt := 0;

 
  v_subscriberParameters.gn.pdpAddress := 'C0A80001'O;
  v_subscriberParameters.gn.sgsnAddressForControlPlane  := ?; //mp_gn_sGSN_address;
  v_mnc_value := "mnc" & hex2str(mp_mnc_1);

  if( 2 == lengthof(mp_mnc_1))
        {
                v_mnc_value := "mnc0" & hex2str(mp_mnc_1);
        }      
  v_subscriberParameters.gn.apn := {
                                   {
                                    lengthField := 3,
                                    labelField := "sgw"
                                    },
                                   {
                                    lengthField := 3,
                                    labelField := "nsn"
                                    },
                                   {
                                    lengthField := 2,
                                    labelField := "fi"
                                    },
                                    {
                                    lengthField := 6,
                                    labelField := v_mnc_value
                                    },
                                    {
                                    lengthField := 6,
                                    labelField := "mcc" & hex2str(mp_mcc_1)
                                    },
                                    {
                                    lengthField := 4,
                                    labelField := "gprs"
                                    }
                                   };
   v_subscriberParameters.gn.routeingAreaIdentity.plmnId := '629251'O;
   v_subscriberParameters.gn.routeingAreaIdentity.lac   := '1234'O;
   log(v_subscriberParameters.gn.teid_cp);
   log(v_subscriberParameters.gn.sequenceNumber);
   log(v_subscriberParameters.gn.causes);
   log(v_subscriberParameters.gn.imsi);
   log(v_subscriberParameters.gn.sgsnAddressForControlPlane);

   v_ret:= f_gtpv1_SGSNContextRequest_r (v_subscriberParameters);

   v_subscriberParameters.gn.sgsnAddressForControlPlane := '14253647'O;
  if( v_ret == e_success)
    {  
    	v_ret:= f_gtpv1_SGSNContextResponse_s_no_PDPContext(v_subscriberParameters); 
    }
    if( v_ret == e_success)
    {
	    v_subscriberParameters.gn.causes := ?; //e_SystemFailure;
    	v_ret:= f_gtpv1_SGSNContextAcknowledge_r (v_subscriberParameters); 
    } 	
   f_selfOrClientSyncAndVerdict("TAUfails",v_ret);
   
   f_postambleGtpV1();      
   f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
   f_disconnect4SelfOrClientSync();
  }

  function f_eNB_NS_48_43_0016m () runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S1SyncDefault());
    
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
        
    v_ret := f_preamble__S1m (v_enb_params);
    
    //f_sleep (5.0);
    
    // SetupReg
    pt_s1apNonUE.receive;
    // SetupResponse
    pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    
    f_selfOrClientSyncAndVerdict("init",v_ret);
    

    //AttachReq
    pt_s1ap.receive;
    //AuthReq
    pt_s1ap.send(RawGtpV2Msg:'000b403b00000300000005c0900000dc0008000200d8001a00252407520064880492394b2f2e651e814adb3058d71000000000114227080102014051205001'O)
    
    //AuthResp
    pt_s1ap.receive;
    // SecurityModeCommand
    pt_s1ap.send(RawGtpV2Msg:'000b402700000300000005c0900000dc0008000200d8001a001110377fc4276600075d020005a020a80060'O)

    //SecurityModeComplete
    pt_s1ap.receive;

    //RabSetupList (Attach accept) 0a66fa46 -> 0A66B630 -> 0a660a0b
    pt_s1ap.send(RawGtpV2Msg:'00090080d500000700000005c0900000dc0008000200d8004200060813882013880018008082000034007d4500053c0f800a660a0b000030396e278260130101074201490640629251000100475201c10505ffffffff1f03736777036e736e03636f6d066d6e63313539066d636332363204677072730501c0a800015d0100300c0b931f739687977629ffff103203835e02ffff500bf6629251c3ef33e4000072172c5949640100006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069006a400100'O)

    //RabSetUpListResp
    pt_s1ap.receive;

    //Attach Complete
    pt_s1ap.receive;
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);

    //DetachRequest
    pt_s1ap.receive;
    pt_s1ap.send(RawGtpV2Msg:'000b401f00000300000005c0900000dc0008000200d8001a000908279411114a020746'O)

    //UEContextRelease command
    pt_s1ap.send(RawGtpV2Msg:'00170013000002006300070c900000dc00d80002400124'O)
    pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("detach",v_ret);
    
    //trackingAreaUpdateRequest 
    pt_s1ap.receive;

    //reject
    pt_s1ap.send(RawGtpV2Msg:'000b401a00000300000005c0900000dd0008000200d8001a000403074b28'O)
    //UE release command
    pt_s1ap.send(RawGtpV2Msg:'00170013000002006300070c900000dd00d80002400126'O)
    pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("TAUfails",v_ret);
    
    f_postamble_S1 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    
  }
  
  /***************** S11 interface *****************/

  function f_sGW_NS_48_43_0016m  () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    
    var octetstring v_createSesson := 
'482000cd00000000000523000100080062129500000000f14c00080053680100000000f156000d00186292510001629251000000ea530003006292515200010006570009008a90000051'O &
    f_RealIP2Oct(mp_localAddress) & //0aff9318
'5700090187000000000a66b6b847001f0003736777036e736e03636f6d066d6e63313539066d6363323632046770727380000100fc63000100014f00050001000000007f000100004800080000000400000008005d001f004900010005500016007c0500000000000000000000000000000000000000007200020021015f000200ab00'O;


    var octetstring v_modifyBearer := 
    '482200360001ee4600052600570009008a90000051'O &
    f_RealIP2Oct(mp_localAddress) & //0aff9318
    '5d00120049000100055700090080000030390a8c435d0300010003720002002101'O;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    if (f_preamble_S11 ( mp_udpIpAddr_S11_MME_New,
                         mp_udpPortNumber_S11_MME_New,
                         mp_udpIpAddr_S11_SGW,
                         mp_udpPortNumber_S11_SGW) != e_success){
      setverdict(fail);
    }
    f_selfOrClientSyncAndVerdict("init",v_ret);


    f_sleep (3.0);
    
    //createSessionRequest
    pt_gtp.send(RawGtpV2Msg:v_createSesson)
    
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
    
    // Modify Bearer Request
    pt_gtp.send(RawGtpV2Msg:v_modifyBearer)
    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd

    f_selfOrClientSyncAndVerdict("attach",v_ret);

pt_gtp.send(RawGtpV2Msg:'482400240001ee4600052900490001000556000d00186292510001629251000000ea4d0002000800'O)

    pt_gtp.receive;
    pt_gtp.receive;//UdpMessageInd
    f_selfOrClientSyncAndVerdict("detach",v_ret);
    f_selfOrClientSyncAndVerdict("TAUfails",v_ret);

    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

  /////////////////////// S6A interface ///////////////////////////////////////////7

  function f_hSS_NS_48_43_0016m () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
    f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew,
                                     mp_sctpPortNumberS6aMMENew,
                                     mp_sctpIpAddrS6aHLR,
                                     mp_sctpPortNumberS6aHLR);
    
    //CER
    f_sleep (16.0);
    pt_diameter.send(RawDiameterMsg:'01010000bc80000101000000000db01783000014720000010b0000000c00005678000001014000000e00010a66b6640000000001084000001a6f726967696e686f73742e6d6d6d2e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000010d0000000d464c4558490000000000010a4000000c00006f2a000001094000000c000028af00000104400000200000010a4000000c000028af000001024000000c01000023000001024000000c01000023'O)
    
    pt_diameter.receive;
    
    f_selfOrClientSyncAndVerdict("init",v_ret);
    
    f_sleep (1.0);
    pt_diameter.send(RawDiameterMsg:'01010001dcc000013e010000230000000100000001000001074000002c616363657373706f696e74372e61636d652e636f6d3b313837363534333231303b353233000001154000000c00000000000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d0000012540000016686d736578616d706c652e636f6d00000000011b400000136578616d706c652e636f6d00000000014000001d616363657373706f696e74372e61636d652e636f6d0000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000010000027680000010000028af0202020200000580c000003c000028af00000582c0000010000028af0000000100000584c0000010000028af0000000200000583c000000e000028af1234000000000581c000003c000028af00000582c0000010000028af0000000100000584c0000010000028af0000000200000583c000000e000028af123400000000057fc000000f000028af456789000000011c40000034000001184000001d616363657373706f696e74372e61636d652e636f6d000000000000214000000b012345000000011a4000001d616363657373706f696e74372e61636d652e636f6d000000'O)

pt_diameter.receive;


pt_diameter.send(RawDiameterMsg:'0101000120c000013c010000238390d2098390d20900000107400000244d4d452e4e534e2e434f4d3b333832353230353336323b3533373633000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d0000000140000017323632313539303030303030303031000000057dc0000010000028af0000007a0000057fc000000f000028af6292510000000408c0000010000028af000003ec0000064f80000010000028af000000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000000000027680000010000028af00000000'O)

 pt_diameter.receive;
 
 
 f_selfOrClientSyncAndVerdict("attach",v_ret);
 f_selfOrClientSyncAndVerdict("detach",v_ret);
 f_selfOrClientSyncAndVerdict("TAUfails",v_ret);
 
    // DPR / DPA
 pt_diameter.receive;
 f_sleep(0.2);
 pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);
 
 f_sleep(0.5);
 
 //f_Postamble_S6a(v_subscriberParameters);
 f_Postamble_S6a_WithoutShutdown();
 //f_sendShutdownS6a(); // This sends SCTP shutdown primitive
 f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
 f_disconnect4SelfOrClientSync();

  }

   function f_sGSN_NS_48_43_0016m( ) runs on S3Comp {

   var FncRetCode v_ret := e_success;
   //var template SgsnSubscriberParameters v_subscriberParameters;
   //var UnicodeText1to255 v_mnc_value;
   var CMessageList v_gutiMsg;
   var octetstring v_guti := 'ffff'O;

   f_connect4SelfOrClientSync();
   
   f_preambleGtpV1( mp_udpIpAddr_S3Gn_MME_New, 
                    mp_udpPortNumber_S3Gn_MME_New,
                    mp_udpIpAddr_S3Gn_SGSN, 
                    mp_udpPortNumber_S3Gn_SGSN 
                     );

   //f_InitSgsnSubscriberParameters(v_subscriberParameters);
   g_def_GtpV1Default := activate( GtpV1Defaults.d_gtpV1Default(true));
   f_selfOrClientSyncAndVerdict("init",v_ret);	



   log(v_guti);
   f_selfOrClientSyncAndVerdict("attach", v_ret);
   f_selfOrClientSyncAndVerdict("detach",v_ret);
   f_sleep(2.0);
   //Sgsn context request
   pt_gtpv1.send(RawGtpV1Msg:'323200220000000000380000036292511234c005c03300c20c800bbf0dfe110000004a8500040aff9319'O);

   pt_gtpv1.receive;
   pt_gtpv1.receive;

   f_sleep(2.0); //30000e5 --> 7000005
   pt_gtpv1.send(RawGtpV1Msg:'323400060000004a0038000001cc'O);
    
   f_selfOrClientSyncAndVerdict("TAUfails", v_ret);
 
   f_postambleGtpV1();      
   f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
   f_disconnect4SelfOrClientSync();
  }


  testcase NS_68_26_0001() runs on MTC system TSI {
    //var S1Comp eNB := S1Comp.create("ENB");
    //var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    //var DIAMComp hSS := DIAMComp.create("HSS");
    var X2Comp LIB := X2Comp.create("LIB");
    var X2Comp LIBm1 := X2Comp.create("LIBm1");
    var X2Comp LIBm2 := X2Comp.create("LIBm2");
    var X2Comp LIBm3 := X2Comp.create("LIBm3");
    //var X1Comp LIC := X1Comp.create("LIC");
    
    //eNB.start( f_eNB_NS_68_26_0001 () );
    //sGW.start( f_sGW_NS_68_26_0001 () );
    //hSS.start( f_hSS_NS_68_26_0001 () );
    LIB.start( f_LIB_NS_68_26_0001 () );
    //LIC.start( f_LIC_NS_68_26_0001 () );

    LIBm1.start( f_LIB_NS_68_26_0001m1 () );
    LIBm2.start( f_LIB_NS_68_26_0001m2 () );
    LIBm3.start( f_LIB_NS_68_26_0001m3 () );
    
    f_serverSyncClientsAndStop(4,{"init",/*"activate1","activate2","attach",
    "deletelie","X1_2Init","detach","deactivate",*/ c_poSyncPoint});
    
  }

  function f_LIB_NS_68_26_0001 () runs on X2Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var integer IMSISeq := 3;
    var integer MSISDNSeq := 5;
    
    f_SubscriberParameters(v_subscriberParameters);        

    //Syncserver init
    f_connect4SelfOrClientSync();
    
    //X2 init
    //g_v_syncDefault := activate(d_Lip2SyncDefaultX2()); paberg: commented out. Duplicated with preamble
    v_ret := f_preamble_x2 (mp_tcpIpAddrX2LIB,
                           mp_tcpPortNumberX2LIB,
                           mp_tcpIpAddrX2MME,
                           mp_tcpPortNumberX2MME
                           );
 
    g_d_lip2CommonDefault := activate(d_X2CommonDefault2());
    //activate(d_X2TcpConnectInd());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    //f_disableIprSuccessIndications();

    //Activate prim target
    v_subscriberParameters.x.reqSeqNbr := IMSISeq;
    v_ret := f_GenIriForActivaionIMSINotAttached(v_subscriberParameters,mp_li_imsi_1);
    /*f_selfOrClientSyncAndVerdict("activate1",v_ret);

    //Activate sec target
    v_subscriberParameters.x.reqSeqNbr := MSISDNSeq;
    v_ret := f_GenIriForActivaionMSISDNNotAttached(v_subscriberParameters,s6AMSISDNtoLIMISIDN(mp_s6a_msisdn_1));
    f_selfOrClientSyncAndVerdict("activate2",v_ret);

    //Attach
    v_subscriberParameters.x.reqSeqNbr := IMSISeq;
    v_ret := f_GenIriForAttachIMSI(v_subscriberParameters,mp_li_imsi_1);
    f_selfOrClientSyncAndVerdict("attach",v_ret);
    
    //Delete LIE -> deactivation -> No genIRI
    f_selfOrClientSyncAndVerdict("deletelie",v_ret); 
    f_selfOrClientSyncAndVerdict("X1_2Init",v_ret);
    
    // No genIRI because of deletelie
    f_selfOrClientSyncAndVerdict("detach",v_ret); 
    
    // No genIRI because of deletelie
    f_selfOrClientSyncAndVerdict("deactivate",v_ret);*/

    //Post scripts
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_postamble_x2();
  }

  function f_LIB_NS_68_26_0001m1 () runs on X2Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    
    f_SubscriberParameters(v_subscriberParameters);        

    //Syncserver init
    f_connect4SelfOrClientSync();
    
    //X2 init
    //g_v_syncDefault := activate(d_Lip2SyncDefaultX2()); paberg: commented out. Duplicated with preamble
    v_ret := f_preamble_x2_client (
                           mp_tcpIpAddrX2MME,
                           50138,
                           mp_tcpIpAddrX2LIB,
                           mp_tcpPortNumberX2LIB
                           );
 
    activate(d_X2CommonDefault2());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_sleep(1.0);
    pt_x2.send(RawDiameterMsg:'0032000200000201002a00b800020002008f0002007500b10004ffe921e500b2000400000000009c00040000000100aa00020007aaaa5555'O);
    pt_x2.receive;

    f_sleep(0.6);

    pt_x2.send(RawDiameterMsg:'00c5000200000201002a00b800020002008f0002007800b100045257b97000b2000400000000009c00040000000000aa00020007008600040aff8c2802080010008c00040000000200850004000000030211001e00af0002000100ae000200010095000200010081000862028100000000F101fa001a007400020006020e001000b100040000000100b200040000000001f80021007300020007021400170065000d31302e3235352e3134302e343000660002000400a10002000100ab00020002008700020006aaaa5555'O);
    //pt_x2.receive;

    //Post scripts
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_postamble_x2();
}

  function f_LIB_NS_68_26_0001m2 () runs on X2Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    
    f_SubscriberParameters(v_subscriberParameters);        

    //Syncserver init
    f_connect4SelfOrClientSync();
    
    //X2 init
    //g_v_syncDefault := activate(d_Lip2SyncDefaultX2()); paberg: commented out. Duplicated with preamble
    v_ret := f_preamble_x2_client (
                           mp_tcpIpAddrX2MME,
                           59179,
                           mp_tcpIpAddrX2LIB,
                           mp_tcpPortNumberX2LIB
                           );
 
    activate(d_X2CommonDefault2());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_sleep(1.2);

    pt_x2.send(RawDiameterMsg:'0032000200000201002a00b800020002008f0002007500b10004ffe921e500b2000400000000009c00040000000100aa00020007aaaa5555'O);
    pt_x2.receive;

    f_sleep(0.8);

    pt_x2.send(RawDiameterMsg:'00c5000200000201002a00b800020002008f0002007800b100045257b97000b2000400000000009c00040000000000aa00020007008600040aff8c2802080010008c00040000000200850004000000030211001e00af0002000100ae000200010095000200010081000862028100000000F101fa001a007400020006020e001000b100040000000100b200040000000001f80021007300020007021400170065000d31302e3235352e3134302e343000660002000400a10002000100ab00020002008700020006aaaa5555'O);
    //pt_x2.receive;

    //Post scripts
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_postamble_x2();
  }

  function f_LIB_NS_68_26_0001m3 () runs on X2Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    
    f_SubscriberParameters(v_subscriberParameters);        

    //Syncserver init
    f_connect4SelfOrClientSync();
    
    //X2 init
    //g_v_syncDefault := activate(d_Lip2SyncDefaultX2()); paberg: commented out. Duplicated with preamble
    v_ret := f_preamble_x2_client (
                           mp_tcpIpAddrX2MME,
                           45663,
                           mp_tcpIpAddrX2LIB,
                           mp_tcpPortNumberX2LIB
                           );
 
    activate(d_X2CommonDefault2());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_sleep(1.4);

    pt_x2.send(RawDiameterMsg:'0032000200000201002a00b800020002008f0002007500b10004ffe921e500b2000400000000009c00040000000100aa00020007aaaa5555'O);
    pt_x2.receive;

    //Post scripts
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_postamble_x2();
  }




  testcase NS_68_26_0001_IndToDataPort() runs on MTC system TSI {
    //var S1Comp eNB := S1Comp.create("ENB");
    //var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    //var DIAMComp hSS := DIAMComp.create("HSS");
    var X2Comp LIB := X2Comp.create("LIB");
    var X2Comp LIBm1 := X2Comp.create("LIBm1");
    var X2Comp LIBm2 := X2Comp.create("LIBm2");
    var X2Comp LIBm3 := X2Comp.create("LIBm3");
    //var X1Comp LIC := X1Comp.create("LIC");
    
    //eNB.start( f_eNB_NS_68_26_0001 () );
    //sGW.start( f_sGW_NS_68_26_0001 () );
    //hSS.start( f_hSS_NS_68_26_0001 () );
    LIB.start( f_LIB_NS_68_26_0001_2 () );
    //LIC.start( f_LIC_NS_68_26_0001 () );

    LIBm1.start( f_LIB_NS_68_26_0001m1_2 () );
    LIBm2.start( f_LIB_NS_68_26_0001m2_2 () );
    LIBm3.start( f_LIB_NS_68_26_0001m3_2 () );
    
    f_serverSyncClientsAndStop(4,{"init",/*"activate1","activate2","attach",
    "deletelie","X1_2Init","detach","deactivate",*/ c_poSyncPoint});
    
  }

  function f_LIB_NS_68_26_0001_2 () runs on X2Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var integer IMSISeq := 3;
    var integer MSISDNSeq := 5;
    
    f_SubscriberParameters(v_subscriberParameters);        

    //Syncserver init
    f_connect4SelfOrClientSync();
    
    //X2 init
    //g_v_syncDefault := activate(d_Lip2SyncDefaultX2()); paberg: commented out. Duplicated with preamble
    v_ret := f_preamble_x2IndToDataPort (mp_tcpIpAddrX2LIB,
                           mp_tcpPortNumberX2LIB,
                           mp_tcpIpAddrX2MME,
                           mp_tcpPortNumberX2MME
                           );
 
    g_d_lip2CommonDefault := activate(d_X2CommonDefault2IndToDataPort());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    //f_disableIprSuccessIndications();

    //Activate prim target
    v_subscriberParameters.x.reqSeqNbr := IMSISeq;
    v_ret := f_GenIriForActivaionIMSINotAttached(v_subscriberParameters,mp_li_imsi_1);
    /*f_selfOrClientSyncAndVerdict("activate1",v_ret);

    //Activate sec target
    v_subscriberParameters.x.reqSeqNbr := MSISDNSeq;
    v_ret := f_GenIriForActivaionMSISDNNotAttached(v_subscriberParameters,s6AMSISDNtoLIMISIDN(mp_s6a_msisdn_1));
    f_selfOrClientSyncAndVerdict("activate2",v_ret);

    //Attach
    v_subscriberParameters.x.reqSeqNbr := IMSISeq;
    v_ret := f_GenIriForAttachIMSI(v_subscriberParameters,mp_li_imsi_1);
    f_selfOrClientSyncAndVerdict("attach",v_ret);
    
    //Delete LIE -> deactivation -> No genIRI
    f_selfOrClientSyncAndVerdict("deletelie",v_ret); 
    f_selfOrClientSyncAndVerdict("X1_2Init",v_ret);
    
    // No genIRI because of deletelie
    f_selfOrClientSyncAndVerdict("detach",v_ret); 
    
    // No genIRI because of deletelie
    f_selfOrClientSyncAndVerdict("deactivate",v_ret);*/

    //Post scripts
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_postamble_x2();
  }

  function f_LIB_NS_68_26_0001m1_2 () runs on X2Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    
    f_SubscriberParameters(v_subscriberParameters);        

    //Syncserver init
    f_connect4SelfOrClientSync();
    
    //X2 init
    //g_v_syncDefault := activate(d_Lip2SyncDefaultX2()); paberg: commented out. Duplicated with preamble
    v_ret := f_preamble_x2_client (
                           mp_tcpIpAddrX2MME,
                           50138,
                           mp_tcpIpAddrX2LIB,
                           mp_tcpPortNumberX2LIB
                           );
 
    activate(d_X2CommonDefault2());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_sleep(1.0);
    pt_x2.send(RawDiameterMsg:'0032000200000201002a00b800020002008f0002007500b10004ffe921e500b2000400000000009c00040000000100aa00020007aaaa5555'O);
    pt_x2.receive;

    f_sleep(0.001);

    pt_x2.send(RawDiameterMsg:'00c5000200000201002a00b800020002008f0002007800b100045257b97000b2000400000000009c00040000000000aa00020007008600040aff8c2802080010008c00040000000200850004000000030211001e00af0002000100ae000200010095000200010081000862028100000000F101fa001a007400020006020e001000b100040000000100b200040000000001f80021007300020007021400170065000d31302e3235352e3134302e343000660002000400a10002000100ab00020002008700020006aaaa5555'O);
    //pt_x2.receive;

    //Post scripts
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_postamble_x2();
}

  function f_LIB_NS_68_26_0001m2_2 () runs on X2Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    
    f_SubscriberParameters(v_subscriberParameters);        

    //Syncserver init
    f_connect4SelfOrClientSync();
    
    //X2 init
    //g_v_syncDefault := activate(d_Lip2SyncDefaultX2()); paberg: commented out. Duplicated with preamble
    v_ret := f_preamble_x2_client (
                           mp_tcpIpAddrX2MME,
                           59179,
                           mp_tcpIpAddrX2LIB,
                           mp_tcpPortNumberX2LIB
                           );
 
    activate(d_X2CommonDefault2());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_sleep(1.001);

    pt_x2.send(RawDiameterMsg:'0032000200000201002a00b800020002008f0002007500b10004ffe921e500b2000400000000009c00040000000100aa00020007aaaa5555'O);
    pt_x2.receive;

    f_sleep(0.2);

    pt_x2.send(RawDiameterMsg:'00c5000200000201002a00b800020002008f0002007800b100045257b97000b2000400000000009c00040000000000aa00020007008600040aff8c2802080010008c00040000000200850004000000030211001e00af0002000100ae000200010095000200010081000862028100000000F101fa001a007400020006020e001000b100040000000100b200040000000001f80021007300020007021400170065000d31302e3235352e3134302e343000660002000400a10002000100ab00020002008700020006aaaa5555'O);
    //pt_x2.receive;

    //Post scripts
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_postamble_x2();
  }

  function f_LIB_NS_68_26_0001m3_2 () runs on X2Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    
    f_SubscriberParameters(v_subscriberParameters);        

    //Syncserver init
    f_connect4SelfOrClientSync();
    
    //X2 init
    //g_v_syncDefault := activate(d_Lip2SyncDefaultX2()); paberg: commented out. Duplicated with preamble
    v_ret := f_preamble_x2_client (
                           mp_tcpIpAddrX2MME,
                           45663,
                           mp_tcpIpAddrX2LIB,
                           mp_tcpPortNumberX2LIB
                           );
 
    activate(d_X2CommonDefault2());
    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_sleep(1.001);

    pt_x2.send(RawDiameterMsg:'0032000200000201002a00b800020002008f0002007500b10004ffe921e500b2000400000000009c00040000000100aa00020007aaaa5555'O);
    pt_x2.receive;

    //Post scripts
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
    f_postamble_x2();
  }


  testcase tc_s1ap_default() runs on MTC system TSI {
    var S1Comp  eNB := S1Comp.create("ENB");
    var S1Comp  eNBm := S1Comp.create("ENBm");

    eNB.start( f_s1ap_default_ENB(0) );
    eNBm.start( f_s1ap_default_ENBm(0) );

    f_serverSyncClientsAndStop(2, {"init", "attach", "s1release", c_poSyncPoint} );
  }

  testcase tc_s1ap_default3ENB() runs on MTC system TSI {
    var S1Comp  eNB1 := S1Comp.create("ENB1");
    var S1Comp  eNB2 := S1Comp.create("ENB2");
    var S1Comp  eNB3 := S1Comp.create("ENB3");

    var S1Comp  eNB1m := S1Comp.create("ENB1m");
    var S1Comp  eNB2m := S1Comp.create("ENB2m");
    var S1Comp  eNB3m := S1Comp.create("ENB3m");

    eNB1.start( f_s1ap_default_ENB(0) );
    eNB2.start( f_s1ap_default_ENB(1) );
    eNB3.start( f_s1ap_default_ENB(2) );
    
    eNB1m.start( f_s1ap_default_ENBm(0) );
    eNB2m.start( f_s1ap_default_ENBm(1) );
    eNB3m.start( f_s1ap_default_ENBm(2) );

    f_serverSyncClientsAndStop(6, {"init", "attach", "s1release", c_poSyncPoint} );
  }

  testcase tc_s1ap_default7ENB() runs on MTC system TSI {
    var S1Comp  eNB[7];
    var S1Comp  eNBm[7];
    var integer i;

    for (i := 0; i < 7; i := i+1)
    {
      eNB[i] := S1Comp.create("ENB" & int2str(i+1));
    }

    for (i := 0; i < 7; i := i+1)
    {
      eNBm[i] := S1Comp.create("ENB" & int2str(i+1) & "m");
    }

    for (i := 0; i < 7; i := i+1)
    {
      eNB[i].start( f_s1ap_default_ENB(i) );
      eNBm[i].start( f_s1ap_default_ENBm(i) );
    }
    
    f_serverSyncClientsAndStop(14, {"init", "attach", "s1release", c_poSyncPoint} );
  }

  testcase tc_s1ap_defaultWithHSS() runs on MTC system TSI {
    var S1Comp  eNB := S1Comp.create("ENB");
    var DIAMComp hSS := DIAMComp.create("HSS");

    var S1Comp  eNBm := S1Comp.create("ENBm");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    eNB.start( f_s1ap_default_ENB(0) );
    hSS.start( f_s1ap_default_HSS() );

    eNBm.start( f_s1ap_default_ENBm(0) );
    hSSm.start( f_s1ap_default_HSSm() );

    f_serverSyncClientsAndStop(4, {"init", "attach", "s1release", c_poSyncPoint} );
  }

  testcase tc_s1ap_default3ENBWithHSS() runs on MTC system TSI {
    var S1Comp  eNB1 := S1Comp.create("ENB1");
    var S1Comp  eNB2 := S1Comp.create("ENB2");
    var S1Comp  eNB3 := S1Comp.create("ENB3");
    var DIAMComp hSS := DIAMComp.create("HSS");

    var S1Comp  eNB1m := S1Comp.create("ENB1m");
    var S1Comp  eNB2m := S1Comp.create("ENB2m");
    var S1Comp  eNB3m := S1Comp.create("ENB3m");
    var DIAMComp hSSm := DIAMComp.create("HSSm");

    eNB1.start( f_s1ap_default_ENB(0) );
    eNB2.start( f_s1ap_default_ENB(1) );
    eNB3.start( f_s1ap_default_ENB(2) );
    hSS.start( f_s1ap_default_HSS() );

    eNB1m.start( f_s1ap_default_ENBm(0) );
    eNB2m.start( f_s1ap_default_ENBm(1) );
    eNB3m.start( f_s1ap_default_ENBm(2) );
    hSSm.start( f_s1ap_default_HSSm() );

    f_serverSyncClientsAndStop(8, {"init", "attach", "s1release", c_poSyncPoint} );
  }

  function f_s1ap_default_ENB(in integer p_index) runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    var template EnbParameters v_enb_params;
    var UnicodeText1to255 v_mnc_value;

    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S1SyncDefault() );

    //SCTP Connection
    f_enbParameters(v_enb_params);
    v_enb_params.sctpPortNumber_MME_New := MmeParameters.mp_sctpPortNumber_MME_New + p_index;
    v_enb_params.sctpPortNumber_ENB_UE := MmeParameters.mp_sctpPortNumber_ENB_UE + p_index;
    v_enb_params.supportedTAs := a_SupportedTAs_list_common_xxx (
            mp_s1AP_TAC_1, mp_s1AP_plmnIdentity_1,
            mp_s1AP_TAC_2, mp_s1AP_plmnIdentity_1,
            mp_s1AP_TAC_3, mp_s1AP_plmnIdentity_1,
            mp_s1AP_TAC_4, mp_s1AP_plmnIdentity_1 );   
    log(v_enb_params);

    v_ret := f_preamble_S1(v_enb_params);

    f_sleep(1.5);
    f_selfOrClientSyncAndVerdict("init", v_ret);

    f_SubscriberParameters(v_subscriberParameters);
    v_subscriberParameters.s1.tAC := a_TAC(1);  
    f_sleep(3.0);
    v_ret := f_s1_BasicAttachWithSecurityAes(v_subscriberParameters);
    f_selfOrClientExternalSyncAndVerdict("attach", v_ret);

    f_sleep(3.0);
    v_ret := f_s1_UEContextRelease_srs(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict("s1release",v_ret);

    f_sleep(0.5);
    f_postamble_S1 ();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);  
    f_disconnect4SelfOrClientSync();    
  }

  function f_s1ap_default_ENBm(in integer p_index) runs on S1Comp {
    var FncRetCode v_ret := e_error;
    var template EnbParameters v_enb_params;
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate( d_S1SyncDefault() );
    
    g_v_verificationFlag := true;
    
    //SCTP Connection
    f_enbParameters(v_enb_params);
    v_enb_params.sctpPortNumber_MME_New := MmeParameters.mp_sctpPortNumber_MME_New + p_index;
    v_enb_params.sctpPortNumber_ENB_UE := MmeParameters.mp_sctpPortNumber_ENB_UE + p_index;
    log(v_enb_params);

    v_ret := f_preamble__S1m(v_enb_params);
    
    // S1SetupRequest
    //f_receiveNonUE(a_s1Setup_S1SetupRequest_PDU(?));
    // S1SetupResponse
    //pt_s1apNonUE.send(RawGtpV2Msg:'201100170000020069000b0000ffffff0000ffff00000057400119'O)
    f_receiveSendNonUE( a_s1Setup_S1SetupRequest_PDU(?),
                        a_s1Setup_S1SetupResponse_PDU({
                            a_S1SetupResponseIE_ServedGUMMEIs({
                              a_ServedGUMMEIsItem(
                                {'FFFFFF'O},
                                {'FFFF'O},
                                {'00'O},
                                omit)
                              }),
                        a_S1SetupResponseIE_RelativeMMECapacity(25)} )
      );

    f_sleep(5.0);
    f_selfOrClientSyncAndVerdict("init", v_ret);

    // attachRequest
    f_receive(a_initialUEMessage_InitialUEMessage_PDU(?));

    f_sleep(0.5);
    // authenticationRequest
    pt_s1ap.send(RawGtpV2Msg:'000b40380000030000000200a90008000200d8001a002524075200da9d0103f014785ff9e1da5feed5bc5f1010000100500470081120124444443401'O)
    // authenticationResponse
    f_receive(a_uplinkNASTransport_UplinkNASTransport_PDU(?));

    f_sleep(0.5);
    // securityModeCommand
    pt_s1ap.send(RawGtpV2Msg:'000b40240000030000000200a90008000200d8001a001110377fc4276600075d020005a020a80060'O)
    // securityModeComplete
    f_receive(a_uplinkNASTransport_UplinkNASTransport_PDU(?));

    f_sleep(0.5);
    // InitialContextSetupRequest attachAccept
    pt_s1ap.send(RawGtpV2Msg:'00090080d20000070000000200a90008000200d8004200060803e82007d00018008082000034007d450009070f800a660a0b000030396e27e1b0a64601074201490640627241000100475201c10509ffffffff1f03736777036e736e03636f6d066d6e63313437066d636332363204677072730501c0a800015d0100300c23111f939602017648ffff003203815e020102500bf6627241c3e333c0000072172c5949640100006b0005080004000000490020e1380d1f690776f22240d7713bd6bb24385324a0e8fc57645b90bba45fe24069006a400100'O)

    // InitialContextSetupResponse 
    f_receive(a_initialContextSetup_InitialContextSetupResponse_PDU(?));

    // attachComplete
    f_receive(a_uplinkNASTransport_UplinkNASTransport_PDU(?));
    
    f_selfOrClientSyncAndVerdict("attach", v_ret);

    //UEContextReleaseRequest
    pt_s1ap.receive;

    f_sleep(0.5);
    //UEContextReleaseCommand
    //pt_s1ap.send(RawGtpV2Msg:'001700110000020063000400a900d80002400202e0'O)
    // modify to make template mismatch
    pt_s1ap.send(RawGtpV2Msg:'000b40210000030000000200aa0008000200d9001a000e0d2754b933da0907620403123456'O);

    //UEContextReleaseComplete
    pt_s1ap.receive;

    f_selfOrClientSyncAndVerdict("s1release",v_ret);

    f_sleep(0.5);
    f_postamble_S1();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_s1ap_default_HSS () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();

    v_ret := f_preambleDiameter( v_subscriberParameters,
                                 mp_sctpIpAddrS6aHLR,
                                 mp_sctpPortNumberS6aHLR, 
                                 mp_sctpIpAddrS6aMMENew,
                                 mp_sctpPortNumberS6aMMENew );

    f_sleep(0.5);
    f_selfOrClientSyncAndVerdict("init",v_ret);  

    v_ret := f_BasicUpdateLocationWithAuthenticationChargChar(v_subscriberParameters);
    
    f_selfOrClientSyncAndVerdict("attach",v_ret);
    f_selfOrClientSyncAndVerdict("s1release",v_ret);

    f_sleep(0.5);
    f_Postamble_S6a(v_subscriberParameters);

    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();

  }

   function f_s1ap_default_HSSm () runs on DIAMComp {
    var FncRetCode v_ret := e_success;
    var template SubscriberParameters v_subscriberParameters;
    var template SubscriberParametersTable v_subscriberParametersTable;
    f_SubscriberParameters(v_subscriberParameters);

    f_connect4SelfOrClientSync();
    g_v_verificationFlag := true;
    f_preambleDiameterWithoutCerCea( mp_sctpIpAddrS6aMMENew,
                        mp_sctpPortNumberS6aMMENew,
                        mp_sctpIpAddrS6aHLR,
                        mp_sctpPortNumberS6aHLR);

    //CER
    f_sleep (5.0);
    pt_diameter.send(RawDiameterMsg:'01010000c880000101000000003a7b660b0000000c00000104400000200000010a4000000c000028af000001024000000c01000023000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d0000000001014000000e0001c0a87f0200000000010a4000000c00006f2a0000010d0000000f466c6578694e5300000001164000000c00000000000001094000000c000028af000001024000000c010000230000010b0000000c00000001'O)

    pt_diameter.receive;

    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_sleep (1.0);
    pt_diameter.send(RawDiameterMsg:'01010000e4c000013e01000023583013085830130800000107400000234d4d452e4e534e2e434f4d3b333735383039363339363b3531323100000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d00000001400000173236323237303030303030303030310000000580c000002c000028af00000582c0000010000028af0000000100000584c0000010000028af000000010000057fc000000f000028af62f27200'O)

    pt_diameter.receive;

    f_sleep (1.0);
    pt_diameter.send(RawDiameterMsg:'0101000120c000013c010000236e0014086e00140800000107400000234d4d452e4e534e2e434f4d3b333735383039363339363b3533373700000001154000000c00000001000001084000001a6f726967696e686f73742e6d6d652e636f6d0000000001284000001a6f726967696e7265616c6d6e736e2e636f6d00000000011b40000014746573742e6e736e2e636f6d0000000140000017323632323730303030303030303031000000057dc0000010000028af000000620000057fc000000f000028af62f2720000000408c0000010000028af000003ec0000064f80000010000028af000000000000027480000038000028af0000010a4000000c000028af0000027580000010000028af000000000000027680000010000028af00000000'O)
    pt_diameter.receive;

   f_selfOrClientSyncAndVerdict("attach",v_ret);
   f_selfOrClientSyncAndVerdict("s1release",v_ret);

    // DPR / DPA
    pt_diameter.receive;
    f_sleep(0.5);
    pt_diameter.send(RawDiameterMsg:'01010000500000011A0000000000000001000000010000010c4000000c0000000a000001084000001d616363657373706f696e74372e61636d652e636f6d000000000001284000001061636d652e636f6d'O);

    f_sleep(1.0);

    f_Postamble_S6a_WithoutShutdown();

    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }


import from GtpV2DataPortIf { function f_GtpV2_ReceiveWithOutIPAddressChange; };
import from GtpV1DataPortIf { function f_GtpV1_Send, f_GtpV1_ReceiveWithoutIPAddressChange; };
testcase tc_DSCP_mirror() runs on MTC system TSI {
    var GTPV2Comp sGW := GTPV2Comp.create("SGW");
    var GTPV2Comp sGWm := GTPV2Comp.create("SGWm");

    var S3Comp sGSN := S3Comp.create("SGSN");
    var S3Comp sGSNm := S3Comp.create("SGSNm");

    var SyncPointList v_SyncPointList := {
      "init",
      c_poSyncPoint
    };

    sGW.start(f_DSCP_SGW());
    sGWm.start(f_DSCP_SGW_mirror());

    sGSN.start( f_DSCP_SGSN() );
    sGSNm.start( f_DSCP_SGSN_mirror() );

    f_serverSyncClientsAndStop( 4 , v_SyncPointList );
  }

  function f_DSCP_SGW () runs on GTPV2Comp {
  var FncRetCode v_ret := e_success;
  var template SubscriberParameters v_subscriberParameters;
  v_subscriberParameters.
    
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    v_ret := f_preamble_S11 ( mp_udpIpAddr_S11_SGW, 
                              mp_udpPortNumber_S11_SGW, 
                              mp_udpIpAddr_S11_MME_New, 
                              mp_udpPortNumber_S11_MME_New );

    g_d_s11CommonDefault := activate(d_GtpV2CommonDefault()); 

    f_SubscriberParameters(v_subscriberParameters);
    f_selfOrClientSyncAndVerdict("init",v_ret);

    v_subscriberParameters.s11_core7.indication  := a_Indication(?,a_IEInfo(0),a_IndicationValue(e_false,e_false,e_false,e_false,e_false,e_false,
                                                       e_false,e_false,e_false,e_false,e_false,e_false,
                                                       e_false,e_false,e_false,e_false,omit,omit,omit,omit));

    f_setTosInIpHeader(136); // send message with TOS 136

    v_ret := f_s11_CreateSessionBasic (v_subscriberParameters); // send TOS 136
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 48, expect anyone
    v_ret := f_s11_CreateSessionBasic (v_subscriberParameters); // send TOS 136
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 48, expect anyone

    v_subscriberParameters.s11_core7.gtpSequenceNumber :=  a_int(7);
    v_subscriberParameters.s11_core7.gtpSequenceNumber := valueof(gtpSequenceNumber(v_subscriberParameters.s11_core7.gtpSequenceNumber)) + 10;
    v_subscriberParameters.s11_core7.s11_cause := e_context_not_found;
    v_subscriberParameters.s11.s11_cause := e_context_non_existent_or_found;

    f_setTosInIpHeader(0); // reset TOS value
    v_ret := f_s11_ModifyBearerBasic (v_subscriberParameters); // send TOS 0
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 48, expect anyone

    v_ret := f_s11_ModifyBearerBasic (v_subscriberParameters); // send TOS 0
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 48, expect anyone

    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

  function f_DSCP_SGW_mirror () runs on GTPV2Comp {
    var FncRetCode v_ret := e_success;
   
    f_connect4SelfOrClientSync();
    g_v_syncDefault := activate(d_S11SyncDefault());

    if (f_preamble_S11 ( mp_udpIpAddr_S11_MME_New,
                         mp_udpPortNumber_S11_MME_New,
                         mp_udpIpAddr_S11_SGW,
                         mp_udpPortNumber_S11_SGW) != e_success){
      setverdict(fail);
    }

    g_d_s11CommonDefault := activate(d_GtpV2CommonDefault()); 

    f_selfOrClientSyncAndVerdict("init",v_ret);

    f_setTosInIpHeader(48); // send message with TOS 48

    v_ret := f_s11_CreateSessionBasic_mirror();
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 136, expect anyone

    g_v_expected_tos := 136; // expect receive message with TOS 136
    v_ret := f_s11_CreateSessionBasic_mirror();
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 136, expect 136

    g_v_expected_tos := 0;
    v_ret := f_s11_ModifyBearerBasic_mirror();
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos);

    g_v_expected_tos := -1; // expect receive message with any TOS (*)
    v_ret := f_s11_ModifyBearerBasic_mirror();
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 0, expect anyone

    f_postamble_S11 ();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync();
  }

function f_s11_CreateSessionBasic_mirror ()
 runs on GTPV2Comp return FncRetCode {
  var FncRetCode v_ret := e_error;
  var octetstring v_createSesson := 
      '482000b400000000000007000100080062020100000000f14c00080053680100'O &
      '00000010560008001085f817ff81fca05300030085f817'O &
      '5200010006'O & '4d000200'O & '0000570009008a03000003'O &
       f_RealIP2Oct(mp_localAddress) & //'83cfac8d'O & //'83cfac8d'O &
      '5700090187000000000a66b6b847000c0003736777036e736e03636f6d800001'O &
      '00fc63000100014f00050001000000007f0001000048000800000003e8000007'O &
      'd05d001f00490001000550001600040900000000000000000000000000000000'O &
      '000000000300010001'O;

    f_sleep(0.5);
    pt_gtp.send(RawGtpV2Msg:v_createSesson);

    v_ret:= f_GtpV2_ReceiveWithOutIPAddressChange(GtpV2MsgCore7:?);
    return v_ret
  }

function f_s11_ModifyBearerBasic_mirror ()
 runs on GTPV2Comp return FncRetCode {
  var FncRetCode v_ret := e_error;
  var octetstring v_modifyBearer := 
    '4822003103000003000008004d0002000000570009008a03000003'O &
     f_RealIP2Oct(mp_localAddress) & //'83cfac8d'O & //'83cfac8d'O &
    '5d00120049000100055700090080000030390a8c435d'O;

    f_sleep(0.5);
    pt_gtp.send(RawGtpV2Msg:v_modifyBearer);

    v_ret:= f_GtpV2_ReceiveWithOutIPAddressChange(GtpV2MsgCore7:?);
    return v_ret
  }

  function f_DSCP_SGSN( ) runs on S3Comp {
    var FncRetCode v_ret := e_success;

    f_connect4SelfOrClientSync();
    activate( d_S3SyncDefault() );
    f_preambleGtpV1( mp_udpIpAddr_S11_SGW, mp_udpPortNumber_S11_SGW + 10, 
                     mp_udpIpAddr_S11_MME_New, mp_udpPortNumber_S11_MME_New + 10 );
    f_selfOrClientSyncAndVerdict("init",v_ret)

    f_setTosInIpHeader(192); // send message with TOS 192
    
    f_GtpV1_ReceiveWithoutIPAddressChange(a_sgsnContextRequest_for_Gtpv1(?));
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 0, expect anyone
    
    f_GtpV1_Send(a_updatePDPContextResponse_for_Gtpv1(0));
    
    f_GtpV1_ReceiveWithoutIPAddressChange(a_sgsnContextRequest_for_Gtpv1(?));
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 0, expect anyone
    
    f_GtpV1_Send(a_updatePDPContextResponse_for_Gtpv1(0));
  
    f_postambleGtpV1();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint,v_ret);
    f_disconnect4SelfOrClientSync()  
 } 
 
  function f_DSCP_SGSN_mirror( ) runs on S3Comp {
    var FncRetCode v_ret := e_success;

    f_connect4SelfOrClientSync();
    activate( d_S3SyncDefault() );
    f_preambleGtpV1( mp_udpIpAddr_S11_MME_New, mp_udpPortNumber_S11_MME_New + 10, 
                     mp_udpIpAddr_S11_SGW, mp_udpPortNumber_S11_SGW + 10 );
    f_selfOrClientSyncAndVerdict("init", v_ret);
   
    f_sleep(0.2);
    f_GtpV1_Send(a_sgsnContextRequest_for_Gtpv1(0));
   
    f_GtpV1_ReceiveWithoutIPAddressChange(a_updatePDPContextResponse_for_Gtpv1(?));
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 192, expect anyone
    
    f_sleep(0.2);
    f_GtpV1_Send(a_sgsnContextRequest_for_Gtpv1(0));  
    
    f_GtpV1_ReceiveWithoutIPAddressChange(a_updatePDPContextResponse_for_Gtpv1(?));
    log("TOS: ", g_v_lastReceivedUdpTcpInd.tos); // received TOS is 192, expect anyone
    
    f_postambleGtpV1();
    f_selfOrClientSyncAndVerdict(c_poSyncPoint, v_ret);
    f_disconnect4SelfOrClientSync();
 }
 
}
